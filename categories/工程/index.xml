<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>工程 on 111qqz的小窝</title><link>https://111qqz.com/categories/%E5%B7%A5%E7%A8%8B/</link><description>Recent content in 工程 on 111qqz的小窝</description><generator>Hugo -- gohugo.io</generator><language>en</language><copyright>Copyright © 2012-2022 all rights reserved.</copyright><lastBuildDate>Sat, 26 Feb 2022 18:12:20 +0800</lastBuildDate><atom:link href="https://111qqz.com/categories/%E5%B7%A5%E7%A8%8B/index.xml" rel="self" type="application/rss+xml"/><item><title>2022 TO DO list</title><link>https://111qqz.com/2022/02/2022-to-do-list/</link><pubDate>Sat, 26 Feb 2022 18:12:20 +0800</pubDate><guid>https://111qqz.com/2022/02/2022-to-do-list/</guid><description>
竟然一下子就2022年了，时间过得真快。 还是简单列一下TODO list吧。
源码 levelDB workflow 书籍 课程 目前买了一年的极客时间，可以学6门课... 还没想好学哪些...</description></item><item><title>x86 calling conventions</title><link>https://111qqz.com/2019/01/x86-calling-conventions/</link><pubDate>Thu, 31 Jan 2019 12:12:22 +0000</pubDate><guid>https://111qqz.com/2019/01/x86-calling-conventions/</guid><description>
x86的调用约定主要说的是这几件事:
* The order in which atomic (scalar) parameters, or individual parts of a complex parameter, are allocated * How parameters are passed (pushed on the stack, placed in registers, or a mix of both) * Which registers the called function must preserve for the caller (also known as: callee-saved registers or non-volatile registers) * How the task of preparing the stack for, and restoring after, a function call is divided between the caller and the callee 调用约定实际上并不唯一</description></item></channel></rss>