<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>其他 on 111qqz的小窝</title>
    <link>https://111qqz.github.io/categories/%E5%85%B6%E4%BB%96/</link>
    <description>Recent content in 其他 on 111qqz的小窝</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Wed, 01 May 2019 12:09:18 +0000</lastBuildDate>
    
	<atom:link href="https://111qqz.github.io/categories/%E5%85%B6%E4%BB%96/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>BattleBlock Theater linux下无法启动的解决办法　（　void* MemoryBlock::Alloc(unsigned int): Assertion failed ）</title>
      <link>https://111qqz.github.io/2019/05/battleblock-theater-linux-start-failed/</link>
      <pubDate>Wed, 01 May 2019 12:09:18 +0000</pubDate>
      
      <guid>https://111qqz.github.io/2019/05/battleblock-theater-linux-start-failed/</guid>
      <description>在steam上买了 BattleBlock Theater， 官方说支持linux，但是却无法启动。 在steam里启动看不到log,于是找到游戏的安装目录。 /home/coder/.steam/steam/steamapps/common/BattleBlock Theater 在终端</description>
    </item>
    
    <item>
      <title>manjaro /archlinux 下 steam 文明5/6(civilization V/VI)的运行方法</title>
      <link>https://111qqz.github.io/2019/02/manjaro-archlinux-civilization/</link>
      <pubDate>Sat, 23 Feb 2019 14:28:01 +0000</pubDate>
      
      <guid>https://111qqz.github.io/2019/02/manjaro-archlinux-civilization/</guid>
      <description>系统版本为Manjaro 18.0.3 Illyria 运行文明5比较容易，只需要设置启动选项为: LD_PRELOAD=/usr/lib32/libopenal.so.1 %command% 文明6运行会报错 undefined symbol: FT_Done_MM_Var 解决办法是 在终端中用如下办法运行steam:</description>
    </item>
    
    <item>
      <title>2019 to do list</title>
      <link>https://111qqz.github.io/2019/01/2019-to-do-list/</link>
      <pubDate>Tue, 01 Jan 2019 13:13:04 +0000</pubDate>
      
      <guid>https://111qqz.github.io/2019/01/2019-to-do-list/</guid>
      <description>* &amp;lt;del&amp;gt;Operating Systems: Three Easy Pieces&amp;lt;/del&amp;gt; * fluent python * &amp;lt;del&amp;gt;《计算机网络:自顶向下方法》&amp;lt;/del&amp;gt; * 《mysql必知必会》 * PC Assembly Language ( for mit 6.828 )</description>
    </item>
    
    <item>
      <title>我在公司的服务器上执行了sudo rm -rf /*</title>
      <link>https://111qqz.github.io/2018/11/when-i-execute-sudo-rm-rf-on-the-company-server/</link>
      <pubDate>Sat, 24 Nov 2018 08:31:19 +0000</pubDate>
      
      <guid>https://111qqz.github.io/2018/11/when-i-execute-sudo-rm-rf-on-the-company-server/</guid>
      <description>TL;DR * 依靠人的小心谨慎是不靠谱的，人总有失误的时候 * 看了下docker volume的权限机制，貌似是从docker image中继承。 * 写了两个</description>
    </item>
    
    <item>
      <title>docker network 与 本地 network 网段冲突</title>
      <link>https://111qqz.github.io/2018/11/docker-network-conflict-with-local-subnetwork/</link>
      <pubDate>Tue, 20 Nov 2018 08:33:20 +0000</pubDate>
      
      <guid>https://111qqz.github.io/2018/11/docker-network-conflict-with-local-subnetwork/</guid>
      <description>起因: 公司部署在hk的爬虫服务器突然挂掉了。后来发现只是在深圳办公区无法访问。排查后发现原因是docker的网络(包括docker netwo</description>
    </item>
    
    <item>
      <title>记一次在 docker compose 中使用volume的踩坑记录</title>
      <link>https://111qqz.github.io/2018/11/docker-compose-default-volume-name-makes-me-confused/</link>
      <pubDate>Wed, 14 Nov 2018 08:06:57 +0000</pubDate>
      
      <guid>https://111qqz.github.io/2018/11/docker-compose-default-volume-name-makes-me-confused/</guid>
      <description>现象: 使用docker compose 挂载 named volume 无效（且没有错误提示) 排查过程: 一开始是没有使用docker-compose命令，直接使用docker run -v 命</description>
    </item>
    
    <item>
      <title>How to use Scrapy with Django Application（转自medium）</title>
      <link>https://111qqz.github.io/2018/11/how-to-use-scrapy-with-django-application/</link>
      <pubDate>Tue, 06 Nov 2018 13:33:00 +0000</pubDate>
      
      <guid>https://111qqz.github.io/2018/11/how-to-use-scrapy-with-django-application/</guid>
      <description>在meidum上看到一篇很赞的文章&amp;hellip;无奈关键部分一律无法加载出来&amp;hellip;挂了梯子也不行，很心塞&amp;hellip;刚刚突然</description>
    </item>
    
    <item>
      <title>lua学习笔记</title>
      <link>https://111qqz.github.io/2018/10/lua-notes/</link>
      <pubDate>Fri, 26 Oct 2018 02:47:59 +0000</pubDate>
      
      <guid>https://111qqz.github.io/2018/10/lua-notes/</guid>
      <description>lua是一门轻量级的脚本语言&amp;hellip;好像比较适合写游戏？在 太阳神三国杀 中见过很多lua脚本。 由于splash 的渲染脚本需要用lua来</description>
    </item>
    
    <item>
      <title>golang 学习笔记</title>
      <link>https://111qqz.github.io/2018/10/golang-notes/</link>
      <pubDate>Sat, 20 Oct 2018 11:06:56 +0000</pubDate>
      
      <guid>https://111qqz.github.io/2018/10/golang-notes/</guid>
      <description>先放资料,可能比较侧重于go在系统调用方面的内容. 这里不会记录详细的go的语法,只会记录学习的过程,踩到的坑,以及其他我认为值得记录的内容.</description>
    </item>
    
    <item>
      <title>爬虫学习笔记</title>
      <link>https://111qqz.github.io/2018/10/web-crawler-notes/</link>
      <pubDate>Fri, 19 Oct 2018 08:18:53 +0000</pubDate>
      
      <guid>https://111qqz.github.io/2018/10/web-crawler-notes/</guid>
      <description>再次迫于生计。。。 参考了面向新人的 Python 爬虫学习资料 大致的学习路线为: 一： 简单的定向脚本爬虫（ request --- bs4 --- re ） 二： 大型框架式爬虫（ Scrapy 框架为主） 三：浏</description>
    </item>
    
    <item>
      <title>java-grpc 踩坑记录</title>
      <link>https://111qqz.github.io/2018/10/java-grpc-notes/</link>
      <pubDate>Wed, 17 Oct 2018 03:29:03 +0000</pubDate>
      
      <guid>https://111qqz.github.io/2018/10/java-grpc-notes/</guid>
      <description>最近的项目需要java和python之间的进程通信，想到了之前使用过的的grpc. 参考官方quickstart * JDK: version 7 or higher 看起来只依赖jdk</description>
    </item>
    
    <item>
      <title>2018 to do list</title>
      <link>https://111qqz.github.io/2018/10/2018-to-do-list/</link>
      <pubDate>Sun, 14 Oct 2018 15:30:52 +0000</pubDate>
      
      <guid>https://111qqz.github.io/2018/10/2018-to-do-list/</guid>
      <description>迫于最近的事情有点多，还是记录一下。 果然to do list什么的，还是要按照年份记录啊。 * &amp;lt;del&amp;gt;了解linux strace命令&amp;</description>
    </item>
    
    <item>
      <title>spring 学习笔记</title>
      <link>https://111qqz.github.io/2018/10/spring-notes/</link>
      <pubDate>Wed, 10 Oct 2018 09:56:46 +0000</pubDate>
      
      <guid>https://111qqz.github.io/2018/10/spring-notes/</guid>
      <description>迫于生计，又要从零开始学习spring. 在这篇文章之前，对java的基础是2015年写过一个java大作业，对spring是一无所知。 为了学</description>
    </item>
    
    <item>
      <title>spring 依赖注入</title>
      <link>https://111qqz.github.io/2018/10/spring-dependency-injection/</link>
      <pubDate>Tue, 09 Oct 2018 07:45:17 +0000</pubDate>
      
      <guid>https://111qqz.github.io/2018/10/spring-dependency-injection/</guid>
      <description>真是个不明觉厉的术语&amp;hellip;其实是个特别简单的概念orz 用白话讲，如果一个class A中用到了class B的实例，那么class B的</description>
    </item>
    
    <item>
      <title>解决ubuntu 14.04 下 壁纸软件 variety 崩溃 ValueError: bad marshal data (unknown type code) 的问题</title>
      <link>https://111qqz.github.io/2018/09/the-way-to-fix-variety-crash-on-ubuntu-14-04/</link>
      <pubDate>Sun, 30 Sep 2018 08:59:31 +0000</pubDate>
      
      <guid>https://111qqz.github.io/2018/09/the-way-to-fix-variety-crash-on-ubuntu-14-04/</guid>
      <description>系统为ubuntu 14.04 迫于特别想定时换壁纸，查了下解决方案。 发现只要删除掉/usr目录下所有的&amp;rsquo;.pyc&amp;rsquo;文件就可以 命</description>
    </item>
    
    <item>
      <title>[c&#43;&#43;11] std::async std::packaged_task std::promise and std::future notes</title>
      <link>https://111qqz.github.io/2018/09/c11-async-packaged-ask-promise-future-notes/</link>
      <pubDate>Sun, 30 Sep 2018 06:49:27 +0000</pubDate>
      
      <guid>https://111qqz.github.io/2018/09/c11-async-packaged-ask-promise-future-notes/</guid>
      <description>把std::async,std::packaged_task,std::promise三个放在一起来说,是因为他们都可以返回一个std::f</description>
    </item>
    
    <item>
      <title>[C&#43;&#43;11]std::condition_variable  notes</title>
      <link>https://111qqz.github.io/2018/09/condition_variable-notes/</link>
      <pubDate>Sun, 23 Sep 2018 08:42:33 +0000</pubDate>
      
      <guid>https://111qqz.github.io/2018/09/condition_variable-notes/</guid>
      <description>condition_variable 类是同步原语，能用于阻塞一个线程，或同时阻塞多个线程，直至另一线程修改共享变量（条件）并通知 condition_variable 。 用人话来说,condition_varia</description>
    </item>
    
    <item>
      <title>react 中setState的更新策略</title>
      <link>https://111qqz.github.io/2018/09/react-setstate-update-strategy/</link>
      <pubDate>Tue, 18 Sep 2018 13:31:06 +0000</pubDate>
      
      <guid>https://111qqz.github.io/2018/09/react-setstate-update-strategy/</guid>
      <description>起因是想更新一个array类型的state,结果setState更新之后用console.log() debug 结果，发现结果特别玄学。。。 查了下发现</description>
    </item>
    
    <item>
      <title>learn java in 21 minutes for C&#43;&#43; Programmers</title>
      <link>https://111qqz.github.io/2018/09/learn-java-in-21-minutes-for-c-programmers/</link>
      <pubDate>Mon, 10 Sep 2018 11:53:31 +0000</pubDate>
      
      <guid>https://111qqz.github.io/2018/09/learn-java-in-21-minutes-for-c-programmers/</guid>
      <description>先放资料: Learning a New Programming Language: Java for C++ Programmers java package 先说几条重要的人话: * 一个java文件第一行可以声明该文件所属于的package，package的名字必须与</description>
    </item>
    
    <item>
      <title>[c&#43;&#43;11 ]std::move  右值引用  转移语义  完美转发 notes</title>
      <link>https://111qqz.github.io/2018/09/c11-stdmove-notes/</link>
      <pubDate>Sun, 09 Sep 2018 13:01:45 +0000</pubDate>
      
      <guid>https://111qqz.github.io/2018/09/c11-stdmove-notes/</guid>
      <description>起因是在看，里面讲到转移一个std::thread的ownership提到了std::move. 之前[C++11 ] std::ref&amp;amp;&amp;amp;std::reference_wrapper notes 提到的情况是在我们想要</description>
    </item>
    
    <item>
      <title>[C&#43;&#43;11 ] std::ref&amp;&amp;std::reference_wrapper  notes</title>
      <link>https://111qqz.github.io/2018/09/reference_wrapper-notes/</link>
      <pubDate>Sun, 09 Sep 2018 11:28:53 +0000</pubDate>
      
      <guid>https://111qqz.github.io/2018/09/reference_wrapper-notes/</guid>
      <description>起因是在看《CplusplusConcurrencyInAction_PracticalMultithreading》的时候，里面讲到初始化</description>
    </item>
    
    <item>
      <title>前端To do list</title>
      <link>https://111qqz.github.io/2018/09/front-end-to-do-list/</link>
      <pubDate>Thu, 06 Sep 2018 09:56:57 +0000</pubDate>
      
      <guid>https://111qqz.github.io/2018/09/front-end-to-do-list/</guid>
      <description>20181014update: 可以不写了，开心 迫于生计，要从零开始学习前端。 由于之前的to do list 年代久远+ 前端的技术栈可之前几乎没有关系，因此新开一篇记录。 * css盒子模</description>
    </item>
    
    <item>
      <title>typescript学习笔记</title>
      <link>https://111qqz.github.io/2018/09/typescript-notes/</link>
      <pubDate>Wed, 05 Sep 2018 08:02:42 +0000</pubDate>
      
      <guid>https://111qqz.github.io/2018/09/typescript-notes/</guid>
      <description>先放参考资料: TypeScript 入门教程 React &amp;amp; Webpack react-typescript-cheatsheet (强推一波，讲了很多react+ts的实践） typescript是javascript的语法扩展。。。好处是</description>
    </item>
    
    <item>
      <title>[设计模式] 观察者( Observer )模式学习笔记</title>
      <link>https://111qqz.github.io/2018/09/observer-pattern-notes/</link>
      <pubDate>Sat, 01 Sep 2018 09:27:40 +0000</pubDate>
      
      <guid>https://111qqz.github.io/2018/09/observer-pattern-notes/</guid>
      <description>最近在学习node.js，里面讲到node.js的事件机制使用了观察者模式，因此来学习一下。 观察者模式的目的是定义对象间的一种一对多的依赖关</description>
    </item>
    
    <item>
      <title>Redux 学习笔记</title>
      <link>https://111qqz.github.io/2018/08/redux-notes/</link>
      <pubDate>Thu, 30 Aug 2018 12:05:35 +0000</pubDate>
      
      <guid>https://111qqz.github.io/2018/08/redux-notes/</guid>
      <description>Redux是Flux架构的一种实现。 至于Flux架构是什么，可以参考Flux 架构入门教程 粗略得讲，和MVC架构是同一类东西，最大的区别是单向</description>
    </item>
    
    <item>
      <title>JavaScript 学习笔记</title>
      <link>https://111qqz.github.io/2018/08/javascript-notes/</link>
      <pubDate>Thu, 30 Aug 2018 03:42:19 +0000</pubDate>
      
      <guid>https://111qqz.github.io/2018/08/javascript-notes/</guid>
      <description>暂时没空从头开始搞&amp;hellip;用到哪里先记录一下好了orz 我觉得不行，还是要先大致了解一下。 参考资料: A re-introduction to JavaScript (JS tutorial) 继承与原型链 // 让我们假</description>
    </item>
    
    <item>
      <title>react学习笔记</title>
      <link>https://111qqz.github.io/2018/08/react-notes/</link>
      <pubDate>Tue, 28 Aug 2018 10:16:16 +0000</pubDate>
      
      <guid>https://111qqz.github.io/2018/08/react-notes/</guid>
      <description>首先介绍一个fb家的快速开发react的工具 create-react-app 这个东西依赖node6.0或者更高版本。 关于在ubuntu 14.04上安装node ，可以参考这</description>
    </item>
    
    <item>
      <title>[设计模式] 组合模式（composite） 学习笔记</title>
      <link>https://111qqz.github.io/2018/08/composite-pattern-notes/</link>
      <pubDate>Tue, 28 Aug 2018 06:30:59 +0000</pubDate>
      
      <guid>https://111qqz.github.io/2018/08/composite-pattern-notes/</guid>
      <description>目的是忽略单一对象和组合对象的不同。 有点像以前写过的用链表定义一个树结构，每个节点是一个val + 多个*tree 。如果某个节点是叶子节点了，那</description>
    </item>
    
    <item>
      <title>[C&#43;&#43;11] promise &amp;&amp; future leanrning notes</title>
      <link>https://111qqz.github.io/2018/08/promise-future-notes/</link>
      <pubDate>Thu, 23 Aug 2018 02:45:53 +0000</pubDate>
      
      <guid>https://111qqz.github.io/2018/08/promise-future-notes/</guid>
      <description>用人话就是，主线程传给附属线程一个promise Object,然后主线程想要获取附属线程set给promise Object的值（也就是该线程</description>
    </item>
    
    <item>
      <title>把二进制文件按字节读到vector中</title>
      <link>https://111qqz.github.io/2018/08/how-to-read-binary-data-into-cpp-vector/</link>
      <pubDate>Tue, 21 Aug 2018 06:08:56 +0000</pubDate>
      
      <guid>https://111qqz.github.io/2018/08/how-to-read-binary-data-into-cpp-vector/</guid>
      <description>std::vector&amp;lt;unsigned char&amp;gt; readFromFile1(const char* filePath) { FILE* file = fopen(filePath, &amp;quot;rb&amp;quot;); std::vector&amp;lt;unsigned char&amp;gt; result; if (file == nullptr) { return result; } // 获取文件大小，尽量一次读完 size_t fileSize = getFileSize(file); if (fileSize != 0) { result.resize(fileSize); size_t n = fread(&amp;amp;result[0], 1, fileSize, file); assert(n &amp;lt;= fileSize); if (n != fileSize) { result.resize(n); } } // 在读取过程</description>
    </item>
    
    <item>
      <title>boost:property_tree 学习笔记</title>
      <link>https://111qqz.github.io/2018/08/boost_property_tree-notes/</link>
      <pubDate>Mon, 20 Aug 2018 08:10:16 +0000</pubDate>
      
      <guid>https://111qqz.github.io/2018/08/boost_property_tree-notes/</guid>
      <description>先放资料: How to use boost::property_tree to load and write JSON How to iterate a boost property tree? 不出现key的方法遍历一个json文件: /* *********************************************** Author :111qqz mail: renkuanze@sensetime.com Created Time :2018年08月17日 星期五 15时29分</description>
    </item>
    
    <item>
      <title>记录一次因动态库符号表可见性导致的未定义的引用(undefined reference)</title>
      <link>https://111qqz.github.io/2018/08/undefined-references-caused-by-dynamic-library-symbol-table-visibility/</link>
      <pubDate>Wed, 15 Aug 2018 13:12:17 +0000</pubDate>
      
      <guid>https://111qqz.github.io/2018/08/undefined-references-caused-by-dynamic-library-symbol-table-visibility/</guid>
      <description>编译某代码，发现报错某函数未定义的引用。该函数的是先前编译得到的动态库中。 先去check了该函数的实现，还有接口与头文件中的声明是否统一。发</description>
    </item>
    
    <item>
      <title>使用python计算误差代码</title>
      <link>https://111qqz.github.io/2018/08/calculate-error-with-python/</link>
      <pubDate>Mon, 06 Aug 2018 11:54:35 +0000</pubDate>
      
      <guid>https://111qqz.github.io/2018/08/calculate-error-with-python/</guid>
      <description>import os import math ave_err=0.0 max_err=0.0 max_err_rate=0.0 length=0 with open(&amp;ldquo;cpu_result.txt&amp;rdquo;,&amp;ldquo;r&amp;rdquo;) as fp1, open(&amp;ldquo;cuda_ppl_result.txt&amp;rdquo;,&amp;ldquo;r&amp;rdquo;) as fp2: for l1 in fp1: l2 = fp2.readline() l1=l1[:-2] l2=l2[:-2] lst = l1.split(&amp;rsquo; &amp;lsquo;) lst2 = l2.split(&amp;rsquo; &amp;lsquo;) #print lst lst = [float(x) for x in lst ] length = length + len(lst) lst2 = [float(x) for x in lst2] #print (lst) #print (lst2) for index,x in enumerate(lst): y = lst2[index] ave_err = ave_err + abs(x-y)</description>
    </item>
    
    <item>
      <title>c&#43;&#43;11 function 与bind  学习笔记</title>
      <link>https://111qqz.github.io/2018/07/cpp11-function-bind-notes/</link>
      <pubDate>Thu, 19 Jul 2018 10:46:26 +0000</pubDate>
      
      <guid>https://111qqz.github.io/2018/07/cpp11-function-bind-notes/</guid>
      <description>C++11 std::function 是一种通用、多态的函数封装,它的实例可以对任何可 以调用的目标实体进行存储、复制和调用操作 见下面的例子 /* *********************************************** Author :111qqz mail: renkuanze@sensetime.com Created Time :2018年07月1</description>
    </item>
    
    <item>
      <title>intel tbb 学习笔记</title>
      <link>https://111qqz.github.io/2018/07/intel-tbb-notes/</link>
      <pubDate>Wed, 18 Jul 2018 06:57:38 +0000</pubDate>
      
      <guid>https://111qqz.github.io/2018/07/intel-tbb-notes/</guid>
      <description>tbb是Threading Building Blocks library的缩写,是一个为开发者提供并行解决方案的库. 先放个文档https://www.threading</description>
    </item>
    
    <item>
      <title>C&#43;&#43; 记录代码运行时间</title>
      <link>https://111qqz.github.io/2018/07/record-code-run-time-with-cpp/</link>
      <pubDate>Tue, 10 Jul 2018 02:26:50 +0000</pubDate>
      
      <guid>https://111qqz.github.io/2018/07/record-code-run-time-with-cpp/</guid>
      <description>以前用的办法太老土啦 看到一个since C++11的方法，我觉得比较优雅 #include &amp;lt;iostream&amp;gt; #include &amp;lt;chrono&amp;gt; //#include &amp;lt;ratio&amp;gt; #include &amp;lt;thread&amp;gt; void f() { std::this_thread::sleep_for(std::chrono::seconds(1)); } int main() { auto t1 = std::chrono::high_resolution_clock::now(); f(); auto t2 = std::chrono::high_resolution_clock::now(); // floating-point duration: no duration_cast needed std::chrono::duration&amp;lt;double, std::milli&amp;gt; fp_ms =</description>
    </item>
    
    <item>
      <title>gdb学习笔记</title>
      <link>https://111qqz.github.io/2018/07/gdb-notes/</link>
      <pubDate>Fri, 06 Jul 2018 07:44:38 +0000</pubDate>
      
      <guid>https://111qqz.github.io/2018/07/gdb-notes/</guid>
      <description>用gdb调试c++的时候，需要添加-g编译选项add_compile_options(-g)，并且关掉各种编译优化 如果是多线程程序，可以用i</description>
    </item>
    
    <item>
      <title>Kafka 学习笔记</title>
      <link>https://111qqz.github.io/2018/07/kafka-notes/</link>
      <pubDate>Mon, 02 Jul 2018 08:56:52 +0000</pubDate>
      
      <guid>https://111qqz.github.io/2018/07/kafka-notes/</guid>
      <description>先放资料． kafka简明教程</description>
    </item>
    
    <item>
      <title>linux 下C&#43;&#43; 连接mysql 数据库</title>
      <link>https://111qqz.github.io/2018/07/connect-mysql-with-cpp-under-linux/</link>
      <pubDate>Mon, 02 Jul 2018 07:02:28 +0000</pubDate>
      
      <guid>https://111qqz.github.io/2018/07/connect-mysql-with-cpp-under-linux/</guid>
      <description>资料推荐这个:MySQL C API programming tutorial 环境为ubuntu 14.04 lts 需要安装mysql 和mysql 开发包 sudo apt-get install libmysqlclient15-dev mysql-server mysql-client 先在mysql 中建立test数据库和t</description>
    </item>
    
    <item>
      <title>使用haproxy中转酸酸流量</title>
      <link>https://111qqz.github.io/2018/05/shadowsocks-with-haproxy/</link>
      <pubDate>Tue, 15 May 2018 06:27:35 +0000</pubDate>
      
      <guid>https://111qqz.github.io/2018/05/shadowsocks-with-haproxy/</guid>
      <description>一个国内vps，一个国外vps. 前提是国外vps已经配置好。 接下来，我们在国内vps上安装haproxy yum -y install haproxy 或者 apt-get install haproxy 然后修改配置文件,</description>
    </item>
    
    <item>
      <title>wordpress 开启全站https</title>
      <link>https://111qqz.github.io/2018/05/enable-https-for-wordpress/</link>
      <pubDate>Mon, 14 May 2018 13:08:30 +0000</pubDate>
      
      <guid>https://111qqz.github.io/2018/05/enable-https-for-wordpress/</guid>
      <description>20190511更新: 证书到期了,写一下更换证书的流程. 重新申请好证书之后,直接把Apache里面对应的123放到/data/cert文件夹</description>
    </item>
    
    <item>
      <title>C&#43;&#43; STL Algotithms 学习笔记</title>
      <link>https://111qqz.github.io/2018/05/c-stl-algotithms-notes/</link>
      <pubDate>Sun, 06 May 2018 09:45:50 +0000</pubDate>
      
      <guid>https://111qqz.github.io/2018/05/c-stl-algotithms-notes/</guid>
      <description>迫于拙劣的cpp水平，这次来记录一些关于STL算法部分的内容。 参考内容是CS106L的course reader Iterator Categories Iterators分为以下五种: * Output</description>
    </item>
    
    <item>
      <title>C&#43;&#43; IO Streams 学习笔记</title>
      <link>https://111qqz.github.io/2018/05/cpp-io-streams-notes/</link>
      <pubDate>Fri, 04 May 2018 03:48:37 +0000</pubDate>
      
      <guid>https://111qqz.github.io/2018/05/cpp-io-streams-notes/</guid>
      <description>迫于拙劣的cpp水平，来补补以前忽略掉的cpp细节。 老规矩，先放资料。 参考资料: A Gentle Introduction to C++ IO Streams &#34;Designing and implementing a general input/output facility for a programming language is notoriously difficult&#34; - Bjarne Stroustrup Stream</description>
    </item>
    
    <item>
      <title>vim  插件 NERDTree 学习笔记</title>
      <link>https://111qqz.github.io/2018/04/vim-nerdtree-plugin/</link>
      <pubDate>Mon, 30 Apr 2018 05:54:33 +0000</pubDate>
      
      <guid>https://111qqz.github.io/2018/04/vim-nerdtree-plugin/</guid>
      <description>迫于要在服务器上写cpp代码，又由于各种原因，没办法把同步到本地。因此要在服务器上配置一个cpp的环境orz. 我是用vim-plug来管理插</description>
    </item>
    
    <item>
      <title>gRPC学习笔记</title>
      <link>https://111qqz.github.io/2018/04/grpc-notes/</link>
      <pubDate>Sun, 29 Apr 2018 16:18:47 +0000</pubDate>
      
      <guid>https://111qqz.github.io/2018/04/grpc-notes/</guid>
      <description>gRPC 是 google 最新发布的开源 RPC 框架, 声称是&amp;rdquo;一个高性能，开源，将移动和HTTP/2放在首位的通用的RPC框架.&amp;ldquo;. 技术栈非常</description>
    </item>
    
    <item>
      <title>8102年了，来更新一波vim配置</title>
      <link>https://111qqz.github.io/2018/04/vim-config-in-2018/</link>
      <pubDate>Wed, 25 Apr 2018 16:46:51 +0000</pubDate>
      
      <guid>https://111qqz.github.io/2018/04/vim-config-in-2018/</guid>
      <description>现在用的vim配置还是2015年7月的时候写的。 三年过去了，vim到了8.0,很多功能也有了更多选择。因此打算来更新一波vim配置。目前还在</description>
    </item>
    
    <item>
      <title>protobuf学习笔记</title>
      <link>https://111qqz.github.io/2018/04/protobuf-notes/</link>
      <pubDate>Tue, 24 Apr 2018 03:05:09 +0000</pubDate>
      
      <guid>https://111qqz.github.io/2018/04/protobuf-notes/</guid>
      <description>Protobuff 是一种轻便高效的结构化数据存储格式，可以用于结构化数据序列化。它很适合做数据存储或 RPC 数据交换格式。可用于通讯协议、数据存储等领域的语言无关</description>
    </item>
    
    <item>
      <title>levelDB 学习笔记</title>
      <link>https://111qqz.github.io/2018/04/leveldb-notes/</link>
      <pubDate>Thu, 19 Apr 2018 15:58:40 +0000</pubDate>
      
      <guid>https://111qqz.github.io/2018/04/leveldb-notes/</guid>
      <description>大三的时候看过一点levelDB的源码，不过没有怎么用过。 最近有个需求是存人脸的feature到硬盘，似乎使用levelDB比较合适，因此来</description>
    </item>
    
    <item>
      <title>Eigen: C&#43;&#43;开源矩阵学习笔记</title>
      <link>https://111qqz.github.io/2018/04/eigen-notes/</link>
      <pubDate>Thu, 05 Apr 2018 07:14:54 +0000</pubDate>
      
      <guid>https://111qqz.github.io/2018/04/eigen-notes/</guid>
      <description>接触Eigen的原因是最近在看caffe/caffe2源码,caffe2中使用了Eigen库. Eigen 是一个基于C++模板的线性代数库，直接将库下</description>
    </item>
    
    <item>
      <title>linux/win双系统 更新win后 grub 出现 Error: unknown filesystem 的解决办法</title>
      <link>https://111qqz.github.io/2018/04/the-way-to-fix-unkown-filesystem-error-in-grub/</link>
      <pubDate>Sun, 01 Apr 2018 06:28:30 +0000</pubDate>
      
      <guid>https://111qqz.github.io/2018/04/the-way-to-fix-unkown-filesystem-error-in-grub/</guid>
      <description>windows自己更新把grub更新挂了&amp;hellip;. 更新的时候要重启几次,重启一次挂一次&amp;hellip; 讲真,windows(或者说w</description>
    </item>
    
    <item>
      <title>cmake 学习笔记</title>
      <link>https://111qqz.github.io/2018/03/cmake-notes/</link>
      <pubDate>Sun, 18 Mar 2018 10:27:26 +0000</pubDate>
      
      <guid>https://111qqz.github.io/2018/03/cmake-notes/</guid>
      <description>前置技能点： gnu make linux下.so,.a,.o文件 cmake是一个工具，也可以看成一门语言。 学习cmake最大的障碍在于看不懂全是大写的英文</description>
    </item>
    
    <item>
      <title>mysql 出现　innoDB: Cannot allocate memory for the buffer pool　的解决办法</title>
      <link>https://111qqz.github.io/2018/03/the-way-to-fix-mysql-innodb-cannot-allocate-memory/</link>
      <pubDate>Thu, 15 Mar 2018 04:56:58 +0000</pubDate>
      
      <guid>https://111qqz.github.io/2018/03/the-way-to-fix-mysql-innodb-cannot-allocate-memory/</guid>
      <description>emmm,博客的数据库又挂了。 看了下log，发现innoDB: Cannot allocate memory for the buffer pool 的error 查了下，貌似是内存不够了？ orz 用free 命令看了下，阿</description>
    </item>
    
  </channel>
</rss>