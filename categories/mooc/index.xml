<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>mooc on 111qqz的小窝</title><link>https://111qqz.github.io/categories/mooc/</link><description>Recent content in mooc on 111qqz的小窝</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Sun, 14 Mar 2021 16:05:42 +0800</lastBuildDate><atom:link href="https://111qqz.github.io/categories/mooc/index.xml" rel="self" type="application/rss+xml"/><item><title>[施工完成] CSAPP Malloc lab</title><link>https://111qqz.github.io/2021/04/csapp-malloclab/</link><pubDate>Sun, 14 Mar 2021 16:05:42 +0800</pubDate><guid>https://111qqz.github.io/2021/04/csapp-malloclab/</guid><description>背景 动手实现一个memory allocator,体会core到爆炸的乐趣(不是 trace file 结构分析 trace file 是对allocator的输入的描述，可以从m</description></item><item><title>[施工完成] CSAPP Cachelab</title><link>https://111qqz.github.io/2020/12/csapp-cache-lab/</link><pubDate>Sat, 26 Dec 2020 16:40:42 +0800</pubDate><guid>https://111qqz.github.io/2020/12/csapp-cache-lab/</guid><description>背景 CSAPP:3e 的配套实验 地址 分成了两个部分，第一部分是模拟一下cache的miss,hit,evict的规则。第二部分是优化一个矩阵的转置，使得mi</description></item><item><title>【施工完成】CSAPP archlab</title><link>https://111qqz.github.io/2020/02/csapp-archlab/</link><pubDate>Wed, 26 Feb 2020 22:54:33 +0800</pubDate><guid>https://111qqz.github.io/2020/02/csapp-archlab/</guid><description>背景 CSAPP:3e第四章配套的实验。 第四章是讲处理器架构的，章节的重点是实现一个六阶段流水线。 lab的内容也是，需要实现一个Y86-64的</description></item><item><title>【施工完成】CSAPP attacklab</title><link>https://111qqz.github.io/2020/02/csapp-attacklab/</link><pubDate>Sat, 15 Feb 2020 23:24:23 +0800</pubDate><guid>https://111qqz.github.io/2020/02/csapp-attacklab/</guid><description>背景 CSAPP 处理器那章快看完了，猛然发现竟然还有个attacklab.. 之前以为每一章只有一个lab 这个lab是教大家如何找到程序的漏洞并实施攻击</description></item><item><title>【施工完成】CSAPP bomb lab</title><link>https://111qqz.github.io/2020/02/csapp-bomblab/</link><pubDate>Sat, 01 Feb 2020 19:36:23 +0800</pubDate><guid>https://111qqz.github.io/2020/02/csapp-bomblab/</guid><description>背景 疫情肆虐,在家百无聊赖,于是开始拆炸弹. 炸弹分为6个阶段,每个阶段必须输入一个特定的字符串,否则炸弹就会爆炸. 提供给我们的是一个.c文件</description></item><item><title>The Programming Language Course</title><link>https://111qqz.github.io/2019/10/the-programming-language-course/</link><pubDate>Sat, 19 Oct 2019 19:04:01 +0800</pubDate><guid>https://111qqz.github.io/2019/10/the-programming-language-course/</guid><description>花了三个月的时间,终于跟完了这门编程语言课. 课程内容非常赞,而且也充分发挥了coursera平台的作用. 非要说缺点的话,就是这门课时间有点短</description></item><item><title>【施工中】MIT 6.828 lab 3: User Environments</title><link>https://111qqz.github.io/2019/03/mit-6-828-lab-3-user-environments/</link><pubDate>Sun, 03 Mar 2019 12:45:25 +0000</pubDate><guid>https://111qqz.github.io/2019/03/mit-6-828-lab-3-user-environments/</guid><description>JOS的environments基本可以理解成&amp;quot;process&amp;quot;进程的同义词，但是由于&amp;quot;process&amp;quo</description></item><item><title>【施工完成】CSAPP data lab</title><link>https://111qqz.github.io/2019/02/csapp-data-lab/</link><pubDate>Thu, 28 Feb 2019 14:06:42 +0000</pubDate><guid>https://111qqz.github.io/2019/02/csapp-data-lab/</guid><description>CSAPP第二章的内容以前组成原理基本都学过&amp;hellip;所以就简单翻了翻。 对应的lab是用位运算实现各种有的没的&amp;hellip; 题目基本</description></item><item><title>【施工完毕】MIT 6.828 lab 2: Memory Management</title><link>https://111qqz.github.io/2019/02/mit-6-828-lab-2/</link><pubDate>Thu, 14 Feb 2019 14:01:46 +0000</pubDate><guid>https://111qqz.github.io/2019/02/mit-6-828-lab-2/</guid><description>2019年2月24:完成了除了&amp;quot;Challenge&amp;quot;以外的全部练习和问题. 总共花费15个小时. 2019年2月26:完成&amp;</description></item><item><title>【施工完成】MIT 6.828 lab 1: C, Assembly, Tools and Bootstrapping</title><link>https://111qqz.github.io/2019/01/mit-6-828-lab-1/</link><pubDate>Thu, 24 Jan 2019 12:27:58 +0000</pubDate><guid>https://111qqz.github.io/2019/01/mit-6-828-lab-1/</guid><description>花费了30+小时，终于搞定了orz Part 1: PC Bootstrap The PC's Physical Address Space 8086/8088时代 +------------------+ &amp;lt;- 0x00100000 (1MB) | BIOS ROM | +------------------+ &amp;lt;- 0x000F0000 (960KB) | 16-bit devices, | | expansion ROMs | +------------------+ &amp;lt;- 0x000C0000 (768KB) | VGA Display | +------------------+ &amp;lt;- 0x000A0000 (640KB) |</description></item><item><title>【施工中】MIT 6.828 Operating System Engineering 学习笔记</title><link>https://111qqz.github.io/2019/01/mit-6-828-overview/</link><pubDate>Tue, 15 Jan 2019 16:39:18 +0000</pubDate><guid>https://111qqz.github.io/2019/01/mit-6-828-overview/</guid><description>课程主页 这课稍微有点硬核&amp;hellip;感觉基础稍微有些不扎实就做不下去orz. 网上似乎是有博客写了6.828的学习笔记，不过我更希望自己能</description></item></channel></rss>