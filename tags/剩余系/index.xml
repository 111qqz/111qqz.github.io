<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>剩余系 on 111qqz的小窝</title><link>https://111qqz.com/tags/%E5%89%A9%E4%BD%99%E7%B3%BB/</link><description>Recent content in 剩余系 on 111qqz的小窝</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><copyright>Copyright © 2012-2022 all rights reserved.</copyright><lastBuildDate>Mon, 10 Oct 2016 12:08:41 +0000</lastBuildDate><atom:link href="https://111qqz.com/tags/%E5%89%A9%E4%BD%99%E7%B3%BB/index.xml" rel="self" type="application/rss+xml"/><item><title>二次剩余（Cipolla's algorithm）学习笔记</title><link>https://111qqz.com/2016/10/cipollas-algorithm/</link><pubDate>Mon, 10 Oct 2016 12:08:41 +0000</pubDate><guid>https://111qqz.com/2016/10/cipollas-algorithm/</guid><description>
先放资料。
前置技能点： 剩余系
剩余系**:设模为m,则根据余数可将所有的整数分成m类，分别记成[0],[1],[2],…[m-1]****，**
这m个数**{0,1,2,****…****m-1}**称为一个完全剩余系，
每个数称为相应类的代表元。
当m=10（偶数）时候，则{0,1,2,3,4,5,6,7,8,9}是最小非负完全剩余系
{-5,-4,-3,-2,-1,0,1,2,3,4,5} 是绝对值最小完全剩余系
{-4,-3,-2,-1,0,1,2,3,4,5} 绝对值最小
{1,2,3,4,5,6,7,8,9,10}是最小正完全剩余系
简化剩余系:在每个剩余类选取至1个与m互素代表元构成简化剩余系。
当m=10则,{0,1,2,3,4,5,6,7,8,9} 完全剩余系
{1,3,7,9}是简化剩余系(x,10)=1
当m=5则，{0,1,2,3,4}为完全剩余系,
{1,2,3,4}是简化剩余系，因为除去余0(正好是倍数)外，其它都互素。
f(m)=欧拉函数=|{t|0&amp;lt;t&amp;lt;m, (t, m)=1}|
=简化剩余系的元素个数
维基百科_高斯引理
设_p_为奇[质数](https://zh.wikipedia.org/wiki/)，_a_是一个与_p_[互质](https://zh.wikipedia.org/wiki/)的整数。考虑以下数组：![{\displaystyle a,2a,3a,\dots ,{\frac {p-1}{2}}a}](https://wikimedia.org/api/rest_v1/media/math/render/svg/82941c63fd5e49cf0b57612ee5e895d1e1c9096c) 以及它们对_p_的[最小非负剩余](https://zh.wikipedia.org/w/index.php?title=&amp;action=edit&amp;redlink=1)。这些剩余两两不等（**kk:这些剩余两两不等的证明：可以考虑反证，假设两个不同的数x,y对于p同余， 那么x-y和0关于p同余，而x-y同时关于a同余，a与p互质，矛盾。因此这些剩余两两不等**），因此我们共有![\frac{p-1}{2}](https://wikimedia.org/api/rest_v1/media/math/render/svg/a733b8495b0d55ed5bc9d795b7b6821efb1d858b) 个两两不等的介于1和_p（_**kk:这里似乎有问题，如果剩余是在1..p之间，那么前面应该是说最小正剩余而不是最小非负剩余，最小非负剩余应该是在0..p-1之间**_）_之间的整数：![{\displaystyle t_{1},t_{2},t_{3},\dots ,t_{\frac {p-1}{2}}}](https://wikimedia.</description></item><item><title>poj 2356 Find a multiple (剩余类，抽屉原理)</title><link>https://111qqz.com/2016/02/poj2356/</link><pubDate>Mon, 29 Feb 2016 13:06:00 +0000</pubDate><guid>https://111qqz.com/2016/02/poj2356/</guid><description>
http://poj.org/problem?id=2356
题意：有n个数，从中选取若干个（1..n），和能被n整除。问是否有解，无解输出0，有解的话，输出个数以及选择的ai
由抽屉原理可知一定有解： 做一个带模的前缀和 sum[i]=(sum[i-1]+a[i])%n n个数，sum[i]最多有n种。 如果某个sum[i]为0，那么表示从1到i的和能被n整除。 如果所有的sum[i]不为0，那么一共有n个sum[i]，n-1个值（1..n-1），一定有sum[i]==sumj 那么a[i]到a[j]的和一定能被n整除。
/************************************************************************* &amp;gt; File Name: code/poj/2356.cpp &amp;gt; Author: 111qqz &amp;gt; Email: rkz2013@126.com &amp;gt; Created Time: 2015年08月21日 星期五 13时43分41秒 ************************************************************************/ #include&amp;lt;iostream&amp;gt; #include&amp;lt;iomanip&amp;gt; #include&amp;lt;cstdio&amp;gt; #include&amp;lt;algorithm&amp;gt; #include&amp;lt;cmath&amp;gt; #include&amp;lt;cstring&amp;gt; #include&amp;lt;string&amp;gt; #include&amp;lt;map&amp;gt; #include&amp;lt;set&amp;gt; #include&amp;lt;queue&amp;gt; #include&amp;lt;vector&amp;gt; #include&amp;lt;stack&amp;gt; #define y0 abc111qqz #define y1 hust111qqz #define yn hez111qqz #define j1 cute111qqz #define tm crazy111qqz #define lr dying111qqz using namespace std; #define REP(i, n) for (int i=0;i&amp;lt;int(n);++i) typedef long long LL; typedef unsigned long long ULL; const int inf = 0x3f3f3f3f; const int N=2E4+7; int a[N]; int sum[N]; int n; int p[N]; int main() { scanf(&amp;quot;%d&amp;quot;,&amp;amp;n); sum[0]= 0; for ( int i = 1 ; i &amp;lt;= n ; i++){ scanf(&amp;quot;%d&amp;quot;,&amp;amp;a[i]); sum[i] = (sum[i-1] + a[i])%n; } memset(p,0,sizeof(p)); for ( int i = 1 ; i &amp;lt;= n ; i++){ if (sum[i]==0){ printf(&amp;quot;%d\n&amp;quot;,i); for ( int j = 1 ; j &amp;lt;= i ; j++){ printf(&amp;quot;%d\n&amp;quot;,j); } break; } if (p[sum[i]]){ // cout&amp;lt;&amp;lt;&amp;quot;111qqz&amp;quot;&amp;lt;&amp;lt;endl; printf(&amp;quot;%d\n&amp;quot;,i-p[sum[i]]); for ( int j = p[sum[i]]+1 ; j &amp;lt;= i ; j++){ printf(&amp;quot;%d\n&amp;quot;,j); } break; } p[sum[i]] = i; } return 0; }</description></item><item><title>poj 3370 Halloween treats (剩余类,抽屉原理)</title><link>https://111qqz.com/2015/08/poj3370halloweentreats/</link><pubDate>Fri, 21 Aug 2015 05:36:00 +0000</pubDate><guid>https://111qqz.com/2015/08/poj3370halloweentreats/</guid><description>
昨天那道签到的数学题没搞出来不开心.
是时候刷一波数学了
这题题意是说,从n个数中任选m个,使得m个的和为c的倍数.
如果有解,输出选的数的下标,否则输出无解字符串.
抽屉原理的原始描述是,如果有n+1个物品,有n个抽屉,那么至少有一个抽屉有2个物品.
由抽屉原理我们可以退出一个结论,对于任意 n个自然数,一定有连续的一段和为n的倍数.
证明如下:
　设这n个自然数分别为a1,a2,a3,a4....an
　处理一个前缀和sum[i] = (sum[i-1] + a[i])%n
　因为n的剩余类有n种,分别为0,1,2...n-1
　所以sum[1],sum[2],sum[3]..sum[n]
　那么sum[1],sum[2],sum[3]...sum[n]最多也有n种.
　我们分情况讨论:
　(1)sum[1],sum[2],sum[3]...sum[n]互不相同,那么一定存在sum[i]=0,也就是前i个数的和为n的倍数.
　(2)情况(1)的反面,也就是存在sum[i]==sum[j] (i&amp;lt;j),那么 从a[i+1] 到 a[j]的和就是n的倍数.
因为题目中的数据 c&amp;lt;=n ,所以解一定存在.
具体做法就是处理出来一个前缀和%c
然后如果有0,则为解,输出.
否则记录sum[i]%d出现的位置,存在一个数组里
如果sum[i]%d第二次出现,就输出这段下标.
嘛,大括号换风格了....
都写开代码太长了==
/************************************************************************* &amp;gt; File Name: code/poj/3370.cpp &amp;gt; Author: 111qqz &amp;gt; Email: rkz2013@126.com &amp;gt; Created Time: 2015年08月21日 星期五 13时06分34秒 ************************************************************************/ #include&amp;lt;iostream&amp;gt; #include&amp;lt;iomanip&amp;gt; #include&amp;lt;cstdio&amp;gt; #include&amp;lt;algorithm&amp;gt; #include&amp;lt;cmath&amp;gt; #include&amp;lt;cstring&amp;gt; #include&amp;lt;string&amp;gt; #include&amp;lt;map&amp;gt; #include&amp;lt;set&amp;gt; #include&amp;lt;queue&amp;gt; #include&amp;lt;vector&amp;gt; #include&amp;lt;stack&amp;gt; #define y0 abc111qqz #define y1 hust111qqz #define yn hez111qqz #define j1 cute111qqz #define tm crazy111qqz #define lr dying111qqz using namespace std; #define REP(i, n) for (int i=0;i&amp;lt;int(n);++i) typedef long long LL; typedef unsigned long long ULL; const int inf = 0x3f3f3f3f; const int N=1E5+7; int a[N]; LL sum[N]; int p[N]; int n,c; int main() { while (~scanf(&amp;quot;%d %d&amp;quot;,&amp;amp;c,&amp;amp;n)){ if (c==0&amp;amp;&amp;amp;n==0) break; sum[0] = 0; for ( int i = 1 ; i &amp;lt;= n ;i++){ scanf(&amp;quot;%d&amp;quot;,&amp;amp;a[i]); a[i] = a[i] % c; sum[i] = (sum[i-1] + a[i])%c; } memset(p,0,sizeof(p)); for ( int i = 1 ; i &amp;lt;= n ; i++ ){ if (sum[i]==0){ for ( int j = 1 ; j &amp;lt;= i ; j++){ cout&amp;lt;&amp;lt;j&amp;lt;&amp;lt;&amp;quot; &amp;quot;; // cout&amp;lt;&amp;lt;&amp;quot;wang wang wang !</description></item></channel></rss>