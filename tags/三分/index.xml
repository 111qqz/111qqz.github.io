<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>三分 on 111qqz的小窝</title><link>https://111qqz.com/tags/%E4%B8%89%E5%88%86/</link><description>Recent content in 三分 on 111qqz的小窝</description><generator>Hugo -- gohugo.io</generator><language>en</language><copyright>Copyright © 2012-2022 all rights reserved.</copyright><lastBuildDate>Sat, 14 Oct 2017 16:54:24 +0000</lastBuildDate><atom:link href="https://111qqz.com/tags/%E4%B8%89%E5%88%86/index.xml" rel="self" type="application/rss+xml"/><item><title>poj 3301 Texas Trip (三分，模板题)</title><link>https://111qqz.com/2017/10/poj-3301/</link><pubDate>Sat, 14 Oct 2017 16:54:24 +0000</pubDate><guid>https://111qqz.com/2017/10/poj-3301/</guid><description>
题目链接
题意： 给定二维平面的n个点，要求一个面积最小的正方形，使其能覆盖所有的点。
思路： 先考虑如果水平竖直地放置正方形（边和坐标轴平行）圈住所有点的最小正方形的边长是:
L=max(xmax−xmin,ymax−ymin)
然后考虑如果正方形旋转的话，能圈住所有点的正方形边长是随着角度先减后增的，有凸性，可以三分。。。
但是枚举角度计算正方形的话比较麻烦，可以选择旋转平面上的点，使得正方形仍然是水平竖直放置的，因为这样计算正方形的边长比较方便。 如果把点表示成极坐标形式:
x=r×cosθ,y=r×sinθ,，θ是极角
那么顺时针旋转 α 角度后：
x′=r×cos(θ−α),y=r×sin(θ−α)
化简一下可得：
x′=r×cosθ×cosα+r×sinθ×sinα=x×cosα+y×sinα
y′=r×sinθ×cosα−r×cosθ×sinα=y×cosα−x×sinα
然后就是三分角度了。。。
三分的板子:
double sanfen(double l,double r) { double mid,midmid; while (r-l&amp;gt;eps) { mid = (2*l+r)/3; midmid = (l+2*r)/3; if (cal(mid)&amp;gt;=cal(midmid)) l = mid; //此处为求极小值 else r = midmid; } return cal(l); } /* *********************************************** Author :111qqz Created Time :2017年10月15日 星期日 00时33分09秒 File Name :3301.</description></item><item><title>hdu 5531 | 2015 ICPC 长春 regional onsite Rebuild (三分)</title><link>https://111qqz.com/2017/10/hdu-5531/</link><pubDate>Sat, 14 Oct 2017 15:55:31 +0000</pubDate><guid>https://111qqz.com/2017/10/hdu-5531/</guid><description>
题目链接
题意： 有n个点，表示n个圆的圆心，问一组圆的半径，满足相邻(i,i+1)或者(n,1) 圆相外切。
思路： 我们发现确定第一个半径之后，其他的圆的半径似乎能解出来？
然后发现，其实只有n为奇数的时候能解出来，n为偶数不行。
那么我们可以奇数偶数分别处理。
对于奇数，直接解出来。式子不写了，很好推。
对于偶数，我们发现，最后会是一个关于r1的二次表达式。
一眼三分。然后训练的时候我就直接三分了。。？？？
三分的过程中判断一下是否所有圆的半径都满足实际意义。。。
然而这是错得，而且错得很显然。因为。。如果不满足实际意义，是根本没办法判断，该往哪个方向继续三分的。
然而这是错得，而且错得很显然。因为。。如果不满足实际意义，是根本没办法判断，该往哪个方向继续三分的。
然而这是错得，而且错得很显然。因为。。如果不满足实际意义，是根本没办法判断，该往哪个方向继续三分的。
正确的做法是，三分之前一定先确定定义域范围，在定义域内三分。
正确的做法是，三分之前一定先确定定义域范围，在定义域内三分。
正确的做法是，三分之前一定先确定定义域范围，在定义域内三分。
所以我们先解一个不等式组，把三分的范围解出来之后再进行三分orz
我对三分一无所知...
/* *********************************************** Author :111qqz Created Time :2017年10月14日 星期六 16时08分51秒 File Name :E.cpp ************************************************ */ #include &amp;lt;cstdio&amp;gt; #include &amp;lt;cstring&amp;gt; #include &amp;lt;iostream&amp;gt; #include &amp;lt;algorithm&amp;gt; #include &amp;lt;vector&amp;gt; #include &amp;lt;queue&amp;gt; #include &amp;lt;set&amp;gt; #include &amp;lt;map&amp;gt; #include &amp;lt;string&amp;gt; #include &amp;lt;cmath&amp;gt; #include &amp;lt;cstdlib&amp;gt; #include &amp;lt;ctime&amp;gt; #define PB push_back #define fst first #define sec second #define lson l,m,rt&amp;lt;&amp;lt;1 #define rson m+1,r,rt&amp;lt;&amp;lt;1|1 #define ms(a,x) memset(a,x,sizeof(a)) typedef long long LL; #define pi pair &amp;lt; int ,int &amp;gt; #define MP make_pair using namespace std; const double eps = 1E-10; const int dx4[4]={1,0,0,-1}; const int dy4[4]={0,-1,1,0}; const int inf = 0x3f3f3f3f; const int N=1E4+7; const double PI = acos(-1.</description></item></channel></rss>