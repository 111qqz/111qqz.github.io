<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>组合数学 on Clarity</title><link>https://111qqz.com/tags/%E7%BB%84%E5%90%88%E6%95%B0%E5%AD%A6/</link><description>Recent content in 组合数学 on Clarity</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><copyright>Copyright © 2008–2018, Steve Francia and the Hugo Authors; all rights reserved.</copyright><lastBuildDate>Wed, 25 Oct 2017 06:31:02 +0000</lastBuildDate><atom:link href="https://111qqz.com/tags/%E7%BB%84%E5%90%88%E6%95%B0%E5%AD%A6/index.xml" rel="self" type="application/rss+xml"/><item><title>codeforces 439 C - The Intriguing Obsession (和图有关的计数，组合数学)</title><link>https://111qqz.com/2017/10/codeforces-439-c/</link><pubDate>Wed, 25 Oct 2017 06:31:02 +0000</pubDate><guid>https://111qqz.com/2017/10/codeforces-439-c/</guid><description>
题意： 3个岛屿群，每个岛屿群有若干岛屿。现在要在岛屿之间连桥，桥的长度是1，规定2个属于相同岛屿群的岛屿的距离要大于等于3.
思路： 一直在纠结大于等于3的距离的事情。。。其实这句话等价于，同一个岛屿，对于另外两个岛屿群，都最多只能连接1个岛屿。
那么其实，对于每一对岛屿群，是相互独立的。
对于任意一对岛屿群，设两边岛屿的数量分别为a,b
我们可以从两边各取0个，1个，最多取min(a,b)
需要注意的是，选取了端点之后有顺序的区别。
所以对于该对岛屿，答案是SUM{C[a][k] * C[b][k] * k!} (k属于0..min(a,b) )
对于其他 两对同理。
/* *********************************************** Author :111qqz Created Time :2017年10月25日 星期三 13时55分25秒 File Name :C.cpp ************************************************ */ #include &amp;lt;cstdio&amp;gt; #include &amp;lt;cstring&amp;gt; #include &amp;lt;iostream&amp;gt; #include &amp;lt;algorithm&amp;gt; #include &amp;lt;vector&amp;gt; #include &amp;lt;queue&amp;gt; #include &amp;lt;set&amp;gt; #include &amp;lt;map&amp;gt; #include &amp;lt;string&amp;gt; #include &amp;lt;cmath&amp;gt; #include &amp;lt;cstdlib&amp;gt; #include &amp;lt;ctime&amp;gt; #define PB push_back #define fst first #define sec second #define lson l,m,rt&amp;lt;&amp;lt;1 #define rson m+1,r,rt&amp;lt;&amp;lt;1|1 #define ms(a,x) memset(a,x,sizeof(a)) typedef long long LL; #define pi pair &amp;lt; int ,int &amp;gt; #define MP make_pair using namespace std; const double eps = 1E-8; const int dx4[4]={1,0,0,-1}; const int dy4[4]={0,-1,1,0}; const int inf = 0x3f3f3f3f; const LL mod = 998244353; const int N=5005; LL C[N][N]; LL fac[N]; void init() { C[1][0] = C[1][1] = 1; C[2][0] = C[2][2] = 1; C[2][1] = 2; for ( int i = 3 ; i &amp;lt; N ; i++) { for ( int j = 0 ; j &amp;lt;= i ; j++) { if (j==0) C[i][j] = 1; else C[i][j] = (C[i-1][j] + C[i-1][j-1])%mod; } } fac[0] = fac[1] = 1; for ( int i = 2 ; i &amp;lt; N ; i++) fac[i] = (fac[i-1] * i)%mod; } int a,b,c; LL ans = 1; int main() { #ifndef ONLINE_JUDGE freopen(&amp;quot;.</description></item><item><title>bzoj 1008: [HNOI2008]越狱(对立事件，组合数学)</title><link>https://111qqz.com/2016/11/bzoj-1008-hnoi2008/</link><pubDate>Mon, 28 Nov 2016 08:31:10 +0000</pubDate><guid>https://111qqz.com/2016/11/bzoj-1008-hnoi2008/</guid><description>
1008: [HNOI2008]越狱 Time Limit: 1 Sec Memory Limit: 162 MB Submit: 8165 Solved: 3486 [Submit][Status][Discuss]
Description 　监狱有连续编号为1...N的N个房间，每个房间关押一个犯人，有M种宗教，每个犯人可能信仰其中一种。如果 相邻房间的犯人的宗教相同，就可能发生越狱，求有多少种状态可能发生越狱
Input 　输入两个整数M，N.1&amp;lt;=M&amp;lt;=10^8,1&amp;lt;=N&amp;lt;=10^12
Output 　可能越狱的状态数，模100003取余
Sample Input 2 3
Sample Output 6
HINT 　6种状态为(000)(001)(011)(100)(110)(111)
思路：越狱的情况很多，考虑不越狱的情况。
答案为：m^n - m*(m-1)^(n-1)
/* *********************************************** Author :111qqz Created Time :2016年11月28日 星期一 16时23分38秒 File Name :code/bzoj/1008.cpp ************************************************ */ #include &amp;lt;cstdio&amp;gt; #include &amp;lt;cstring&amp;gt; #include &amp;lt;iostream&amp;gt; #include &amp;lt;algorithm&amp;gt; #include &amp;lt;vector&amp;gt; #include &amp;lt;queue&amp;gt; #include &amp;lt;set&amp;gt; #include &amp;lt;map&amp;gt; #include &amp;lt;string&amp;gt; #include &amp;lt;cmath&amp;gt; #include &amp;lt;cstdlib&amp;gt; #include &amp;lt;ctime&amp;gt; #define fst first #define sec second #define lson l,m,rt&amp;lt;&amp;lt;1 #define rson m+1,r,rt&amp;lt;&amp;lt;1|1 #define ms(a,x) memset(a,x,sizeof(a)) typedef long long LL; #define pi pair &amp;lt; int ,int &amp;gt; #define MP make_pair using namespace std; const double eps = 1E-8; const int dx4[4]={1,0,0,-1}; const int dy4[4]={0,-1,1,0}; const int inf = 0x3f3f3f3f; const LL mod =100003; LL ksm( LL a,LL b,LL k) { LL res = 1; while (b&amp;gt;0) { if (b&amp;amp;1) res = (res * a)%k; b = b &amp;gt;&amp;gt; 1LL; a = (a*a)%k; } return res; } LL n,m; int main() { #ifndef ONLINE_JUDGE freopen(&amp;quot;code/in.</description></item><item><title>hdu 4451 Dressing (计数，思维题)</title><link>https://111qqz.com/2016/03/hdu4451/</link><pubDate>Thu, 03 Mar 2016 12:26:59 +0000</pubDate><guid>https://111qqz.com/2016/03/hdu4451/</guid><description>
http://acm.hdu.edu.cn/showproblem.php?pid=4451 题意：N clothes, M pants and K shoes，然后给出p个不合法的搭配，形式是“clothes x pants y” or “pants y shoes z”.” 问有多少种合法的方案。 思路：一开始觉得是容斥。。当然可以。。但是实际上，不合法的搭配的形式比较简单，每种不合法的发配都是两个两个的不合法，以及每种不合法的形式都有pants,那么我们就可以通过先确定pants，对于每种pants，方案数就是能和当前pants搭配的clothes数，乘以能和当前pants搭配的shoes数，然后累加每种pants的答案即可。
/* *********************************************** Author :111qqz Created Time :2016年03月03日 星期四 20时09分47秒 File Name :code/hdu/4451.cpp ************************************************ */ #include &amp;lt;cstdio&amp;gt; #include &amp;lt;cstring&amp;gt; #include &amp;lt;iostream&amp;gt; #include &amp;lt;algorithm&amp;gt; #include &amp;lt;vector&amp;gt; #include &amp;lt;queue&amp;gt; #include &amp;lt;set&amp;gt; #include &amp;lt;map&amp;gt; #include &amp;lt;string&amp;gt; #include &amp;lt;cmath&amp;gt; #include &amp;lt;cstdlib&amp;gt; #include &amp;lt;ctime&amp;gt; #define fst first #define sec second #define lson l,m,rt&amp;lt;&amp;lt;1 #define rson m+1,r,rt&amp;lt;&amp;lt;1|1 #define ms(a,x) memset(a,x,sizeof(a)) typedef long long LL; #define pi pair &amp;lt; int ,int &amp;gt; #define MP make_pair using namespace std; const double eps = 1E-8; const int dx4[4]={1,0,0,-1}; const int dy4[4]={0,-1,1,0}; const int inf = 0x3f3f3f3f; const int N=2E6+7; int n,m,k; int p; int a[N]; int clo[N]; int sho[N]; int main() { #ifndef ONLINE_JUDGE freopen(&amp;quot;code/in.</description></item><item><title>poj 1322 chocolate (指数型母函数 )</title><link>https://111qqz.com/2016/03/poj1322chocolate/</link><pubDate>Wed, 02 Mar 2016 11:53:41 +0000</pubDate><guid>https://111qqz.com/2016/03/poj1322chocolate/</guid><description>
http://poj.org/problem?id=1322 题意：
Image not found a.warning-link { color: inherit !important; font-weight: inherit !important; text-decoration: underline !important; border-bottom: none !important; } Web path: http://images.cnitblog.com/blog/361759/201312/03210928-5c2c6f7484cc418e85b498c4d70d860b.jpg
Disk path: /static/http://images.cnitblog.com/blog/361759/201312/03210928-5c2c6f7484cc418e85b498c4d70d860b.jpg
Using Page Bundles: false
思路：别看n,m很大。。。但是想一下。。m显然不可能大于c(如果大于c，那么根据抽屉原理，至少存在一种巧克力大于一个，然而大于一个就会被取走...矛盾) 这样概率为0.m也不可能大于n，因为最好的情况就是取出的巧克力都放在了桌子上，如果总共取的还不到n个，又怎么可能剩下m（m&amp;gt;n）个呢。此外，还需要n,m奇偶性相同，否则设n-m=2K+1 ,说明如果要剩余m个，那么就要减少2k+1个，但是巧克力是两个两个减少的，减少的个数一定是偶数，因此矛盾。所以n,m奇偶性相同。
接下来可以用概率dp做，由于n比较大，滚动一下应该可以... 然后看到别人的题解里写到当n&amp;gt;1000的时候已经趋向平衡（达到了要求的精度）... 这道题dp写起来的确容易，也不是很难想。
不过作为dp废宁愿选择数学方法，指数型母函数。
分析可知，取过偶数次的巧克力消失，只有取过奇数次的巧克力会留在桌子上。
那么要剩余m个巧克力，也就是有m种巧克力取了奇数次，剩下的c-m种巧克力取了偶数次。
对应的的生成函数（母函数）分别是(e^x-e(-x))/2和（e^x+e(-x)）/2 （推倒类似）hdu2065红色病毒解题报告
总事件个数为c^n
根据古典概型，所求概率为 (Gn*n!C[c][m])/(c^n) 其中Gnn!为生成函数，C[c][m]是因为不确定c种巧克力中的哪m种取了奇数个。
现在的问题就成了求Gn中x^n的系数。。我就是因为这个卡了两天这道题。。。
其实模拟就好，复杂度O(c^2)而已。。主要是好久没写二项式定理。。。有点忘了（手动智力-2）
/* *********************************************** Author :111qqz Created Time :2016年03月02日 星期三 18时57分58秒 File Name :code/poj/1322.cpp ************************************************ */ #include &amp;lt;cstdio&amp;gt; #include &amp;lt;cstring&amp;gt; #include &amp;lt;iostream&amp;gt; #include &amp;lt;algorithm&amp;gt; #include &amp;lt;vector&amp;gt; #include &amp;lt;queue&amp;gt; #include &amp;lt;set&amp;gt; #include &amp;lt;map&amp;gt; #include &amp;lt;string&amp;gt; #include &amp;lt;cmath&amp;gt; #include &amp;lt;cstdlib&amp;gt; #include &amp;lt;ctime&amp;gt; #define fst first #define sec second #define lson l,m,rt&amp;lt;&amp;lt;1 #define rson m+1,r,rt&amp;lt;&amp;lt;1|1 #define ms(a,x) memset(a,x,sizeof(a)) typedef long long LL; #define pi pair &amp;lt; int ,int &amp;gt; #define MP make_pair using namespace std; const double eps = 1E-8; const int dx4[4]={1,0,0,-1}; const int dy4[4]={0,-1,1,0}; const int inf = 0x3f3f3f3f; const int N=105; double c[N][N]; int C,n,m; void pre() { c[0][0] = 1; for ( int i = 1 ; i &amp;lt; N ; i++) { c[i][0]=c[i][i] = 1; for ( int j = 1 ; j &amp;lt; i ; j++) c[i][j]=c[i-1][j-1]+c[i-1][j]; } } double ksm( double a,int b) { double res = 1.</description></item><item><title>hdu 1028 Ignatius and the Princess III（整数拆分，母函数模板题）</title><link>https://111qqz.com/2016/02/hdu1028/</link><pubDate>Thu, 25 Feb 2016 14:13:47 +0000</pubDate><guid>https://111qqz.com/2016/02/hdu1028/</guid><description>
http://acm.hdu.edu.cn/showproblem.php?pid=1028 题意：求整数拆分数。 思路：母函数模板题。关于母函数的学习：http://www.cnblogs.com/syxchina/archive/2011/07/07/2197205.html http://www.cppblog.com/tanky-woo/archive/2010/08/02/121969.html
具体解释见代码注释。
/* *********************************************** Author :111qqz Created Time :2016年02月25日 星期四 21时53分43秒 File Name :code/hdu/1028.cpp ************************************************ */ #include &amp;lt;cstdio&amp;gt; #include &amp;lt;cstring&amp;gt; #include &amp;lt;iostream&amp;gt; #include &amp;lt;algorithm&amp;gt; #include &amp;lt;vector&amp;gt; #include &amp;lt;queue&amp;gt; #include &amp;lt;set&amp;gt; #include &amp;lt;map&amp;gt; #include &amp;lt;string&amp;gt; #include &amp;lt;cmath&amp;gt; #include &amp;lt;cstdlib&amp;gt; #include &amp;lt;ctime&amp;gt; #define fst first #define sec second #define lson l,m,rt&amp;lt;&amp;lt;1 #define rson m+1,r,rt&amp;lt;&amp;lt;1|1 #define ms(a,x) memset(a,x,sizeof(a)) typedef long long LL; #define pi pair &amp;lt; int ,int &amp;gt; #define MP make_pair using namespace std; const double eps = 1E-8; const int dx4[4]={1,0,0,-1}; const int dy4[4]={0,-1,1,0}; const int inf = 0x3f3f3f3f; const int N=125; int n; int a[N],tmp[N]; //a[i]表示每两个表达式运算时候的前一个表达式的x^i的系数，以及最后的表达式的x^i的系数 //tmp[i]是每次运算临时存储指数用 int main() { #ifndef ONLINE_JUDGE freopen(&amp;quot;code/in.</description></item><item><title>hdu 5145 NPY and girls</title><link>https://111qqz.com/2016/02/hdu5145/</link><pubDate>Wed, 17 Feb 2016 07:34:05 +0000</pubDate><guid>https://111qqz.com/2016/02/hdu5145/</guid><description>
http://acm.hdu.edu.cn/showproblem.php?pid=5145 题意：有n个女孩，编号1..n,第i个女孩在第a[i]个教室,m次访问，每次访问编号[L,R]的女孩，处于同一个教室的女孩一次只能访问一个，问有多少种访问方案。两个不同的方案当且仅当访问的顺序有所不同。
思路：正好刚刚听完学堂在线上的组合数学的那一节，讲到有重复元素的不重复排列的个数的计算方法：可以先将所有元素看成不重复，再除以每个元素的重复度的阶乘（重复度定义为每个元素个数）。 增加一个元素的影响是，乘一个增加的长度，并且除以该元素的重复度（因为每增加一个元素就要除以以此重复度，那么当同一元素c增加到第i次时，除以的就是i的阶乘），减少一个元素的影响正相反。 两种改变都可以O(1)实现，因此可以上莫队。 之前要预处理下逆元。
/* *********************************************** Author :111qqz Created Time :2016年02月17日 星期三 14时20分01秒 File Name :code/hdu/5145.cpp ************************************************ */ #include &amp;lt;cstdio&amp;gt; #include &amp;lt;cstring&amp;gt; #include &amp;lt;iostream&amp;gt; #include &amp;lt;algorithm&amp;gt; #include &amp;lt;vector&amp;gt; #include &amp;lt;queue&amp;gt; #include &amp;lt;set&amp;gt; #include &amp;lt;map&amp;gt; #include &amp;lt;string&amp;gt; #include &amp;lt;cmath&amp;gt; #include &amp;lt;cstdlib&amp;gt; #include &amp;lt;ctime&amp;gt; #define fst first #define sec second #define lson l,m,rt&amp;lt;&amp;lt;1 #define rson m+1,r,rt&amp;lt;&amp;lt;1|1 #define ms(a,x) memset(a,x,sizeof(a)) typedef long long LL; #define pi pair &amp;lt; int ,int &amp;gt; #define MP make_pair using namespace std; const double eps = 1E-8; const int dx4[4]={1,0,0,-1}; const int dy4[4]={0,-1,1,0}; const int inf = 0x3f3f3f3f; const int N=3E5+7; const int MOD =1E9+7; int n,m; int a[N]; int pos[N]; LL ny[N]; LL p; LL num; int ans[N]; int cnt[N]; struct node { int l,r; int id; bool operator &amp;lt;(node b)const { if (pos[l]==pos[b.</description></item><item><title>codeforces #334 div 2 D.Moodular Arithmetic</title><link>https://111qqz.com/2015/12/cf604d/</link><pubDate>Tue, 22 Dec 2015 05:09:32 +0000</pubDate><guid>https://111qqz.com/2015/12/cf604d/</guid><description>
http://codeforces.com/contest/604/problem/D 题意：一个恒等式 f(kx%p)=kf(x)%p ,k,p为常数，且满足x对于定义域为0..p-1的p的整数，值域也在0..p-1范围（不一定一一对应）。问满足题意的f有多少个。 思路： f(0)=0,对于其他的值，当f（x）确定时，f（kx%p）也随之确定，那么把kx%p看做新的x,f（kkx%p）也随之确定...相当于【1，p-1】被分为r个小环，确定每个环可以任选一个数字，ans=p^r。环的个数可以用dfs跑一遍得到r. 注意当k=1的时候是特殊情况，f(x)恒等于f(x)那么答案应该有p的p次方种。因为对于p个f(0..p-1)，每一个都可以任意取p种值。
/* *********************************************** Author :111qqz Created Time :2015年12月22日 星期二 12时31分09秒 File Name :code/cf/#334/D.cpp ************************************************ */ #include &amp;lt;cstdio&amp;gt; #include &amp;lt;cstring&amp;gt; #include &amp;lt;iostream&amp;gt; #include &amp;lt;algorithm&amp;gt; #include &amp;lt;vector&amp;gt; #include &amp;lt;queue&amp;gt; #include &amp;lt;set&amp;gt; #include &amp;lt;map&amp;gt; #include &amp;lt;string&amp;gt; #include &amp;lt;cmath&amp;gt; #include &amp;lt;cstdlib&amp;gt; #include &amp;lt;ctime&amp;gt; #define fst first #define sec second #define lson l,m,rt&amp;lt;&amp;lt;1 #define rson m+1,r,rt&amp;lt;&amp;lt;1|1 #define ms(a,x) memset(a,x,sizeof(a)) typedef long long LL; #define pi pair &amp;lt; int ,int &amp;gt; #define MP make_pair using namespace std; const double eps = 1E-8; const int dx4[4]={1,0,0,-1}; const int dy4[4]={0,-1,1,0}; const int inf = 0x3f3f3f3f; const int MOD =1E9+7; const int N=1E6+7; LL p,k; LL ans; bool v[N]; void dfs( int x) { // cout&amp;lt;&amp;lt;&amp;quot;x:&amp;quot;&amp;lt;&amp;lt;x&amp;lt;&amp;lt;endl; v[x] = true; int y = (k*x)%p; if (!</description></item><item><title>HUST team contest #2 C Divisible Subsequences ||poj 3844 (剩余类)</title><link>https://111qqz.com/2015/08/poj3844/</link><pubDate>Thu, 20 Aug 2015 17:11:00 +0000</pubDate><guid>https://111qqz.com/2015/08/poj3844/</guid><description>
算是签到帖，竟然卡住了。
我数学还是太差了。。
然后去找题解。。竟然看不懂！
我数学真的有这么差嘛。。。
然后多亏了队友 @zcy 妹子的讲解。。
其实很好理解啊。。。
不过数到底还是数学太差了==
今天七夕，废话有点多==
这道题的题意是，找序列中连续的一段，使得和 可以整除d
我们观察到数列中的数的范围是1..1 000 000 000 的
而d只有1 000 000
我们考虑余数相同，读入的时候就可以直接先 % 掉 d
因为只会和余数有关。
我们可以先处理出来一个前缀和数组sum[i]，表示前i个元素的和。
如果有一段序列从a[i] 到 a[j] 满足题意
根据题意那么这段序列的和一定%d=0
a[i] 到 a[j]的和为 sum[j]-sum[i-1]
也就是(sum[j]-sum[i-1] )%d==0
也就是sum[j] 和 sum[i-1] 关于 d 同余
如果我们在处理得到前缀和的时候就%dshuxue
那么就是sum[j]==sum[i-1]
所以我只要对于d的每一个剩余类有多少个统计出来。
然后对于每个剩余类，只需要任意取出两个，就是一种答案。
需要注意的是如果只有一个0，也是一种答案。
我们可以定义sum[i] = 0
还有一个需要注意的是要开long long
/* *********************************************** Author :111qqz Created Time :2016年02月29日 星期一 21时20分01秒 File Name :code/poj/3844.cpp ************************************************ */ #include&amp;lt;iostream&amp;gt; #include&amp;lt;iomanip&amp;gt; #include&amp;lt;cstdio&amp;gt; #include&amp;lt;algorithm&amp;gt; #include&amp;lt;cmath&amp;gt; #include&amp;lt;cstring&amp;gt; #include&amp;lt;string&amp;gt; #include&amp;lt;map&amp;gt; #include&amp;lt;set&amp;gt; #include&amp;lt;queue&amp;gt; #include&amp;lt;vector&amp;gt; #include&amp;lt;stack&amp;gt; #define y0 abc111qqz #define y1 hust111qqz #define yn hez111qqz #define j1 cute111qqz #define tm crazy111qqz #define lr dying111qqz using namespace std; #define REP(i, n) for (int i=0;i&amp;lt;int(n);++i) typedef long long LL; typedef unsigned long long ULL; const int inf = 0x7fffffff; const int N=1E6+7; int sum[50005]; LL p[N]; void solve () { int d,n; int x; memset(p,0,sizeof(p)); sum[0] = 0; p [0] = 1; for ( int i = 1 ; i &amp;lt;= n ; i++){ scanf(&amp;quot;%d&amp;quot;,&amp;amp;x); sum[i] = (sum[i-1] + x) % d; p[sum[i]]++; } LL ans = 0 ; for ( int i = 0 ; i &amp;lt; d ; i++){ if (p[i]&amp;gt;0){ ans = ans + p[i]*(p[i]-1)/2; } } cout&amp;lt;&amp;lt;ans&amp;lt;&amp;lt;endl; } int main() { int T; cin&amp;gt;&amp;gt;T; while (T--){ solve(); } return 0; }</description></item><item><title>codeforces 569 D. Symmetric and Transitive (组合数学　第二类斯特林数　贝尔数)</title><link>https://111qqz.com/2015/08/codeforces569d/</link><pubDate>Fri, 14 Aug 2015 22:20:00 +0000</pubDate><guid>https://111qqz.com/2015/08/codeforces569d/</guid><description>
D. Symmetric and Transitive
time limit per test
1.5 seconds
memory limit per test
256 megabytes
input
standard input
output
standard output
Little Johnny has recently learned about set theory. Now he is studying binary relations. You've probably heard the term &amp;quot;equivalence relation&amp;quot;. These relations are very important in many areas of mathematics. For example, the equality of the two numbers is an equivalence relation.
A set ρ of pairs (a, b) of elements of some set A is called a binary relation on set A.</description></item><item><title>贝尔数(集合的划分数目)</title><link>https://111qqz.com/2015/08/</link><pubDate>Fri, 14 Aug 2015 21:53:00 +0000</pubDate><guid>https://111qqz.com/2015/08/</guid><description>
http://baike.baidu.com/link?url=kw5Kxe3nSvRJR0TpJUpMrORcQL8fyZFpJlT9_o0RlGYOy0bKFobabPPSj3LxGfy7o1qGVycrYK4Iags3hMFq0a
在组合数合里，贝尔数给出了集合划分的数目，以数学家埃里克·坦普尔·贝尔（Eric Temple Bell）命名，是组合数学中的一组整数数列。[1]
以B0= B1=1为始， 首几项的贝尔数为：1, 1, 2, 5, 15, 52, 203, 877, 4140, 21147, 115975, …（OEIS的A000110数列）
_B__n_是基数为_n_的集合划分数目。集合S_的一个划分是定义为_S_的两两不相交的非空子集的族，它们的并是_S。例如_B_3 = 5因为3个元素的集合{a, b, c}有5种不同的划分方法：
* {{a}, {b}, {c}} *
{{a}, {b, c}} *
{{b}, {a, c}} *
{{c}, {a, b}} *
{{a, b, c}}
_B_0是1因为空集
Image not found a.warning-link { color: inherit !important; font-weight: inherit !important; text-decoration: underline !important; border-bottom: none !important; } Web path: https://111qqz.com/wp-content/uploads/2015/11/58ee3d6d55fbb2fb37e2ad094d4a20a44723dce4.jpg</description></item></channel></rss>