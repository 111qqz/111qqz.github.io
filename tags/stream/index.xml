<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>stream on 111qqz的小窝</title><link>https://111qqz.com/tags/stream/</link><description>Recent content in stream on 111qqz的小窝</description><generator>Hugo -- gohugo.io</generator><language>en</language><copyright>Copyright © 2012-2022 all rights reserved.</copyright><lastBuildDate>Fri, 04 May 2018 03:48:37 +0000</lastBuildDate><atom:link href="https://111qqz.com/tags/stream/index.xml" rel="self" type="application/rss+xml"/><item><title>C++ IO Streams 学习笔记</title><link>https://111qqz.com/2018/05/cpp-io-streams-notes/</link><pubDate>Fri, 04 May 2018 03:48:37 +0000</pubDate><guid>https://111qqz.com/2018/05/cpp-io-streams-notes/</guid><description>
迫于拙劣的cpp水平，来补补以前忽略掉的cpp细节。
老规矩，先放资料。
参考资料:
A Gentle Introduction to C++ IO Streams
"Designing and implementing a general input/output facility for a programming language is notoriously difficult" - Bjarne Stroustrup Stream的基本认识 说说我的理解。stream(流)可以看做输入输出的抽象。我们通过流可以忽略掉device的细节，采取同样的输入输出方式。
对于任何原生的cpp类型，都可以用stream来处理。用户自定义的类，也可以通过重载&amp;lt;&amp;lt;和&amp;gt;&amp;gt;而让stream可以处理。
1 2 #include &amp;lt;iostream&amp;gt;3 #include &amp;lt;ctime&amp;gt;4 #include &amp;lt;sstream&amp;gt;5 #include &amp;lt;fstream&amp;gt;6 7 using namespace std; 8 9 // timestamp returns the current time as a string 10 std::string timestamp(); 11 12 class LogStatement; 13 ostream&amp;amp; operator&amp;lt;&amp;lt;(ostream&amp;amp; ost, const LogStatement&amp;amp; ls); 14 15 class LogStatement 16 { 17 public: 18 LogStatement(std::string s): data(s), time_string( timestamp() ) 19 { }; 20 21 //This method handles all the outputs.</description></item></channel></rss>