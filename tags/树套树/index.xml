<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>树套树 on 111qqz's blog</title><link>https://111qqz.com/tags/%E6%A0%91%E5%A5%97%E6%A0%91/</link><description>Recent content in 树套树 on 111qqz's blog</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><copyright>Copyright © 2012-2022 all rights reserved.</copyright><lastBuildDate>Sun, 04 Sep 2016 13:47:07 +0000</lastBuildDate><atom:link href="https://111qqz.com/tags/%E6%A0%91%E5%A5%97%E6%A0%91/index.xml" rel="self" type="application/rss+xml"/><item><title>codeforces 19 D. Points (离散化+树套树（线段树+set）)</title><link>https://111qqz.com/2016/09/cf19d/</link><pubDate>Sun, 04 Sep 2016 13:47:07 +0000</pubDate><guid>https://111qqz.com/2016/09/cf19d/</guid><description>
题目链接
题意：
在二维坐标平面内进行_n_ (1 ≤ _n_ ≤ 2·105) 次操作。一共有三种类型操作。 1.add x,y 将点(x,y)加进坐标系。
2.remove x,y 将点(x,y)移除.
3.find x,y 找到点(x,y)右上角的点(xp&amp;gt;x,yp&amp;gt;y)。如果有多个输出x最小的。还是有多个输出y最小的。
x,y均为非负数。以上操作均合法。
思路：没有思路。。。不会啊。。。以为要二维线段树什么的。。。。总之是不会做。。。
大概从中午开始看题解。。。8个小时。。。。终于完全搞懂了orz
很巧妙得把二维问题转化成了一维问题。。。
我来说一下大概做法，具体的细节见代码注释：
在x轴方向维护一课线段树，线段树的数组tree[i]存储的信息是以i节点为根节点的子树所对应的区间能达到的最大的y值。线段树的叶子节点上是一个set，set[i]是横坐标为i时的纵坐标集合，也就是所谓的树套树。
由于x很大，但是n比较小，所以我们这里采用了stl+去重的办法离散化离散化的三种办法
对于添加和删除点的操作，我们更新完对应的set把相应的x（离散化后的）在线段树中更新就好（因为线段树的update操作是和set有关的）
对于find操作，我们首先从线段树中找到（下标大于x且最小且集合中存在大于y的元素的集合）的下标
这样我们确定了x，再upper_bound一下找到对应的集合中最小的y.
初始化由于没有插入y,所以tree可以初始化为-1，不用建树。。。（反正建了也都是-1）
/* *********************************************** Author :111qqz Created Time :Sun 04 Sep 2016 07:19:05 PM CST File Name :code/cf/problem/19D.cpp ************************************************ */ #include &amp;lt;cstdio&amp;gt; #include &amp;lt;cstring&amp;gt; #include &amp;lt;iostream&amp;gt; #include &amp;lt;algorithm&amp;gt; #include &amp;lt;vector&amp;gt; #include &amp;lt;queue&amp;gt; #include &amp;lt;set&amp;gt; #include &amp;lt;map&amp;gt; #include &amp;lt;string&amp;gt; #include &amp;lt;cmath&amp;gt; #include &amp;lt;cstdlib&amp;gt; #include &amp;lt;ctime&amp;gt; #define fst first #define sec second #define lson l,m,rt&amp;lt;&amp;lt;1 #define rson m+1,r,rt&amp;lt;&amp;lt;1|1 #define ms(a,x) memset(a,x,sizeof(a)) typedef long long LL; #define pi pair &amp;lt; int ,int &amp;gt; #define MP make_pair using namespace std; const double eps = 1E-8; const int dx4[4]={1,0,0,-1}; const int dy4[4]={0,-1,1,0}; const int inf = 0x3f3f3f3f; const int N=2E5+7; int n,m; int tree[N&amp;lt;&amp;lt;2]; //记录线段树的信息，tree[i]表示的是以i节点为根节点的子树所代表的区间中的点的最大的y值。 set&amp;lt;int&amp;gt;se[N];//集合se[i]是横坐标为x的点的纵坐标的集合。 struct node //线段树套平衡树，在x轴的方向上建一棵线段树，线段树的每个叶子节点是一个set。 { int x,y; char cmd[15]; void input() { scanf(&amp;quot;%s%d%d&amp;quot;,cmd,&amp;amp;x,&amp;amp;y); } }q[N]; int H[N]; void PushUp(int rt) { tree[rt] = max(tree[rt&amp;lt;&amp;lt;1],tree[rt&amp;lt;&amp;lt;1|1]); } void update( int p,int l,int r,int rt) { if (l==r) { if (se[l].</description></item></channel></rss>