<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>linux on 111qqz的小窝</title><link>http://example.org/tags/linux/</link><description>Recent content in linux on 111qqz的小窝</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Sun, 12 Apr 2020 07:10:14 +0800</lastBuildDate><atom:link href="http://example.org/tags/linux/index.xml" rel="self" type="application/rss+xml"/><item><title>thinkpad t430 manjaro系统安装nvidia驱动</title><link>http://example.org/2020/04/Install-nvidia-Driver-on-Thinkpad-T430-Manjaro/</link><pubDate>Sun, 12 Apr 2020 07:10:14 +0800</pubDate><guid>http://example.org/2020/04/Install-nvidia-Driver-on-Thinkpad-T430-Manjaro/</guid><description>前几天装驱动把笔记本搞崩溃了..重新装了kde桌面环境的manjaro
首先根据 Configure NVIDIA (non-free) settings and load them on Startup
直接装驱动。 装之后mhwd -li命令会显示新安装的驱动，带有nvidia字样的。
然而发现inxi -G 命令下，nvidia GPU显示的drivier是 N/A
参考Inxi -G in Terminal: Graphics card N/A?
发现需要手动load driver
执行 sudo modprobe nvidia 后发现inxi -G 命令可以找到驱动了，nvidia-smi也可以正常显示了。
接下来是设置开启加载driver.
参考Automatic module loading with systemd
需要修改 /etc/modules-load.d/modules.conf
加入一行
nvidia 重启后发现仍然不work.
然后看到/etc/modules-load.d/ doesn’t load nvidia on boot
发现原因是nvidia驱动被设置为黑名单了。 在 /usr/lib/modprobe.d/bumblebee.conf 文件中，把所有内容注释掉即可。
重新启动，发现已经可以正常加载驱动了。</description></item><item><title>解决ubuntu 14.04 下 壁纸软件 variety 崩溃 ValueError: bad marshal data (unknown type code) 的问题</title><link>http://example.org/2018/09/the-way-to-fix-variety-crash-on-ubuntu-14-04/</link><pubDate>Sun, 30 Sep 2018 08:59:31 +0000</pubDate><guid>http://example.org/2018/09/the-way-to-fix-variety-crash-on-ubuntu-14-04/</guid><description>系统为ubuntu 14.04
迫于特别想定时换壁纸，查了下解决方案。
发现只要删除掉/usr目录下所有的'.pyc&amp;rsquo;文件就可以
命令为:sudo find /usr -name &amp;lsquo;*.pyc&amp;rsquo; -delete</description></item><item><title>linux 下C++ 连接mysql 数据库</title><link>http://example.org/2018/07/connect-mysql-with-cpp-under-linux/</link><pubDate>Mon, 02 Jul 2018 07:02:28 +0000</pubDate><guid>http://example.org/2018/07/connect-mysql-with-cpp-under-linux/</guid><description>资料推荐这个:MySQL C API programming tutorial
环境为ubuntu 14.04 lts
需要安装mysql 和mysql 开发包
sudo apt-get install libmysqlclient15-dev mysql-server mysql-client
先在mysql 中建立test数据库和test表格
　mysql&amp;gt;create database test; mysql&amp;gt;use test; //切换到test数据库中 mysql&amp;gt; create table test(name varchar(255),num int(10) ); //创建一个叫test的表 mysql&amp;gt;show create table test; //显示刚才创建的表信息 mysql&amp;gt; select * from test; //查询test表中数据 mysql&amp;gt;quit 然后用如下cpp代码连接
#include &amp;lt;cstdio&amp;gt; #include &amp;lt;mysql.h&amp;gt; #include &amp;lt;cstring&amp;gt; int main(int argc,char *argv[]) { MYSQL conn; int res; mysql_init(&amp;amp;conn); if (mysql_real_connect(&amp;amp;conn,&amp;quot;localhost&amp;quot;,&amp;quot;root&amp;quot;,&amp;quot;2254965&amp;quot;,&amp;quot;test&amp;quot;,0,NULL,CLIENT_FOUND_ROWS)) { puts(&amp;quot;connect success&amp;quot;); res = mysql_query(&amp;amp;conn,&amp;quot;insert into test values('sensetime','23333')&amp;quot;); if (res) puts(&amp;quot;error&amp;quot;); else puts(&amp;quot;success&amp;quot;); printf(&amp;quot;res=%d\n&amp;quot;,res); } return 0; } 编译:</description></item><item><title>linux/win双系统 更新win后 grub 出现 Error: unknown filesystem 的解决办法</title><link>http://example.org/2018/04/the-way-to-fix-unkown-filesystem-error-in-grub/</link><pubDate>Sun, 01 Apr 2018 06:28:30 +0000</pubDate><guid>http://example.org/2018/04/the-way-to-fix-unkown-filesystem-error-in-grub/</guid><description>windows自己更新把grub更新挂了&amp;hellip;.
更新的时候要重启几次,重启一次挂一次&amp;hellip;
讲真,windows(或者说win10?) 是我见过的最辣鸡的OS了&amp;hellip; 自己把自己弄挂这事不是一两次了.
下面说修复办法:
先ls,得到一堆诸如(hd0,gpt7) 这种
然后选设X=第一个(x,y)形式的输出
之后
&amp;lt;code&amp;gt;set root=X set prefix=X/boot/grub insmod normal normal &amp;lt;/code&amp;gt; 然后记得要进入linux分区&amp;hellip;.. 执行: sudo update-grub sudo grub-install /dev/sda
总结:珍爱生命,远离辣鸡windows!!!!! 珍爱生命,远离辣鸡windows!!!!! 珍爱生命,远离辣鸡windows!!!!!</description></item><item><title>mysql 出现　innoDB: Cannot allocate memory for the buffer pool　的解决办法</title><link>http://example.org/2018/03/the-way-to-fix-mysql-innodb-cannot-allocate-memory/</link><pubDate>Thu, 15 Mar 2018 04:56:58 +0000</pubDate><guid>http://example.org/2018/03/the-way-to-fix-mysql-innodb-cannot-allocate-memory/</guid><description>emmm,博客的数据库又挂了。
看了下log，发现innoDB: Cannot allocate memory for the buffer pool　的error
查了下，貌似是内存不够了？　orz
用free 命令看了下，阿里云ecs貌似是默认没有swap分区的。
于是参考云服务器 ECS Linux SWAP 配置概要说明 
设置了swap分区。看下还会不会挂orz</description></item><item><title>AWK 初探</title><link>http://example.org/2017/03/awk-/</link><pubDate>Sun, 19 Mar 2017 10:02:58 +0000</pubDate><guid>http://example.org/2017/03/awk-/</guid><description>参考资料：
awk_维基百科
awk简明教程
awk是一门比较古老但是很好用的文本处理工具（语言?）
语法还是很好懂的。。。转载了一篇文章。。。算是简明手册？ 不过台词有点糟糕orz
之所以叫AWK是因为其取了三位创始人 Alfred Aho，Peter Weinberger, 和 Brian Kernighan 的Family Name的首字符。要学AWK，就得提一提AWK的一本相当经典的书《The AWK Programming Language》，它在豆瓣上的评分是9.4分！在亚马逊上居然卖1022.30元。
我在这里的教程并不想面面俱到，本文和我之前的Go语言简介一样，全是示例，基本无废话。
我只想达到两个目的：
1）你可以在乘坐公交地铁上下班，或是在坐马桶拉大便时读完（保证是一泡大便的工夫）。
2）我只想让这篇博文像一个火辣的脱衣舞女挑起你的兴趣，然后还要你自己去下工夫去撸。
废话少说，我们开始脱吧（注：这里只是topless）。
起步上台 我从netstat命令中提取了如下信息作为用例：
$ cat netstat.txt Proto Recv-Q Send-Q Local-Address Foreign-Address State tcp 0 0 0.0.0.0:3306 0.0.0.0:* LISTEN tcp 0 0 0.0.0.0:80 0.0.0.0:* LISTEN tcp 0 0 127.0.0.1:9000 0.0.0.0:* LISTEN tcp 0 0 coolshell.cn:80 124.205.5.146:18245 TIME_WAIT tcp 0 0 coolshell.cn:80 61.140.101.185:37538 FIN_WAIT2 tcp 0 0 coolshell.</description></item><item><title>Linux 下各个目录的作用及内容</title><link>http://example.org/2017/03/common-linux-files/</link><pubDate>Wed, 15 Mar 2017 06:29:36 +0000</pubDate><guid>http://example.org/2017/03/common-linux-files/</guid><description>参考：[wiki_FHS](http://Filesystem Hierarchy Standard)
其实这东西。。。虽然有一个统一的标准。。。但是不同发行版。。。或者同一个发行版的不同版本。。。差异貌似都蛮大的。。。所以只是理论上各个目录的作用。。。可能和具体的发行版不符。。。
Linux 目录 在 Linux 下，我们看到的是文件夹（目录）： 在早期的 UNIX 系统中，各个厂家各自定义了自己的 UNIX 系统文件目录，比较混乱。Linux 面世不久后，对文件目录进行了标准化，于1994年对根文件目录做了统一的规范，推出 FHS ( Filesystem Hierarchy Standard ) 的 Linux 文件系统层次结构标准。FHS 标准规定了 Linux 根目录各文件夹的名称及作用，统一了Linux界命名混乱的局面。
无论何种版本的 Linux 发行版，桌面、应用是 Linux 的外衣，文件组织、目录结构才是Linux的内心。
FHS（英文：Filesystem Hierarchy Standard 中文：文件系统层次结构标准），多数 Linux 版本采用这种文件组织形式，FHS 定义了系统中每个区域的用途、所需要的最小构成的文件和目录同时还给出了例外处理与矛盾处理。 FHS 定义了两层规范，第一层是， / 下面的各个目录应该要放什么文件数据，例如 /etc应该要放置设置文件，/bin 与 /sbin 则应该要放置可执行文件等等。
第二层则是针对 /usr 及 /var 这两个目录的子目录来定义。例如 /var/log 放置系统登录文件、/usr/share 放置共享数据等等。
FHS 是根据以往无数 Linux 用户和开发者的经验总结出来的，并且会维持更新，FHS 依据文件系统使用的频繁与否以及是否允许用户随意改动（注意，不是不能，学习过程中，不要怕这些），将目录定义为四种交互作用的形态，如下表所示：
/：根目录，一般根目录下只存放目录，不要存放件，/etc、/bin、/dev、/lib、/sbin应该和根目录放置在一个分区中
/bin: /usr/bin: 可执行二进制文件的目录，如常用的命令ls、tar、mv、cat等。
/boot：放置linux系统启动时用到的一些文件。/boot/vmlinuz 为 linux 的内核文件，以及 /boot/gurb。建议单独分区，分区大小100M即可</description></item><item><title>geekos project 1 （ELF文件相关）</title><link>http://example.org/2016/06/geekos-project-1-elf/</link><pubDate>Sat, 18 Jun 2016 19:43:34 +0000</pubDate><guid>http://example.org/2016/06/geekos-project-1-elf/</guid><description>一、目的 熟悉ELF文件格式，了解GeekOS系统如何将ELF格式的可执行程序装入到内存，建立内核进程并运行的实现技术。 二、流程 1、修改/geekos/elf.c文件：在函数Parse_ELF_Executable( )中添加代码，分析ELF格式的可执行文件（包括分析得出ELF文件头、程序头，获取可执行文件长度，代码段、数据段等信息），并填充Exe_Format数据结构中的域值。 2、在Linux环境下编译系统得到GeekOS镜像文件。 3、编写一个相应的bochs配置文件。 4、在bochs中运行GeekOS系统显示结果。
编译以及启动bochs同project0&amp;hellip; project0遇到的那些错误还是都会遇到一遍233.
然后在project1/src/geekos/ 目录下的elf.c中添加函数：int Parse_ELF_Executable(char *exeFileData, ulong_t exeFileLength, struct Exe_Format *exeFormat)
原理部分不过多阐释，具体可见我参考的博客。
最后实现为：
int Parse_ELF_Executable(char *exeFileData, ulong_t exeFileLength, struct Exe_Format *exeFormat) { elfHeader* header = exeFileData; programHeader* pHeader = (exeFileData+header-&amp;gt;phoff); exeFormat-&amp;gt;numSegments = header-&amp;gt;phnum; exeFormat-&amp;gt;entryAddr = header-&amp;gt;entry; int i = 0; for (; i&amp;lt; header-&amp;gt;phnum; i++) { exeFormat-&amp;gt;segmentList[i].offsetInFile = pHeader-&amp;gt;offset; exeFormat-&amp;gt;segmentList[i].lengthInFile = pHeader-&amp;gt;fileSize; exeFormat-&amp;gt;segmentList[i].startAddress = pHeader-&amp;gt;vaddr; exeFormat-&amp;gt;segmentList[i].sizeInMemory = pHeader-&amp;gt;memSize; exeFormat-&amp;gt;segmentList[i].protFlags = pHeader-&amp;gt;flags; pHeader++; } return 0; //!</description></item><item><title>atom在linux下安装插件失败的解决方案</title><link>http://example.org/2015/12/atomlinux/</link><pubDate>Mon, 30 Nov 2015 17:27:17 +0000</pubDate><guid>http://example.org/2015/12/atomlinux/</guid><description>gyp info it worked if it ends with ok gyp info using node-gyp@2.0.2 gyp info using node@0.10.40 | linux | x64 gyp http GET https://atom.io/download/atom-shell/v0.34.0/node-v0.34.0.tar.gz gyp WARN install got an error, rolling back install gyp ERR! install error gyp ERR! stack Error: This is most likely not a problem with node-gyp or the package itself and gyp ERR! stack is related to network connectivity. In most cases you are behind a proxy or have bad gyp ERR!</description></item></channel></rss>