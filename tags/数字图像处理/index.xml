<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>数字图像处理 on 111qqz的小窝</title><link>https://111qqz.com/tags/%E6%95%B0%E5%AD%97%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86/</link><description>Recent content in 数字图像处理 on 111qqz的小窝</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><copyright>Copyright © 2012-2022 all rights reserved.</copyright><lastBuildDate>Wed, 07 Jun 2017 06:53:36 +0000</lastBuildDate><atom:link href="https://111qqz.com/tags/%E6%95%B0%E5%AD%97%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86/index.xml" rel="self" type="application/rss+xml"/><item><title>数字图像处理大作业(初步）</title><link>https://111qqz.com/2017/06/digital-image-processing-course-final-project/</link><pubDate>Wed, 07 Jun 2017 06:53:36 +0000</pubDate><guid>https://111qqz.com/2017/06/digital-image-processing-course-final-project/</guid><description>
...先随便记录一下好了。。。
* 神经网络识别数字或者字母？ * 识别车牌号？ * not hot dog? 安装python pandas pandas
发现之前装caffe的时候...装了这个东西。。。
但是就是检测不到？于是卸载重装。。。。
需要注意的是，如果是python2,要用pip2 install pandas,如果是python3,要用pip3 install pandas.
安装tensorflow...直接sudo pacman -Syu python-tensorflow 即可。。。
然后装好之后检测不到orz...感觉还是pip的安装方式比较靠谱。。。
pip2 install tensorflow
tensorflow_pip安装
我的环境是python2.7
# Ubuntu/Linux 64-bit, CPU only, Python 2.7 $ export TF_BINARY_URL=https://storage.googleapis.com/tensorflow/linux/cpu/tensorflow-0.10.0-cp27-none-linux_x86_64.whl sudo pip install --upgrade $TF_BINARY_URL 安装成功。。然后发现。。numpy挂了（？？？？？
Image not found a.warning-link { color: inherit !important; font-weight: inherit !important; text-decoration: underline !important; border-bottom: none !important; } 网站链接: /2017/06/digital-image-processing-course-final-project/https://111qqz.</description></item><item><title>边界的链码，归一化链码，差分玛，形状数</title><link>https://111qqz.com/2017/06/digital-image-processing-course-review/</link><pubDate>Tue, 06 Jun 2017 11:42:37 +0000</pubDate><guid>https://111qqz.com/2017/06/digital-image-processing-course-review/</guid><description>
复习一下数字图像处理。 Image not found a.warning-link { color: inherit !important; font-weight: inherit !important; text-decoration: underline !important; border-bottom: none !important; } 网站链接: /2017/06/digital-image-processing-course-review/http://img.blog.csdn.net/20141005095354734
链接到文件: /content/post/ACM-ICPC/http://img.blog.csdn.net/20141005095354734
使用 Page Bundles: true
按照我自己的理解简单来说： 原链码：按照任意起点走边界一周，方向按照上图对应的表示，得到的数字序列就是原链码。 归一化链码：为了解决原链码中起点不唯一而产生的序列不唯一的问题，规定，对于所有起点得到的原链码中，字典序最小的即为归一化链码（由于序列都是自然数，因此字典序最小也可以理解成，把该序列看成有前导０的自然数之后的数值之后的数值最小。 差分码：为了解决图形旋转之后，原链码和归一化链码都会发生变化，引入差分码。n位原链码（或归一化链码，由于归一化链码只是一种特殊的原链码，之后不再单独强调）可以得到n-1位差分码。具体来说，对于原链码ai，可以得到差分码b[i],_b[i] = ((a[i+1] - a[i])+mod)%mod(i属于1..n-1)，_mod根据实际有几个方向决定，通常为４或者８。 形状数：需要强调的是，形状数也是一个序列，而不是一个数。其实形状数就是把差分码按照字典序排序之后，最小的序列。形状数的阶数是该序列的长度。 Freeman链码（弗雷曼链码）是指用曲线起始点的坐标和边界点方向代码来描述曲线或边界的方法，常被用来在图像处理、计算机图形学、模式识别等领域中表示曲线和区域边界。它是一种边界的编码表示法，用边界方向作为编码依据，为简化边界的描述，一般描述的是边界点集。
常用的链码按照中心像素点邻接方向个数的不同，分为4连通链码和8连通链码。4连通链码的邻接点有4个，分别在中心点的上、下、左和右。8连通链码比4连通链码增加了4个斜方向，因为任意一个像素周围均有8个邻接点，而8连通链码正好与像素点的实际情况相符，能够准确地描述中心像素点与其邻接点的信息。因此，8连通链码的使用相对较多。
Image not found a.warning-link { color: inherit !important; font-weight: inherit !important; text-decoration: underline !important; border-bottom: none !important; } 网站链接: /2017/06/digital-image-processing-course-review/http://img.blog.csdn.net/20141005095354734</description></item></channel></rss>