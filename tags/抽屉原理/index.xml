<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>抽屉原理 on 111qqz's blog</title><link>https://111qqz.com/tags/%E6%8A%BD%E5%B1%89%E5%8E%9F%E7%90%86/</link><description>Recent content in 抽屉原理 on 111qqz's blog</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><copyright>Copyright © 2012-2022 all rights reserved.</copyright><lastBuildDate>Wed, 30 Nov 2016 08:10:23 +0000</lastBuildDate><atom:link href="https://111qqz.com/tags/%E6%8A%BD%E5%B1%89%E5%8E%9F%E7%90%86/index.xml" rel="self" type="application/rss+xml"/><item><title>poj 3274 Gold Balanced Lineup (抽屉原理？错题？)</title><link>https://111qqz.com/2016/11/poj-3274/</link><pubDate>Wed, 30 Nov 2016 08:10:23 +0000</pubDate><guid>https://111qqz.com/2016/11/poj-3274/</guid><description>
poj 3274 题目链接
题意：给出n个数和k，每个数不超过k位二进制。现在问最长的一段区间，满足该区间中所有数相加，k个位置上的数相等。
思路：k个位置上的数都相等的话。。。那这个和应该是(k&amp;lt;&amp;lt;1)-1的整数倍。。。
于是抽屉原理搞了一发。。一直wa..
正解是数字hash。。。
不过我拍了一下。。。如果不是我理解错了题意的话。。。我是把一份ac代码　hack掉了。。。。。
用来对拍的ac代码：
#include &amp;lt;stdio.h&amp;gt; #include &amp;lt;stdlib.h&amp;gt; #include &amp;lt;string.h&amp;gt; #include &amp;lt;algorithm&amp;gt; using namespace std; #define MAX 100005 #define mod 1000000 //此处mod定义为99997时，运行时间1000多MS int hash[MAX*10];//hash表储存下标 int sum[MAX][35];//第 1 头牛到第 i 头的对应属性的和 int c[MAX][35];//存放每头牛属性 j与第一个属性的差 int n,k; int Hash_key(int *cc) { int j,key=0; for(j=1;j&amp;lt;k;j++) key=key%mod+cc[j]&amp;lt;&amp;lt;2;//此处用 * 乘超时 key=abs(key)%mod;//此处得到的key可能会是负数，所以取绝对值 return key; } int main() { int i,j,x,maxlen=0;//maxlen为最大长度 scanf(&amp;quot;%d%d&amp;quot;,&amp;amp;n,&amp;amp;k); int l,r; memset(hash,-1,sizeof(hash));//初始化哈希表 hash[0]=0;//hash表首位初始化 for(i=1;i&amp;lt;=n;i++) { scanf(&amp;quot;%d&amp;quot;,&amp;amp;x); for(j=0;j&amp;lt;k;j++) { sum[i][j]=sum[i-1][j]+x%2; c[i][j]=sum[i][j]-sum[i][0]; x&amp;gt;&amp;gt;=1; } int key=Hash_key(c[i]); while(hash[key]!</description></item><item><title>poj 2356 Find a multiple (剩余类，抽屉原理)</title><link>https://111qqz.com/2016/02/poj2356/</link><pubDate>Mon, 29 Feb 2016 13:06:00 +0000</pubDate><guid>https://111qqz.com/2016/02/poj2356/</guid><description>
http://poj.org/problem?id=2356
题意：有n个数，从中选取若干个（1..n），和能被n整除。问是否有解，无解输出0，有解的话，输出个数以及选择的ai
由抽屉原理可知一定有解： 做一个带模的前缀和 sum[i]=(sum[i-1]+a[i])%n n个数，sum[i]最多有n种。 如果某个sum[i]为0，那么表示从1到i的和能被n整除。 如果所有的sum[i]不为0，那么一共有n个sum[i]，n-1个值（1..n-1），一定有sum[i]==sumj 那么a[i]到a[j]的和一定能被n整除。
/************************************************************************* &amp;gt; File Name: code/poj/2356.cpp &amp;gt; Author: 111qqz &amp;gt; Email: rkz2013@126.com &amp;gt; Created Time: 2015年08月21日 星期五 13时43分41秒 ************************************************************************/ #include&amp;lt;iostream&amp;gt; #include&amp;lt;iomanip&amp;gt; #include&amp;lt;cstdio&amp;gt; #include&amp;lt;algorithm&amp;gt; #include&amp;lt;cmath&amp;gt; #include&amp;lt;cstring&amp;gt; #include&amp;lt;string&amp;gt; #include&amp;lt;map&amp;gt; #include&amp;lt;set&amp;gt; #include&amp;lt;queue&amp;gt; #include&amp;lt;vector&amp;gt; #include&amp;lt;stack&amp;gt; #define y0 abc111qqz #define y1 hust111qqz #define yn hez111qqz #define j1 cute111qqz #define tm crazy111qqz #define lr dying111qqz using namespace std; #define REP(i, n) for (int i=0;i&amp;lt;int(n);++i) typedef long long LL; typedef unsigned long long ULL; const int inf = 0x3f3f3f3f; const int N=2E4+7; int a[N]; int sum[N]; int n; int p[N]; int main() { scanf(&amp;quot;%d&amp;quot;,&amp;amp;n); sum[0]= 0; for ( int i = 1 ; i &amp;lt;= n ; i++){ scanf(&amp;quot;%d&amp;quot;,&amp;amp;a[i]); sum[i] = (sum[i-1] + a[i])%n; } memset(p,0,sizeof(p)); for ( int i = 1 ; i &amp;lt;= n ; i++){ if (sum[i]==0){ printf(&amp;quot;%d\n&amp;quot;,i); for ( int j = 1 ; j &amp;lt;= i ; j++){ printf(&amp;quot;%d\n&amp;quot;,j); } break; } if (p[sum[i]]){ // cout&amp;lt;&amp;lt;&amp;quot;111qqz&amp;quot;&amp;lt;&amp;lt;endl; printf(&amp;quot;%d\n&amp;quot;,i-p[sum[i]]); for ( int j = p[sum[i]]+1 ; j &amp;lt;= i ; j++){ printf(&amp;quot;%d\n&amp;quot;,j); } break; } p[sum[i]] = i; } return 0; }</description></item><item><title>hdu 1205 吃糖果 （鸽笼原理）</title><link>https://111qqz.com/2016/02/hdu1205/</link><pubDate>Mon, 29 Feb 2016 12:51:51 +0000</pubDate><guid>https://111qqz.com/2016/02/hdu1205/</guid><description>
http://acm.hdu.edu.cn/showproblem.php?pid=1205 题意：有n种糖果，第i种糖果有a[i]个，相邻两次不能吃一样的糖果，问能否有办法吃完所有糖果... 思路：如果第i种糖果有k个的话，那么其他所有种类的糖果之和至少有k-1个，才可能吃完。复杂度O(n) 看到有人说是抽屉原理.....大概。。。？不过不太明显。。直接想就好吧
/* *********************************************** Author :111qqz Created Time :2016年02月29日 星期一 20时40分00秒 File Name :code/hdu/1205.cpp ************************************************ */ #include &amp;lt;cstdio&amp;gt; #include &amp;lt;cstring&amp;gt; #include &amp;lt;iostream&amp;gt; #include &amp;lt;algorithm&amp;gt; #include &amp;lt;vector&amp;gt; #include &amp;lt;queue&amp;gt; #include &amp;lt;set&amp;gt; #include &amp;lt;map&amp;gt; #include &amp;lt;string&amp;gt; #include &amp;lt;cmath&amp;gt; #include &amp;lt;cstdlib&amp;gt; #include &amp;lt;ctime&amp;gt; #define fst first #define sec second #define lson l,m,rt&amp;lt;&amp;lt;1 #define rson m+1,r,rt&amp;lt;&amp;lt;1|1 #define ms(a,x) memset(a,x,sizeof(a)) typedef long long LL; #define pi pair &amp;lt; int ,int &amp;gt; #define MP make_pair using namespace std; const double eps = 1E-8; const int dx4[4]={1,0,0,-1}; const int dy4[4]={0,-1,1,0}; const int inf = 0x3f3f3f3f; const int N=1E6+7; int n; LL a[N]; LL total; int main() { #ifndef ONLINE_JUDGE freopen(&amp;quot;code/in.</description></item><item><title>codeforces #319 B - Modulo Sum (抽屉原理，dp)</title><link>https://111qqz.com/2015/09/codeforces319b-modulosumdp/</link><pubDate>Wed, 16 Sep 2015 03:24:00 +0000</pubDate><guid>https://111qqz.com/2015/09/codeforces319b-modulosumdp/</guid><description>
背包还是理解的不够透彻．．
因为每次都是用那个一维形式的．
这道题的做法类似01背包.
此外还可以有一个优化...
当n&amp;gt;m的时候．．．根绝抽屉原理．．一定为yes..
复杂度可以从o(nm)优到　o(m^2)
/************************************************************************* &amp;gt; File Name: code/cf/#319/B.cpp &amp;gt; Author: 111qqz &amp;gt; Email: rkz2013@126.com &amp;gt; Created Time: 2015年09月15日 星期二 19时54分44秒 ************************************************************************/ #include&amp;lt;iostream&amp;gt; #include&amp;lt;iomanip&amp;gt; #include&amp;lt;cstdio&amp;gt; #include&amp;lt;algorithm&amp;gt; #include&amp;lt;cmath&amp;gt; #include&amp;lt;cstring&amp;gt; #include&amp;lt;string&amp;gt; #include&amp;lt;map&amp;gt; #include&amp;lt;set&amp;gt; #include&amp;lt;queue&amp;gt; #include&amp;lt;vector&amp;gt; #include&amp;lt;stack&amp;gt; #include&amp;lt;cctype&amp;gt; #define y1 hust111qqz #define yn hez111qqz #define j1 cute111qqz #define ms(a,x) memset(a,x,sizeof(a)) #define lr dying111qqz using namespace std; #define For(i, n) for (int i=0;i&amp;lt;int(n);++i) typedef long long LL; typedef double DB; const int inf = 0x3f3f3f3f; const int N=1E3+7; int n,m; int a[N]; int dp[N]; void OneZeroPack(int cost,int value) { for ( int v = m ; v--; v &amp;gt;=cost) { dp[v] = max(dp[v],dp[v-cost]+value); } } int main() { #ifndef ONLINE_JUDGE #endif cin&amp;gt;&amp;gt;n&amp;gt;&amp;gt;m; if (n&amp;gt;=m) { puts(&amp;quot;YES&amp;quot;); return 0; } int k = 0; for ( int i = 0 ; i &amp;lt; n ; i++) { int x; scanf(&amp;quot;%d&amp;quot;,&amp;amp;x); if (x&amp;gt;m) continue; //大于背包容量的肯定直接舍去 k++; a[k] = x; } // for ( int i = 1 ; i &amp;lt;= k ; i++) cout&amp;lt;&amp;lt;&amp;quot;a[i]:&amp;quot;&amp;lt;&amp;lt;a[i]&amp;lt;&amp;lt;endl; for ( int i = 0 ; i &amp;lt;= m ; i++) dp[i] = -inf; dp[0] = 0 ; for ( int i = 1 ; i &amp;lt;= k ; i++) { OneZeroPack(a[i],a[i]); } for ( int i = 0 ; i &amp;lt;= m ; i++) cout&amp;lt;&amp;lt;i&amp;lt;&amp;lt;&amp;quot; &amp;quot;&amp;lt;&amp;lt;dp[i]&amp;lt;&amp;lt;endl; if (dp[m]==-inf) { puts(&amp;quot;NO&amp;quot;); } else { puts(&amp;quot;YES&amp;quot;); } #ifndef ONLINE_JUDGE fclose(stdin); #endif return 0; }</description></item><item><title>poj 3370 Halloween treats (剩余类,抽屉原理)</title><link>https://111qqz.com/2015/08/poj3370halloweentreats/</link><pubDate>Fri, 21 Aug 2015 05:36:00 +0000</pubDate><guid>https://111qqz.com/2015/08/poj3370halloweentreats/</guid><description>
昨天那道签到的数学题没搞出来不开心.
是时候刷一波数学了
这题题意是说,从n个数中任选m个,使得m个的和为c的倍数.
如果有解,输出选的数的下标,否则输出无解字符串.
抽屉原理的原始描述是,如果有n+1个物品,有n个抽屉,那么至少有一个抽屉有2个物品.
由抽屉原理我们可以退出一个结论,对于任意 n个自然数,一定有连续的一段和为n的倍数.
证明如下:
　设这n个自然数分别为a1,a2,a3,a4....an
　处理一个前缀和sum[i] = (sum[i-1] + a[i])%n
　因为n的剩余类有n种,分别为0,1,2...n-1
　所以sum[1],sum[2],sum[3]..sum[n]
　那么sum[1],sum[2],sum[3]...sum[n]最多也有n种.
　我们分情况讨论:
　(1)sum[1],sum[2],sum[3]...sum[n]互不相同,那么一定存在sum[i]=0,也就是前i个数的和为n的倍数.
　(2)情况(1)的反面,也就是存在sum[i]==sum[j] (i&amp;lt;j),那么 从a[i+1] 到 a[j]的和就是n的倍数.
因为题目中的数据 c&amp;lt;=n ,所以解一定存在.
具体做法就是处理出来一个前缀和%c
然后如果有0,则为解,输出.
否则记录sum[i]%d出现的位置,存在一个数组里
如果sum[i]%d第二次出现,就输出这段下标.
嘛,大括号换风格了....
都写开代码太长了==
/************************************************************************* &amp;gt; File Name: code/poj/3370.cpp &amp;gt; Author: 111qqz &amp;gt; Email: rkz2013@126.com &amp;gt; Created Time: 2015年08月21日 星期五 13时06分34秒 ************************************************************************/ #include&amp;lt;iostream&amp;gt; #include&amp;lt;iomanip&amp;gt; #include&amp;lt;cstdio&amp;gt; #include&amp;lt;algorithm&amp;gt; #include&amp;lt;cmath&amp;gt; #include&amp;lt;cstring&amp;gt; #include&amp;lt;string&amp;gt; #include&amp;lt;map&amp;gt; #include&amp;lt;set&amp;gt; #include&amp;lt;queue&amp;gt; #include&amp;lt;vector&amp;gt; #include&amp;lt;stack&amp;gt; #define y0 abc111qqz #define y1 hust111qqz #define yn hez111qqz #define j1 cute111qqz #define tm crazy111qqz #define lr dying111qqz using namespace std; #define REP(i, n) for (int i=0;i&amp;lt;int(n);++i) typedef long long LL; typedef unsigned long long ULL; const int inf = 0x3f3f3f3f; const int N=1E5+7; int a[N]; LL sum[N]; int p[N]; int n,c; int main() { while (~scanf(&amp;quot;%d %d&amp;quot;,&amp;amp;c,&amp;amp;n)){ if (c==0&amp;amp;&amp;amp;n==0) break; sum[0] = 0; for ( int i = 1 ; i &amp;lt;= n ;i++){ scanf(&amp;quot;%d&amp;quot;,&amp;amp;a[i]); a[i] = a[i] % c; sum[i] = (sum[i-1] + a[i])%c; } memset(p,0,sizeof(p)); for ( int i = 1 ; i &amp;lt;= n ; i++ ){ if (sum[i]==0){ for ( int j = 1 ; j &amp;lt;= i ; j++){ cout&amp;lt;&amp;lt;j&amp;lt;&amp;lt;&amp;quot; &amp;quot;; // cout&amp;lt;&amp;lt;&amp;quot;wang wang wang !</description></item><item><title>HUST team contest #2 C Divisible Subsequences ||poj 3844 (剩余类)</title><link>https://111qqz.com/2015/08/poj3844/</link><pubDate>Thu, 20 Aug 2015 17:11:00 +0000</pubDate><guid>https://111qqz.com/2015/08/poj3844/</guid><description>
算是签到帖，竟然卡住了。
我数学还是太差了。。
然后去找题解。。竟然看不懂！
我数学真的有这么差嘛。。。
然后多亏了队友 @zcy 妹子的讲解。。
其实很好理解啊。。。
不过数到底还是数学太差了==
今天七夕，废话有点多==
这道题的题意是，找序列中连续的一段，使得和 可以整除d
我们观察到数列中的数的范围是1..1 000 000 000 的
而d只有1 000 000
我们考虑余数相同，读入的时候就可以直接先 % 掉 d
因为只会和余数有关。
我们可以先处理出来一个前缀和数组sum[i]，表示前i个元素的和。
如果有一段序列从a[i] 到 a[j] 满足题意
根据题意那么这段序列的和一定%d=0
a[i] 到 a[j]的和为 sum[j]-sum[i-1]
也就是(sum[j]-sum[i-1] )%d==0
也就是sum[j] 和 sum[i-1] 关于 d 同余
如果我们在处理得到前缀和的时候就%dshuxue
那么就是sum[j]==sum[i-1]
所以我只要对于d的每一个剩余类有多少个统计出来。
然后对于每个剩余类，只需要任意取出两个，就是一种答案。
需要注意的是如果只有一个0，也是一种答案。
我们可以定义sum[i] = 0
还有一个需要注意的是要开long long
/* *********************************************** Author :111qqz Created Time :2016年02月29日 星期一 21时20分01秒 File Name :code/poj/3844.cpp ************************************************ */ #include&amp;lt;iostream&amp;gt; #include&amp;lt;iomanip&amp;gt; #include&amp;lt;cstdio&amp;gt; #include&amp;lt;algorithm&amp;gt; #include&amp;lt;cmath&amp;gt; #include&amp;lt;cstring&amp;gt; #include&amp;lt;string&amp;gt; #include&amp;lt;map&amp;gt; #include&amp;lt;set&amp;gt; #include&amp;lt;queue&amp;gt; #include&amp;lt;vector&amp;gt; #include&amp;lt;stack&amp;gt; #define y0 abc111qqz #define y1 hust111qqz #define yn hez111qqz #define j1 cute111qqz #define tm crazy111qqz #define lr dying111qqz using namespace std; #define REP(i, n) for (int i=0;i&amp;lt;int(n);++i) typedef long long LL; typedef unsigned long long ULL; const int inf = 0x7fffffff; const int N=1E6+7; int sum[50005]; LL p[N]; void solve () { int d,n; int x; memset(p,0,sizeof(p)); sum[0] = 0; p [0] = 1; for ( int i = 1 ; i &amp;lt;= n ; i++){ scanf(&amp;quot;%d&amp;quot;,&amp;amp;x); sum[i] = (sum[i-1] + x) % d; p[sum[i]]++; } LL ans = 0 ; for ( int i = 0 ; i &amp;lt; d ; i++){ if (p[i]&amp;gt;0){ ans = ans + p[i]*(p[i]-1)/2; } } cout&amp;lt;&amp;lt;ans&amp;lt;&amp;lt;endl; } int main() { int T; cin&amp;gt;&amp;gt;T; while (T--){ solve(); } return 0; }</description></item></channel></rss>