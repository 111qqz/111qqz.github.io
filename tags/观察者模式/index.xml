<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>观察者模式 on 111qqz的小窝</title><link>http://example.org/tags/%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/</link><description>Recent content in 观察者模式 on 111qqz的小窝</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Sat, 01 Sep 2018 09:27:40 +0000</lastBuildDate><atom:link href="http://example.org/tags/%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/index.xml" rel="self" type="application/rss+xml"/><item><title>[设计模式] 观察者( Observer )模式学习笔记</title><link>http://example.org/2018/09/observer-pattern-notes/</link><pubDate>Sat, 01 Sep 2018 09:27:40 +0000</pubDate><guid>http://example.org/2018/09/observer-pattern-notes/</guid><description>最近在学习node.js，里面讲到node.js的事件机制使用了观察者模式，因此来学习一下。
观察者模式的目的是定义对象间的一种一对多的依赖关系，当一个对象的状态发生改变时，所有依赖于它的对象都得到通知并被自动更新。
因此观察者模式又叫发布-订阅模式。
下面放一个简化之后的例子:
#include &amp;lt;iostream&amp;gt; #include &amp;lt;vector&amp;gt; #include &amp;lt;string&amp;gt; using namespace std; class Secretary; // 看股票的同事类（观察对象，观察者） class StockObserver { public: StockObserver(string strName, Secretary* strSub) { name = strName; sub = strSub; } void Update(); private: string name; Secretary* sub;我所理解的设计模式（C++实现）——观察者模式（Observer Pattern） }; // 秘书类（主题对象，通知者） class Secretary { public: string action; void Add(StockObserver ob) { observers.push_back(ob); } void Remove(int addIndex) { if(addIndex &amp;gt;=0 &amp;amp;&amp;amp; addIndex &amp;lt; observers.size()) observers.erase(observers.begin() + addIndex); } void Notify() { vector&amp;lt;StockObserver&amp;gt;::iterator it; for (it=observers.</description></item></channel></rss>