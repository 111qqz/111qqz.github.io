<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>贪心 on 111qqz的小窝</title><link>https://111qqz.com/tags/%E8%B4%AA%E5%BF%83/</link><description>Recent content in 贪心 on 111qqz的小窝</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><copyright>Copyright © 2012-2022 all rights reserved.</copyright><lastBuildDate>Wed, 01 Nov 2017 04:00:01 +0000</lastBuildDate><atom:link href="https://111qqz.com/tags/%E8%B4%AA%E5%BF%83/index.xml" rel="self" type="application/rss+xml"/><item><title>hdu 6034 2017 Multi-University Training Contest - Team 1 B Balala Power! (贪心)</title><link>https://111qqz.com/2017/11/hdu-6034/</link><pubDate>Wed, 01 Nov 2017 04:00:01 +0000</pubDate><guid>https://111qqz.com/2017/11/hdu-6034/</guid><description>
http://acm.hdu.edu.cn/showproblem.php?pid=6034
题意： 有一个仅由小写字母组成的字符串，要求将a..z的字母，对应到0..25，每个数字只能被一个字母对应，得到一个26进制的数，现在问这个数最大是多少。注意不允许有前导0，除非这个数本身就是0.
思路： 贪心。看哪个字母的权值最大。
可以用类似高精度加法的方式处理。
对于前导0的部分，用一个bool标记首位（如果字符串长度为1就不标记）
对于26个高精度数的排序，可以用交换id的技巧。
以及，如果排序之后，发现权值最小的数被对应到数字0，但是又在某个长度大于1的字符串的首字母位置出现过。
我初始想当然得，把该字母和最小的可以出现在首位的字母交换....
然而这很错啊？
实际上，更优秀做法是，找到第一个可以出现在首位的字母，然后从该字母后面到结尾，依次前移一位，最后把这个可以出现在首位的字母放在最后。
比如这组数据：
7 abcdefghijklmnopqrstuvwxyz zz yy xx ww uu vv
权值按照从大到小排列
z u v w x y t 显然不如 u v w x y z t 优
/* *********************************************** Author :111qqz Created Time :2017年11月01日 星期三 00时56分26秒 File Name :6034.cpp ************************************************ */ #include &amp;lt;bits/stdc++.h&amp;gt; #define PB push_back #define fst first #define sec second #define lson l,m,rt&amp;lt;&amp;lt;1 #define rson m+1,r,rt&amp;lt;&amp;lt;1|1 #define ms(a,x) memset(a,x,sizeof(a)) typedef long long LL; #define pi pair &amp;lt; int ,int &amp;gt; #define MP make_pair using namespace std; const double eps = 1E-8; const int dx4[4]={1,0,0,-1}; const int dy4[4]={0,-1,1,0}; const int inf = 0x3f3f3f3f; const int N=1E5+7; const LL mod =1E9+7; int n; string st[N]; int cnt[26][N]; int maxlen; int id[26]; int power[26]; LL base26[N]; bool Beg[26]; void init() { ms(Beg,false); ms(cnt,0); maxlen = 0 ; for ( int i = 0 ; i &amp;lt; 26 ; i++) id[i] = i; } bool small(int *a,int *b) { for ( int i = maxlen-1 ; i &amp;gt;= 0 ; i--) { if (a[i]&amp;lt;b[i]) return true; if (a[i]&amp;gt;b[i]) return false; } return false; } int main() { #ifndef ONLINE_JUDGE freopen(&amp;quot;.</description></item></channel></rss>