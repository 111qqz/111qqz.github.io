<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>LRU on 111qqz的小窝</title>
    <link>https://111qqz.com/tags/lru/</link>
    <description>Recent content in LRU on 111qqz的小窝</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 18 Aug 2017 19:18:25 +0000</lastBuildDate>
    
	<atom:link href="https://111qqz.com/tags/lru/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>leetcode 146. LRU Cache(list&#43;unordered_map)</title>
      <link>https://111qqz.com/2017/08/leetcode-146-lru-cachelistunordered_map/</link>
      <pubDate>Fri, 18 Aug 2017 19:18:25 +0000</pubDate>
      
      <guid>https://111qqz.com/2017/08/leetcode-146-lru-cachelistunordered_map/</guid>
      <description>请实现最近最少使用缓存(Least Recently Used (LRU) cache)类,需要支持 get, set,操作。 get 操作,给出 key,获取到相应的 value (value 为非负数),如果不存在返</description>
    </item>
    
    <item>
      <title>leetcode 146. LRU Cache(list&#43;unordered_map)</title>
      <link>https://111qqz.com/2017/08/leetcode-146-lru-cachelistunordered_map/</link>
      <pubDate>Fri, 18 Aug 2017 19:18:25 +0000</pubDate>
      
      <guid>https://111qqz.com/2017/08/leetcode-146-lru-cachelistunordered_map/</guid>
      <description>请实现最近最少使用缓存(Least Recently Used (LRU) cache)类,需要支持 get, set,操作。 get 操作,给出 key,获取到相应的 value (value 为非负数),如果不存在返</description>
    </item>
    
    <item>
      <title>缓存淘汰算法之LRU（转载）</title>
      <link>https://111qqz.com/2017/03/%e7%bc%93%e5%ad%98%e6%b7%98%e6%b1%b0%e7%ae%97%e6%b3%95%e4%b9%8blru%ef%bc%88%e8%bd%ac%e8%bd%bd%ef%bc%89/</link>
      <pubDate>Wed, 15 Mar 2017 00:34:50 +0000</pubDate>
      
      <guid>https://111qqz.com/2017/03/%e7%bc%93%e5%ad%98%e6%b7%98%e6%b1%b0%e7%ae%97%e6%b3%95%e4%b9%8blru%ef%bc%88%e8%bd%ac%e8%bd%bd%ef%bc%89/</guid>
      <description>参考博客 计组块忘光了呜呜呜。。。来复习一波。。 1. LRU 1.1. 原理 LRU（Least recently used，最近最少使用）算法根据数据的历史访问记录来进行淘汰数据</description>
    </item>
    
    <item>
      <title>缓存淘汰算法之LRU（转载）</title>
      <link>https://111qqz.com/2017/03/%e7%bc%93%e5%ad%98%e6%b7%98%e6%b1%b0%e7%ae%97%e6%b3%95%e4%b9%8blru%ef%bc%88%e8%bd%ac%e8%bd%bd%ef%bc%89/</link>
      <pubDate>Wed, 15 Mar 2017 00:34:50 +0000</pubDate>
      
      <guid>https://111qqz.com/2017/03/%e7%bc%93%e5%ad%98%e6%b7%98%e6%b1%b0%e7%ae%97%e6%b3%95%e4%b9%8blru%ef%bc%88%e8%bd%ac%e8%bd%bd%ef%bc%89/</guid>
      <description>参考博客 计组块忘光了呜呜呜。。。来复习一波。。 1. LRU 1.1. 原理 LRU（Least recently used，最近最少使用）算法根据数据的历史访问记录来进行淘汰数据</description>
    </item>
    
  </channel>
</rss>