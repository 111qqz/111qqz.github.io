<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Haskell on 111qqz's blog</title><link>https://111qqz.com/tags/haskell/</link><description>Recent content in Haskell on 111qqz's blog</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><copyright>Copyright © 2012-2022 all rights reserved.</copyright><lastBuildDate>Fri, 24 Nov 2017 03:18:01 +0000</lastBuildDate><atom:link href="https://111qqz.com/tags/haskell/index.xml" rel="self" type="application/rss+xml"/><item><title>基础 Haskell 学习笔记</title><link>https://111qqz.com/2017/11/haskell-notes/</link><pubDate>Fri, 24 Nov 2017 03:18:01 +0000</pubDate><guid>https://111qqz.com/2017/11/haskell-notes/</guid><description>
出于对函数式编程语言这一技能点的缺失...以及退役之后闲得蛋疼
打算浅尝辄止地学一下haskell
这篇笔记不会写成文档那样的详尽..毕竟函数式编程语言也是编程语言...有很多和其他编程语言(命令式？)相似的地方...
所以只会写一些简单的语法+让我感到惊讶的地方orz
总体的感觉...在里面看到了些python和pascal的影子orz...比如子界...已经好久没见到了
变量 * 命令式语言中，变量用来跟踪状态（keeping track of state）。 * Haskell中，变量保存了一个值，**然后再也不可以修改它了。** * 变量不仅可以保存像3.14这样的数值，还可以保存任何Haskell表达式 函数 * 函数中的函数 Prelude&amp;gt; let areaRect l w = l * w Prelude&amp;gt; let areaSquare s = areaRect s s Prelude&amp;gt; areaSquare 5 25 列表 * 创建列表/添加元素 Prelude&amp;gt; let numbers = [1,2,3,4] Prelude&amp;gt; numbers [1,2,3,4] Prelude&amp;gt; 0:numbers [0,1,2,3,4] Prelude&amp;gt; 1:0:numbers [1,0,1,2,3,4] Prelude&amp;gt; 2:1:0:numbers [2,1,0,1,2,3,4] Prelude&amp;gt; 5:4:3:2:1:0:numbers [5,4,3,2,1,0,1,2,3,4] * 事实上所有的列表都是在一个空的列表（`[]`）的基础上通过附加数据创建的。逗号与方括号的记法实际上是一种**语法糖**般的令人愉快的形式。 换句话说，`[1,2,3,4,5]`精确地等同于`1:2:3:4:5:[]` * 列表中的元素必须有相同的类型 * 列表的嵌套(二维以及高维度) * 列表大概可以类比数组或者python 中的list * 将两个List合并是很常见的操作，这可以通过++运算符实现。运算时会遍历左边的list,**因此用:运算符往一个List前端插入元素会是更好的选择。** * 若是要按照索引取得List中的元素，可以使用!</description></item></channel></rss>