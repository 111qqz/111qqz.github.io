<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>裴蜀定理 on 111qqz的小窝</title><link>http://example.org/tags/%E8%A3%B4%E8%9C%80%E5%AE%9A%E7%90%86/</link><description>Recent content in 裴蜀定理 on 111qqz的小窝</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Sun, 02 Apr 2017 06:26:02 +0000</lastBuildDate><atom:link href="http://example.org/tags/%E8%A3%B4%E8%9C%80%E5%AE%9A%E7%90%86/index.xml" rel="self" type="application/rss+xml"/><item><title>BZOJ 2257: [Jsoi2009]瓶子和燃料 (裴蜀定理)</title><link>http://example.org/2017/04/bzoj-2257/</link><pubDate>Sun, 02 Apr 2017 06:26:02 +0000</pubDate><guid>http://example.org/2017/04/bzoj-2257/</guid><description>2257: [Jsoi2009]瓶子和燃料 Time Limit: 10 Sec Memory Limit: 128 MB Submit: 1246 Solved: 756 [Submit][Status][Discuss]
Description jyy就一直想着尽快回地球，可惜他飞船的燃料不够了。 有一天他又去向火星人要燃料，这次火星人答应了，要jyy用飞船上的瓶子来换。jyy 的飞船上共有 N个瓶子(1&amp;lt;=N&amp;lt;=1000) ，经过协商，火星人只要其中的K 个 。 jyy 将 K个瓶子交给火星人之后，火星人用它们装一些燃料给 jyy。所有的瓶子都没有刻度，只 在瓶口标注了容量，第i个瓶子的容量为Vi（Vi 为整数，并且满足1&amp;lt;=Vi&amp;lt;=1000000000 ） 。 火星人比较吝啬，他们并不会把所有的瓶子都装满燃料。他们拿到瓶子后，会跑到燃料 库里鼓捣一通，弄出一小点燃料来交差。jyy当然知道他们会来这一手，于是事先了解了火 星人鼓捣的具体内容。火星人在燃料库里只会做如下的3种操作：1、将某个瓶子装满燃料； 2、将某个瓶子中的燃料全部倒回燃料库；3、将燃料从瓶子a倒向瓶子b，直到瓶子b满 或者瓶子a空。燃料倾倒过程中的损耗可以忽略。火星人拿出的燃料，当然是这些操作能 得到的最小正体积。 jyy知道，对于不同的瓶子组合，火星人可能会被迫给出不同体积的燃料。jyy希望找 到最优的瓶子组合，使得火星人给出尽量多的燃料。
Input 第1行：2个整数N,K， 第2..N 行：每行1个整数，第i+1 行的整数为Vi
Output 仅1行，一个整数，表示火星人给出燃料的最大值。
Sample Input 3 2 3 4 4
Sample Output 4
HINT 选择第2 个瓶子和第 个瓶子，火星人被迫会给出4 体积的容量。
思路:
思路完全错掉了orz&amp;hellip;想去贪心来着&amp;hellip;.
因为自己脑算的例子错掉了&amp;hellip;容量3和容量7的瓶子,能得到的最小是1不是2(因为忘了可以从瓶子中倒回燃料库的操作)&amp;hellip;
样例一错毁所有orz..
正确的思路是,容量为a,b的两个瓶子能鼓捣出的体积一定是ax+by的形式
根据裴蜀定理,ax+by能得到的最小正数解就是(a,b),也就是gcd(a,b)
由此可以推广到多个瓶子,容量分别为x1,x2,&amp;hellip;xn,能得到的最小体积就是gcd(x1,x2..xn)
(能推广的原因还是多说一句吧,假设现在只有两个瓶子x1,x2,称出了gcd(x1,x2),那么其实和只有一个容量为gcd(x1,x2)的瓶子在效果上是等价的)
因为剩下我们要做的就是,统计每个容量的因子统计,找到最大的并且出现此处大于等于k次的&amp;hellip;</description></item><item><title>poj 2115 C Looooops (扩展欧几里得算法)</title><link>http://example.org/2016/10/poj-2115-c-looooops-/</link><pubDate>Thu, 13 Oct 2016 08:11:17 +0000</pubDate><guid>http://example.org/2016/10/poj-2115-c-looooops-/</guid><description>题目链接
题意： 问 循环for ( int i = a ; i !=b; i+=c)在% （2^k）的意义下循环了多少次。
思路：
一般的思路是：
列方程&amp;hellip;
化成扩展欧几里得算法的形式。。。
根据裴蜀定理判断解是否存在&amp;hellip;
然后用对用扩展欧几里得算法求出的X,Y按照题目要求调整。
/* *********************************************** Author :111qqz Created Time :Thu 13 Oct 2016 03:57:06 PM CST File Name :code/poj/2115.cpp ************************************************ */ #include &amp;lt;cstdio&amp;gt; #include &amp;lt;cstring&amp;gt; #include &amp;lt;iostream&amp;gt; #include &amp;lt;algorithm&amp;gt; #include &amp;lt;vector&amp;gt; #include &amp;lt;queue&amp;gt; #include &amp;lt;set&amp;gt; #include &amp;lt;map&amp;gt; #include &amp;lt;string&amp;gt; #include &amp;lt;cmath&amp;gt; #include &amp;lt;cstdlib&amp;gt; #include &amp;lt;ctime&amp;gt; #define fst first #define sec second #define lson l,m,rt&amp;lt;&amp;lt;1 #define rson m+1,r,rt&amp;lt;&amp;lt;1|1 #define ms(a,x) memset(a,x,sizeof(a)) typedef long long LL; #define pi pair &amp;lt; int ,int &amp;gt; #define MP make_pair using namespace std; const double eps = 1E-8; const int dx4[4]={1,0,0,-1}; const int dy4[4]={0,-1,1,0}; const int inf = 0x3f3f3f3f; LL a,b,c,k; LL exgcd(LL a,LL b,LL &amp;amp;x,LL &amp;amp;y) { if (b==0) { x = 1; y = 0; return a; } LL ret = exgcd(b,a%b,x,y); LL tmp = x; x = y; y = tmp - a/b*y; return ret; } int main() { #ifndef ONLINE_JUDGE freopen(&amp;quot;code/in.</description></item><item><title>poj 1061 青蛙的约会 （扩展欧几里得算法（负数的处理））</title><link>http://example.org/2016/10/poj-1061--/</link><pubDate>Thu, 13 Oct 2016 07:48:35 +0000</pubDate><guid>http://example.org/2016/10/poj-1061--/</guid><description>题目链接
题意：两只青蛙初始在数轴的x,y点，单位时间内分别可以向右跳m米和n米，数轴是环型的，长度为L，问两只青蛙能否相遇，以及相遇时跳的次数。
思路：相遇就是同一时间在同一地点。
 那么有方程 x+ Cm = y + Cn + k*L 其中C为跳的次数，k为之间差了L的个数（可以理解为被套圈的圈数）
化简得到 C(m-n) + K*L = y-x.
根据裴蜀定理，该方程有解，当且仅当y-x是gcd(m-n,L)的倍数。
然后根据扩展欧几里得算法，需要注意的是其中可能有负数。
如果a是负数，可以把问题转化成
第二个需要注意的是，扩展欧几里得算法求出的是ax+by=gcd(a,b)的解，x,y还要乘对应的倍数才能得到正确的解。
第三个需要注意的是，跳的次数一定为正，这是隐含条件。
用了上道题用的while去得到第一个大于0的X会TLE
所以其实** X = ( X % gx + gx) %gx**就好。。。？ （其中gx = b/gcd(a,b)）
/* *********************************************** Author :111qqz Created Time :Wed 12 Oct 2016 08:43:02 PM CST File Name :code/poj/1061.cpp ************************************************ */ #include &amp;lt;cstdio&amp;gt; #include &amp;lt;cstring&amp;gt; #include &amp;lt;iostream&amp;gt; #include &amp;lt;algorithm&amp;gt; #include &amp;lt;vector&amp;gt; #include &amp;lt;queue&amp;gt; #include &amp;lt;set&amp;gt; #include &amp;lt;map&amp;gt; #include &amp;lt;string&amp;gt; #include &amp;lt;cmath&amp;gt; #include &amp;lt;cstdlib&amp;gt; #include &amp;lt;ctime&amp;gt; #define fst first #define sec second #define lson l,m,rt&amp;lt;&amp;lt;1 #define rson m+1,r,rt&amp;lt;&amp;lt;1|1 #define ms(a,x) memset(a,x,sizeof(a)) typedef long long LL; #define pi pair &amp;lt; int ,int &amp;gt; #define MP make_pair using namespace std; const double eps = 1E-8; const int dx4[4]={1,0,0,-1}; const int dy4[4]={0,-1,1,0}; const int inf = 0x3f3f3f3f; LL x,y,m,n,L; LL exgcd( LL a,LL b, LL &amp;amp;x,LL &amp;amp;y) { if (b==0) { x = 1LL; y = 0LL; return a; } LL ret = exgcd(b,a%b,x,y); LL tmp = x; x = y; y = tmp - a/b*y; return ret; } int main() { #ifndef ONLINE_JUDGE freopen(&amp;quot;code/in.</description></item><item><title>hdu 2669 Romantic (扩展欧几里得模板题)</title><link>http://example.org/2016/10/hdu-2669/</link><pubDate>Wed, 12 Oct 2016 12:30:21 +0000</pubDate><guid>http://example.org/2016/10/hdu-2669/</guid><description>题目链接
题意：问ax+by=1的一组x&amp;gt;0的解，如果无解输出sorry.
思路：根据裴蜀定理， ax+by=1有解当且gcd(a,b)=1。
然后根据扩展欧几里得算法，我们可以得到一组x,y。需要注意的是，这只是其中一组解。
x,y的通解为：**(x+kgx , y-kgy ） 其中：gx= b/gcd(a,b),gy = a/gcd(a,b),k为任意整数 **
/* *********************************************** Author :111qqz Created Time :Wed 12 Oct 2016 07:30:20 PM CST File Name :code/hdu/2669.cpp ************************************************ */ #include &amp;lt;cstdio&amp;gt; #include &amp;lt;cstring&amp;gt; #include &amp;lt;iostream&amp;gt; #include &amp;lt;algorithm&amp;gt; #include &amp;lt;vector&amp;gt; #include &amp;lt;queue&amp;gt; #include &amp;lt;set&amp;gt; #include &amp;lt;map&amp;gt; #include &amp;lt;string&amp;gt; #include &amp;lt;cmath&amp;gt; #include &amp;lt;cstdlib&amp;gt; #include &amp;lt;ctime&amp;gt; #define fst first #define sec second #define lson l,m,rt&amp;lt;&amp;lt;1 #define rson m+1,r,rt&amp;lt;&amp;lt;1|1 #define ms(a,x) memset(a,x,sizeof(a)) typedef long long LL; #define pi pair &amp;lt; int ,int &amp;gt; #define MP make_pair using namespace std; const double eps = 1E-8; const int dx4[4]={1,0,0,-1}; const int dy4[4]={0,-1,1,0}; const int inf = 0x3f3f3f3f; int a,b; int exgcd( int a,int b,int &amp;amp;x,int &amp;amp;y) { if (b==0) { x = 1; y = 0; return a; } int ret = exgcd(b,a%b,x,y); int tmp = x; x = y; y = tmp - a/b*y; return ret; } int main() { #ifndef ONLINE_JUDGE freopen(&amp;quot;code/in.</description></item><item><title>中国剩余定理(crt)学习笔记</title><link>http://example.org/2016/10/crt/</link><pubDate>Tue, 11 Oct 2016 13:04:54 +0000</pubDate><guid>http://example.org/2016/10/crt/</guid><description>前置技能点：
维基百科_裴蜀定理（贝祖等式）
有整数解时当且仅当_m_是_d_的倍数。裴蜀等式有解时必然有无穷多个整数解，每组解、都称为裴蜀数，可用扩展欧几里得算法求得。
特别地，方程 有整数解当且仅当整数_a_和_b_互素。（kk:因为1(m=1)只可能是1(d=1)的倍数，也就是说gcd(a,b)=1，即a,b互质）
维基百科_扩展欧几里得算法
![ax + by = \gcd(a, b).](https://wikimedia.org/api/rest_v1/media/math/render/svg/72fe07a990a7ce59a499626f59b1ce588c8f6cda) 通常谈到[最大公约数](https://zh.wikipedia.org/wiki/)时，我们都会提到一个非常基本的事实：**给予二整数a、b，必存在有整数x、y使得ax + by = gcd(a,b)**[[1]](https://zh.wikipedia.org/wiki/#cite_note-1)。 有两个数a,b，对它们进行辗转相除法，可得它们的最大公约数——这是众所周知的。然后，收集辗转相除法中产生的式子，倒回去，可以得到ax+by=gcd(a,b)的整数解。
例子：
求二元一次不定方程的整数解。
* 47 = 30 * 1 + 17 * 30 = 17 * 1 + 13 * 17 = 13 * 1 + 4 * 13 = 4 * 3 + 1 然后把它们改写成“余数等于”的形式
* 17 = 47 * 1 + 30 * (-1) //式1 * 13 = 30 * 1 + 17 * (-1) //式2 * 4 = 17 * 1 + 13 * (-1) //式3 * 1 = 13 * 1 + 4 * (-3) 然后把它们**“倒回去”**</description></item></channel></rss>