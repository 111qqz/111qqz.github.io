<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>状压dp on 111qqz的小窝</title><link>http://example.org/tags/%E7%8A%B6%E5%8E%8Bdp/</link><description>Recent content in 状压dp on 111qqz的小窝</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Sat, 22 Aug 2015 15:09:00 +0000</lastBuildDate><atom:link href="http://example.org/tags/%E7%8A%B6%E5%8E%8Bdp/index.xml" rel="self" type="application/rss+xml"/><item><title>bc #52 div 2 B || hdoj 5418 Victor and World(tsp问题,状压dp)</title><link>http://example.org/2015/08/hdoj5418/</link><pubDate>Sat, 22 Aug 2015 15:09:00 +0000</pubDate><guid>http://example.org/2015/08/hdoj5418/</guid><description>比赛的时候一看,tsp么
前些天好像刚写过一个clean robot什么的
然后发现n才16,而m很大..
应该有很多重复的.
那么我们取油费最少的.
然后先做一遍 floyd
之后我写了一个dfs&amp;hellip;TLE 了&amp;hellip;sad
正解是状压dp
虽然没写过状压dp
但是之前写过一道状态压缩的bfs
所以理解起来没有问题.
这道题的做法是:
用dp[i][j]表示当前访问国家的状态为s,要访问的国家为j的时候的最小费用.i是二进制,i的第p位为1表示第p个国家已经访问过了,否则表示没有访问过.
那么状态转移方程则为:dp[i|(1&amp;lt;
初始化的时候d[i][i] =0,其他为inf
dp[0][0] 表示要访问第一个国家且没有访问国人国家的时候的状态,此时花费为0
然后先枚举访问国家的状态,再枚举访问的国家.
/************************************************************************* &amp;gt; File Name: code/bc/#52/rrr1002.cpp &amp;gt; Author: 111qqz &amp;gt; Email: rkz2013@126.com &amp;gt; Created Time: 2015年08月22日 星期六 22时33分20秒 ************************************************************************/ #include&amp;lt;iostream&amp;gt; #include&amp;lt;iomanip&amp;gt; #include&amp;lt;cstdio&amp;gt; #include&amp;lt;algorithm&amp;gt; #include&amp;lt;cmath&amp;gt; #include&amp;lt;cstring&amp;gt; #include&amp;lt;string&amp;gt; #include&amp;lt;map&amp;gt; #include&amp;lt;set&amp;gt; #include&amp;lt;queue&amp;gt; #include&amp;lt;vector&amp;gt; #include&amp;lt;stack&amp;gt; #include&amp;lt;cctype&amp;gt; #define y1 hust111qqz #define yn hez111qqz #define j1 cute111qqz #define ms(a,x) memset(a,x,sizeof(a)) #define lr dying111qqz using namespace std; #define For(i, n) for (int i=0;i&amp;lt;int(n);++i) typedef long long LL; typedef double DB; const int inf = 0x3f3f3f3f; const int N=17; int d[N][N]; int n,m; int dp[(1&amp;lt;&amp;lt;16)+5][N]; void floyd(){ For(k,n){ For(i,n){ For (j,n){ d[i][j] = min ( d[i][j] , d[i][k]+d[k][j]); } } } } void solve() { dp[0][0] = 0; for ( int i = 0 ; i &amp;lt;(1&amp;lt;&amp;lt;n) ; i ++){ for ( int j = 0 ; j &amp;lt; n ;j++){ if (dp[i][j]!</description></item></channel></rss>