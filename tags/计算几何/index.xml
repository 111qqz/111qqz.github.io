<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>计算几何 on Clarity</title><link>https://111qqz.com/tags/%E8%AE%A1%E7%AE%97%E5%87%A0%E4%BD%95/</link><description>Recent content in 计算几何 on Clarity</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><copyright>Copyright © 2008–2018, Steve Francia and the Hugo Authors; all rights reserved.</copyright><lastBuildDate>Thu, 12 Oct 2017 08:26:53 +0000</lastBuildDate><atom:link href="https://111qqz.com/tags/%E8%AE%A1%E7%AE%97%E5%87%A0%E4%BD%95/index.xml" rel="self" type="application/rss+xml"/><item><title>uvalive 7675 | 2016 北京 regional onsite H - A New Ground Heating Device （二分+多个圆面积并）</title><link>https://111qqz.com/2017/10/uvalive-7675/</link><pubDate>Thu, 12 Oct 2017 08:26:53 +0000</pubDate><guid>https://111qqz.com/2017/10/uvalive-7675/</guid><description>
题目链接
题意： 在一个二维平面上，有n个加热设备，每个加热设备加热一个圆形，加热设备需要信号源才可以工作，信号源在原点上，但是高度不确定。假设设备的加热半径是一个与{信号源与设备的距离}有关的表达式。现在想要满足，至少有k个加热设备加热的面积大于s，问信号源的最高高度是多少。
思路： 训练的时候一眼二分，但是求圆并的时候gg了。。毫无思路。
搞定了多个圆面积并。。这题就很easy了。。
需要注意，每次二分的时候，记得初始化圆的d...
/* *********************************************** Author :111qqz File Name :H.cpp ************************************************ */ #include &amp;lt;cstdio&amp;gt; #include &amp;lt;cstring&amp;gt; #include &amp;lt;iostream&amp;gt; #include &amp;lt;algorithm&amp;gt; #include &amp;lt;vector&amp;gt; #include &amp;lt;queue&amp;gt; #include &amp;lt;set&amp;gt; #include &amp;lt;map&amp;gt; #include &amp;lt;string&amp;gt; #include &amp;lt;cmath&amp;gt; #include &amp;lt;cstdlib&amp;gt; #include &amp;lt;ctime&amp;gt; #define PB push_back #define fst first #define sec second #define lson l,m,rt&amp;lt;&amp;lt;1 #define rson m+1,r,rt&amp;lt;&amp;lt;1|1 #define ms(a,x) memset(a,x,sizeof(a)) #define pi pair &amp;lt; int ,int &amp;gt; #define MP make_pair using namespace std; typedef long long LL; typedef unsigned long long ULL; typedef vector &amp;lt;int&amp;gt; VI; const int INF = 0x3f3f3f3f; const double eps = 1e-6; const int MAXN = 1E3+7; const double PI = acos(-1.</description></item><item><title>SPOJ CIRUT - CIRU2 (多个圆交，求交任意次的面积，模板题)</title><link>https://111qqz.com/2017/10/spoj-cirut/</link><pubDate>Thu, 12 Oct 2017 04:47:03 +0000</pubDate><guid>https://111qqz.com/2017/10/spoj-cirut/</guid><description>
题目链接
题意&amp;amp;思路： 给出n个圆
求恰好k个圆相交的面积，k属于1..n
先放个别人的代码。。。
我真是体会到了。。。软件工程这门课的重要性。。。
这代码真是烂得印象深刻。。。几何题全是面向过程？
circle和point 类写在一起。。。感觉所有糟糕的写法这份代码全都占了。。。
/* *********************************************** Author :111qqz Created Time :2017年10月11日 星期三 19时53分30秒 File Name :ciru.cpp ************************************************ */ #include &amp;lt;cstdio&amp;gt; #include &amp;lt;cstring&amp;gt; #include &amp;lt;iostream&amp;gt; #include &amp;lt;algorithm&amp;gt; #include &amp;lt;vector&amp;gt; #include &amp;lt;queue&amp;gt; #include &amp;lt;set&amp;gt; #include &amp;lt;map&amp;gt; #include &amp;lt;string&amp;gt; #include &amp;lt;cmath&amp;gt; #include &amp;lt;cstdlib&amp;gt; #include &amp;lt;ctime&amp;gt; #define PB push_back #define fst first #define sec second #define lson l,m,rt&amp;lt;&amp;lt;1 #define rson m+1,r,rt&amp;lt;&amp;lt;1|1 #define ms(a,x) memset(a,x,sizeof(a)) #define pi pair &amp;lt; int ,int &amp;gt; #define MP make_pair using namespace std; typedef long long LL; typedef unsigned long long ULL; typedef vector &amp;lt;int&amp;gt; VI; const int INF = 0x3f3f3f3f; const double eps = 1e-10; const int MOD = 100000007; const int MAXN = 1E3+7; const double PI = acos(-1.</description></item><item><title>spoj CIRU - The area of the union of circles (多个圆面积并，模板题)</title><link>https://111qqz.com/2017/10/spoj-ciru/</link><pubDate>Wed, 11 Oct 2017 12:36:52 +0000</pubDate><guid>https://111qqz.com/2017/10/spoj-ciru/</guid><description>
题目链接
题意： 多n个圆的面积并。
思路： 发现和求2个圆的完全不一样，具体请参考
SPOJ 8073 The area of the union of circles（计算几何の圆并）（CIRU）
圆的面积并 
格林公式在面积并问题中的应用
（用格林公式搞真是跪烂了。。。。
没有仔细看细节，当成板子好了(我最菜.jpg
将代码写成了自己熟悉的风格。
以及双倍经验题:SPOJ VCIRCLES
/* *********************************************** Author :111qqz Created Time :2017年10月11日 星期三 19时53分30秒 File Name :ciru.cpp ************************************************ */ #include &amp;lt;cstdio&amp;gt; #include &amp;lt;cstring&amp;gt; #include &amp;lt;iostream&amp;gt; #include &amp;lt;algorithm&amp;gt; #include &amp;lt;vector&amp;gt; #include &amp;lt;queue&amp;gt; #include &amp;lt;set&amp;gt; #include &amp;lt;map&amp;gt; #include &amp;lt;string&amp;gt; #include &amp;lt;cmath&amp;gt; #include &amp;lt;cstdlib&amp;gt; #include &amp;lt;ctime&amp;gt; #define PB push_back #define fst first #define sec second #define lson l,m,rt&amp;lt;&amp;lt;1 #define rson m+1,r,rt&amp;lt;&amp;lt;1|1 #define ms(a,x) memset(a,x,sizeof(a)) typedef long long LL; #define pi pair &amp;lt; int ,int &amp;gt; #define MP make_pair using namespace std; const double eps = 1E-8; const int dx4[4]={1,0,0,-1}; const int dy4[4]={0,-1,1,0}; const int inf = 0x3f3f3f3f; const double PI = acos(-1.</description></item><item><title>hdu 1724 Ellipse (辛普森积分模板题)</title><link>https://111qqz.com/2017/10/hdu-1724/</link><pubDate>Mon, 09 Oct 2017 13:33:36 +0000</pubDate><guid>https://111qqz.com/2017/10/hdu-1724/</guid><description>
hdu1724题目链接
题意： Image not found a.warning-link { color: inherit !important; font-weight: inherit !important; text-decoration: underline !important; border-bottom: none !important; } Web path: http://acm.split.hdu.edu.cn/data/images/C61-1005-1.JPG
Disk path: /static/http://acm.split.hdu.edu.cn/data/images/C61-1005-1.JPG
Using Page Bundles: false
求图示区域的面积。
思路： 辛普森积分学习笔记
容易推出被积函数为 f(x)=b_sqrt(1-(x_x/a/a));
/* *********************************************** Author :111qqz Created Time :2017年10月09日 星期一 21时09分36秒 File Name :1724.cpp ************************************************ */ #include &amp;lt;cstdio&amp;gt; #include &amp;lt;cstring&amp;gt; #include &amp;lt;iostream&amp;gt; #include &amp;lt;algorithm&amp;gt; #include &amp;lt;vector&amp;gt; #include &amp;lt;queue&amp;gt; #include &amp;lt;set&amp;gt; #include &amp;lt;map&amp;gt; #include &amp;lt;string&amp;gt; #include &amp;lt;cmath&amp;gt; #include &amp;lt;cstdlib&amp;gt; #include &amp;lt;ctime&amp;gt; #define PB push_back #define fst first #define sec second #define lson l,m,rt&amp;lt;&amp;lt;1 #define rson m+1,r,rt&amp;lt;&amp;lt;1|1 #define ms(a,x) memset(a,x,sizeof(a)) typedef long long LL; #define pi pair &amp;lt; int ,int &amp;gt; #define MP make_pair using namespace std; const double eps = 1E-10; const int dx4[4]={1,0,0,-1}; const int dy4[4]={0,-1,1,0}; const int inf = 0x3f3f3f3f; double a,b,l,r; double dblcmp(double d){ return d&amp;lt;-eps?</description></item><item><title>辛普森积分学习笔记</title><link>https://111qqz.com/2017/10/Simpsons-rule-notes/</link><pubDate>Mon, 09 Oct 2017 13:10:43 +0000</pubDate><guid>https://111qqz.com/2017/10/Simpsons-rule-notes/</guid><description>
16沈阳的阴影还在orz，来学习一下辛普森积分。
参考资料：梯形多步法和辛普森积分
辛普森计算定积分
辛普森积分是一种数值积分方法（然后现在只记得教计算方法的是一个小姐姐，并不记得当时学了什么orz
大概就是用梯形近似计算曲边梯形面积，辛普森积分公式如下： Image not found a.warning-link { color: inherit !important; font-weight: inherit !important; text-decoration: underline !important; border-bottom: none !important; } Web path: https://camo.githubusercontent.com/9e31635a0068b1a145b52c3d0a9c932c6a0f123b/687474703a2f2f696d672e626c6f672e6373646e2e6e65742f3230313630383038313930313231343136
Disk path: /static/https://camo.githubusercontent.com/9e31635a0068b1a145b52c3d0a9c932c6a0f123b/687474703a2f2f696d672e626c6f672e6373646e2e6e65742f3230313630383038313930313231343136
Using Page Bundles: false
下面放代码：
double f(double x){return sin(x)*x;}//这是被积函数 double simpson(double l,double r){return (r-l)*(f(l)+f(r)+4*f((l+r)/2))/6;} double di(double l,double r){//越二分以得到更精确的结果 double m=(l+r)/2; double ans=simpson(l,r); if(sgn(ans-simpson(l,m)-simpson(m,r))==0)return ans; //在误差之内 return di(l,m)+di(m,r); //不再误差之内就继续将区间缩小 } 切了个练手题，慢慢补充总结。
需要注意的是，simpson对精度要求比较高。。。eps开到1E-10才过。。
hdu1724题目链接
hdu1724解题报告
所以问题就在于写出积分公式（如果是多重积分要变成累次积分？orz)</description></item><item><title>BZOJ 3680: 吊打XXX (广义费马点，模拟退火+爬山)</title><link>https://111qqz.com/2016/08/bzoj-3680-xxx-/</link><pubDate>Wed, 31 Aug 2016 13:32:02 +0000</pubDate><guid>https://111qqz.com/2016/08/bzoj-3680-xxx-/</guid><description>
3680: 吊打XXX Time Limit: 10 Sec Memory Limit: 128 MBSec Special Judge Submit: 2043 Solved: 732 [Submit][Status][Discuss]
Description gty又虐了一场比赛，被虐的蒟蒻们决定吊打gty。gty见大势不好机智的分出了n个分身，但还是被人多势众的蒟蒻抓住了。蒟蒻们将 n个gty吊在n根绳子上，每根绳子穿过天台的一个洞。这n根绳子有一个公共的绳结x。吊好gty后蒟蒻们发现由于每个gty重力不同，绳 结x在移动。蒟蒻wangxz脑洞大开的决定计算出x最后停留处的坐标，由于他太弱了决定向你求助。 不计摩擦，不计能量损失，由于gty足够矮所以不会掉到地上。
Input 输入第一行为一个正整数n(1&amp;lt;=n&amp;lt;=10000)，表示gty的数目。 接下来n行,每行三个整数xi，yi，wi，表示第i个gty的横坐标，纵坐标和重力。 对于20%的数据，gty排列成一条直线。 对于50%的数据，1&amp;lt;=n&amp;lt;=1000。 对于100%的数据，1&amp;lt;=n&amp;lt;=10000,-100000&amp;lt;=xi,yi&amp;lt;=100000
Output 输出1行两个浮点数（保留到小数点后3位），表示最终x的横、纵坐标。
Sample Input 3 0 0 1 0 2 1 1 1 1
Sample Output 0.577 1.000
HINT Source By wangxz
思路：
看起来是物理题。。其实就是求广义非费马点。。
也就是带权费马点。
一般的费马点是说，所有点到这个点的距离之和最小。
带权的费马点就是每个点到这个点的距离*权值，和最小。
这道题用到的才是真正的模拟退火！
模拟退火很重要的一部分就是允许有一定概率向不优的方向走，之前写的所谓的“模拟退火”的题目，全都没有体现这一点。
所以那些，其实就是一个爬山法吧。。
而且看到主席如是说...
Image not found a.warning-link { color: inherit !important; font-weight: inherit !</description></item><item><title>hdu 5017 Ellipsoid (模拟退火，计算椭球到定点的最小距离)</title><link>https://111qqz.com/2016/08/hdu-5017-ellipsoid-/</link><pubDate>Wed, 31 Aug 2016 06:51:29 +0000</pubDate><guid>https://111qqz.com/2016/08/hdu-5017-ellipsoid-/</guid><description>
hdu 5017 题目链接
题意：给出椭球方程的6的参数 a,b,c,d,e,f Image not found a.warning-link { color: inherit !important; font-weight: inherit !important; text-decoration: underline !important; border-bottom: none !important; } Web path: http://acm.split.hdu.edu.cn/data/images/C534-1011-1.jpg
Disk path: /static/http://acm.split.hdu.edu.cn/data/images/C534-1011-1.jpg
Using Page Bundles: false
问椭球上的点到原点(0,0,,0)的最小距离是多少。
思路：感觉难点在于，如何保证搜到的点一直在椭球上。
一开始我考虑到了用椭球的参数方程。。。。然后发现不记得是什么了2333
然后看了题解，发现比较巧妙的做法是，只搜索x,y，然后从椭球方程中解出z。
x,y确定以后，椭球方程就变成了一个关于z的一元二次方程，可解。
由于是要求距离原点的最小距离，而现在可能得到的两个解是关于xoy平面对称的，只有z坐标不同，因此我们取距离原点近的那个z。
以及，感觉在平面上搜4个方向就好。。。没必要8个方向。。？
Image not found a.warning-link { color: inherit !important; font-weight: inherit !important; text-decoration: underline !important; border-bottom: none !important; } Web path: https://111qqz.com/wordpress/wp-content/uploads/2016/08/2016-08-31-14-49-34-的屏幕截图.png
Disk path: /static/https://111qqz.com/wordpress/wp-content/uploads/2016/08/2016-08-31-14-49-34-的屏幕截图.png
Using Page Bundles: false</description></item><item><title>poj 1385 Lifting the Stone (多边形的重心)</title><link>https://111qqz.com/2016/08/poj-1385/</link><pubDate>Mon, 29 Aug 2016 03:31:15 +0000</pubDate><guid>https://111qqz.com/2016/08/poj-1385/</guid><description>
poj 1385 题目链接
题意：求多边形的重心。
思路：
抄模板（逃
嘛。。三角形的重心是三个点坐标的平均数。。。
多边形的重心其实就是先求三角形的重心然后再加权平均一下就好了。。。权值是面积比。
#include &amp;lt;cstdio&amp;gt; #include &amp;lt;cstring&amp;gt; #include &amp;lt;iostream&amp;gt; #include &amp;lt;algorithm&amp;gt; #include &amp;lt;vector&amp;gt; #include &amp;lt;queue&amp;gt; #include &amp;lt;set&amp;gt; #include &amp;lt;map&amp;gt; #include &amp;lt;string&amp;gt; #include &amp;lt;cmath&amp;gt; #include &amp;lt;cstdlib&amp;gt; #include &amp;lt;ctime&amp;gt; #define fst first #define sec second #define lson l,m,rt&amp;lt;&amp;lt;1 #define rson m+1,r,rt&amp;lt;&amp;lt;1|1 #define ms(a,x) memset(a,x,sizeof(a)) typedef long long LL; #define pi pair &amp;lt; int ,int &amp;gt; #define MP make_pair using namespace std; const double eps = 1E-8; const int dx4[4]={1,0,0,-1}; const int dy4[4]={0,-1,1,0}; const int inf = 0x3f3f3f3f; const int N=1E6+7; int dblcmp(double d) { return d &amp;lt; -eps ?</description></item><item><title>poj 1380 Equipment Box （简单几何）</title><link>https://111qqz.com/2016/08/poj-1380/</link><pubDate>Sun, 28 Aug 2016 13:03:22 +0000</pubDate><guid>https://111qqz.com/2016/08/poj-1380/</guid><description>
题目链接
题意：问一个小矩形能否放在一个大矩形中，给定两个矩形的尺寸。
思路：主要是斜着放比较难判断。学弟貌似写了离散化角度旋转。。。我的做法是。。直接考虑对角线。。。因为我认为对角线是最有可能放进去的位置。
#include &amp;lt;cstdio&amp;gt; #include &amp;lt;cstring&amp;gt; #include &amp;lt;iostream&amp;gt; #include &amp;lt;algorithm&amp;gt; #include &amp;lt;vector&amp;gt; #include &amp;lt;queue&amp;gt; #include &amp;lt;set&amp;gt; #include &amp;lt;map&amp;gt; #include &amp;lt;string&amp;gt; #include &amp;lt;cmath&amp;gt; #include &amp;lt;cstdlib&amp;gt; #include &amp;lt;ctime&amp;gt; #define fst first #define sec second #define lson l,m,rt&amp;lt;&amp;lt;1 #define rson m+1,r,rt&amp;lt;&amp;lt;1|1 #define ms(a,x) memset(a,x,sizeof(a)) typedef long long LL; #define pi pair &amp;lt; int ,int &amp;gt; #define MP make_pair using namespace std; const double eps = 1E-8; const int dx4[4]={1,0,0,-1}; const int dy4[4]={0,-1,1,0}; const int inf = 0x3f3f3f3f; int dblcmp(double d) {return d&amp;lt;-eps?</description></item><item><title>BZOJ 1656: [Usaco2006 Jan] The Grove 树木(神奇的bfs之射线法)</title><link>https://111qqz.com/2016/04/bzoj-1656/</link><pubDate>Fri, 15 Apr 2016 07:23:53 +0000</pubDate><guid>https://111qqz.com/2016/04/bzoj-1656/</guid><description>
1656: [Usaco2006 Jan] The Grove 树木 Time Limit: 5 Sec Memory Limit: 64 MB Submit: 143 Solved: 88 [Submit][Status][Discuss]
Description The pasture contains a small, contiguous grove of trees that has no 'holes' in the middle of the it. Bessie wonders: how far is it to walk around that grove and get back to my starting position? She's just sure there is a way to do it by going from her start location to successive locations by walking horizontally, vertically, or diagonally and counting each move as a single step.</description></item><item><title>codeforces #346 div 2 D. Bicycle Race (思维，计算几何，公式)</title><link>https://111qqz.com/2016/03/codeforces-346-div-2-d-bicycle-race-/</link><pubDate>Thu, 31 Mar 2016 09:02:23 +0000</pubDate><guid>https://111qqz.com/2016/03/codeforces-346-div-2-d-bicycle-race-/</guid><description>
题目链接 题意：给出n+1个点，每次由i点到i+1点，每段线段之间保证不同向或者反向，第一个点和最后一个点保证重合。路径围城的封闭图形中间都是水，问有多少个危险点，使得如果在这个点忘记转弯就会掉进水里。
思路：搞了半天没搞出来qaq
From the track description follows that Maria moves the way that the water always located to the right from her, so she could fall into the water only while turning left. To check if the turn is to the left, let's give every Maria's moves directions a number: moving to the north — 0, moving to the west — 1, to the south — 2 and to the east — 3.</description></item><item><title>bzoj 1610 [Usaco2008 Feb]Line连线游戏 (计算几何)</title><link>https://111qqz.com/2016/02/bzoj1610/</link><pubDate>Sat, 27 Feb 2016 18:35:59 +0000</pubDate><guid>https://111qqz.com/2016/02/bzoj1610/</guid><description>
http://www.lydsy.com/JudgeOnline/problem.php?id=1610 题意：给出n个点，问有多少条直线，这些之间之间都不平行。 思路：求斜率（注意考虑斜率不存在），看有多少种斜率。 妈蛋。。。。斜率不存在是横坐标相等啊，不是纵坐标啊。。。蠢哭了好么。。。。。。
妈蛋。。。。斜率不存在是横坐标相等啊，不是纵坐标啊。。。蠢哭了好么。。。。。。
妈蛋。。。。斜率不存在是横坐标相等啊，不是纵坐标啊。。。蠢哭了好么。。。。。。
Image not found a.warning-link { color: inherit !important; font-weight: inherit !important; text-decoration: underline !important; border-bottom: none !important; } Web path: https://111qqz.com/wordpress/wp-content/uploads/2016/02/选区_024.png
Disk path: /static/https://111qqz.com/wordpress/wp-content/uploads/2016/02/选区_024.png
Using Page Bundles: false
太他妈惨了。。。。
Image not found a.warning-link { color: inherit !important; font-weight: inherit !important; text-decoration: underline !important; border-bottom: none !important; } Web path: http://
Disk path: /static/http://
Using Page Bundles: false</description></item><item><title>codeforces #339 div 2 C. Peter and Snow Blower</title><link>https://111qqz.com/2016/02/cf614c/</link><pubDate>Wed, 17 Feb 2016 15:54:12 +0000</pubDate><guid>https://111qqz.com/2016/02/cf614c/</guid><description>
http://codeforces.com/contest/614/problem/C 题意：给一个多边形和多边形外一定点，多边形绕定点旋转，问多边形扫过的面积。 思路：简单计算几何，找到多边形距离定点的最大和最小距离R和r,答案就是(R^2-R^2)*PI 需要注意的是：最大距离一定是从某点上取得，但是最小距离可能不在顶点上，而在某条边上。
/* *********************************************** Author :111qqz Created Time :2016年02月16日 星期二 16时58分59秒 File Name :code/cf/problem/614C.cpp ************************************************ */ #include &amp;lt;cstdio&amp;gt; #include &amp;lt;cstring&amp;gt; #include &amp;lt;iostream&amp;gt; #include &amp;lt;algorithm&amp;gt; #include &amp;lt;vector&amp;gt; #include &amp;lt;queue&amp;gt; #include &amp;lt;set&amp;gt; #include &amp;lt;map&amp;gt; #include &amp;lt;string&amp;gt; #include &amp;lt;cmath&amp;gt; #include &amp;lt;cstdlib&amp;gt; #include &amp;lt;ctime&amp;gt; #define fst first #define sec second #define lson l,m,rt&amp;lt;&amp;lt;1 #define rson m+1,r,rt&amp;lt;&amp;lt;1|1 #define ms(a,x) memset(a,x,sizeof(a)) typedef long long LL; #define pi pair &amp;lt; int ,int &amp;gt; #define MP make_pair using namespace std; const double eps = 1E-8; const int dx4[4]={1,0,0,-1}; const int dy4[4]={0,-1,1,0}; const int inf = 0x3f3f3f3f; const int N = 1E5+7; const double PI = acos(-1.</description></item><item><title>codeforces 14 C. Four Segments</title><link>https://111qqz.com/2015/12/codeforces-14-c-four-segments/</link><pubDate>Tue, 29 Dec 2015 09:29:57 +0000</pubDate><guid>https://111qqz.com/2015/12/codeforces-14-c-four-segments/</guid><description>
http://codeforces.com/problemset/problem/14/C 题意：给出四条边的坐标，问能否形成一个边与坐标轴平行的矩形。边可能退化成点。 思路：首先第一步，检查有没有边退化成点以及是否有不平行的边。
第二步，检查两个方向的边是否各有两条。。
第三步，将所有点的坐标排序。。然后看8个点是否会因为重合而变成4个.。
/* *********************************************** Author :111qqz Created Time :2015年12月29日 星期二 16时28分28秒 File Name :code/cf/problem/14C.cpp ************************************************ */ #include &amp;lt;cstdio&amp;gt; #include &amp;lt;cstring&amp;gt; #include &amp;lt;iostream&amp;gt; #include &amp;lt;algorithm&amp;gt; #include &amp;lt;vector&amp;gt; #include &amp;lt;queue&amp;gt; #include &amp;lt;set&amp;gt; #include &amp;lt;map&amp;gt; #include &amp;lt;string&amp;gt; #include &amp;lt;cmath&amp;gt; #include &amp;lt;cstdlib&amp;gt; #include &amp;lt;ctime&amp;gt; #define fst first #define sec second #define lson l,m,rt&amp;lt;&amp;lt;1 #define rson m+1,r,rt&amp;lt;&amp;lt;1|1 #define ms(a,x) memset(a,x,sizeof(a)) typedef long long LL; #define pi pair &amp;lt; int ,int &amp;gt; #define MP make_pair using namespace std; const double eps = 1E-8; const int dx4[4]={1,0,0,-1}; const int dy4[4]={0,-1,1,0}; const int inf = 0x3f3f3f3f; int a,b,c,d; int l[10]; int cnt; struct point { int x,y; bool operator &amp;lt;(point p)const { if (x&amp;lt;p.</description></item><item><title>hdu 1221 Rectangle and Circle</title><link>https://111qqz.com/2015/12/hdu-1221-rectangle-and-circle/</link><pubDate>Mon, 21 Dec 2015 13:59:05 +0000</pubDate><guid>https://111qqz.com/2015/12/hdu-1221-rectangle-and-circle/</guid><description>
http://acm.hdu.edu.cn/showproblem.php?pid=1221 题意：问圆和矩形是否相交 思路：主要特殊的包含情况，然后判断与线段相交。
/* *********************************************** Author :111qqz Created Time :2015年12月21日 星期一 21时38分22秒 File Name :code/hdu/rr1221.cpp ************************************************ */ #include &amp;lt;iostream&amp;gt; #include &amp;lt;string.h&amp;gt; #include &amp;lt;stdio.h&amp;gt; #include &amp;lt;algorithm&amp;gt; #include &amp;lt;cmath&amp;gt; #define eps 1e-8 using namespace std; struct point { double x; double y; }circle,a,b,c,d; double r; double dis(point &amp;amp;a,point &amp;amp;b) { return sqrt((a.x-b.x)*(a.x-b.x)+(a.y-b.y)*(a.y-b.y)); } bool ok() { if(dis(a,circle)&amp;lt;r &amp;amp;&amp;amp; dis(b,circle) &amp;lt;r &amp;amp;&amp;amp; dis(c,circle)&amp;lt;r &amp;amp;&amp;amp; dis(d,circle) &amp;lt;r) return false; if(circle.x&amp;gt;=a.x &amp;amp;&amp;amp; circle.x&amp;lt;=b.x) { if(fabs(circle.y-a.y) &amp;lt;= r || fabs(circle.</description></item><item><title>codeforces 560 C. Gerald's Hexagon (思维，几何)</title><link>https://111qqz.com/2015/08/codeforces560c-geraldshexagon/</link><pubDate>Sun, 16 Aug 2015 23:28:00 +0000</pubDate><guid>https://111qqz.com/2015/08/codeforces560c-geraldshexagon/</guid><description>
题意：给定一个六边形的六条边的长，问能分割成多少个单位正三角形．
分割不好办，那我们就反着来，先补成一个包含这个六边形的正三角形．
对于边长为a的正三角形，显然我们可以分割成a*a个单位正三角形
大正三角形的边长为连续的三条边的和
而要减掉的三个小三角形的边长为与之前连续的三条边的起始边的序号的奇偶性相同的三条边．
就是说如果求和的时候求的是前三条边，那么三个要减掉的小三角形的边长就是第一，三，五条边．
如果求和的时候求的是后三条边，那么三个要减掉的小三角形的边长就是第二，第四，第六条边．
/************************************************************************* &amp;gt; File Name: code/#313/C.cpp &amp;gt; Author: 111qqz &amp;gt; Email: rkz2013@126.com &amp;gt; Created Time: 2015年08月17日 星期一 07时13分54秒 ************************************************************************/ #include&amp;lt;iostream&amp;gt; #include&amp;lt;iomanip&amp;gt; #include&amp;lt;cstdio&amp;gt; #include&amp;lt;algorithm&amp;gt; #include&amp;lt;cmath&amp;gt; #include&amp;lt;cstring&amp;gt; #include&amp;lt;string&amp;gt; #include&amp;lt;map&amp;gt; #include&amp;lt;set&amp;gt; #include&amp;lt;queue&amp;gt; #include&amp;lt;vector&amp;gt; #include&amp;lt;stack&amp;gt; #define y0 abc111qqz #define y1 hust111qqz #define yn hez111qqz #define j1 cute111qqz #define tm crazy111qqz #define lr dying111qqz using namespace std; #define REP(i, n) for (int i=0;i&amp;lt;int(n);++i) typedef long long LL; typedef unsigned long long ULL; const int inf = 0x7fffffff; int main() { int a[10]; int b[5]; for ( int i = 1 ; i &amp;lt;= 6 ; i++) { cin&amp;gt;&amp;gt;a[i]; } memset(b,0,sizeof(b)); for ( int i = 1 ; i &amp;lt;= 6 ; i++) { if (i&amp;lt;=3) { b[0] = b[0] + a[i] ; } if (i%2==1) { b[i/2+1] = a[i]; } } int ans; ans = b[0]*b[0]-b[1]*b[1]-b[2]*b[2]-b[3]*b[3]; cout&amp;lt;&amp;lt;ans&amp;lt;&amp;lt;endl; return 0; }</description></item><item><title>hdoj 2436 Collision Detection</title><link>https://111qqz.com/2015/07/hdoj2436/</link><pubDate>Fri, 31 Jul 2015 20:16:00 +0000</pubDate><guid>https://111qqz.com/2015/07/hdoj2436/</guid><description>
Collision Detection **Time Limit: 5000/1000 MS (Java/Others) Memory Limit: 32768/32768 K (Java/Others) Total Submission(s): 1207 Accepted Submission(s): 367 **
Problem Description
 In physical simulations, video games and computational geometry, collision detection involves algorithms for checking for collision, i.e. intersection, of two given objects. Collision detection algorithms are a basic component of 3D video games. Without them, characters could go through walls and other obstacles. Here comes an interesting problem, given a ball and a cuboid, you need to detect whether they collide.</description></item><item><title>hdu 4082 I Hou Yi's secret （计算几何）</title><link>https://111qqz.com/2015/07/hdu4082/</link><pubDate>Wed, 22 Jul 2015 08:53:00 +0000</pubDate><guid>https://111qqz.com/2015/07/hdu4082/</guid><description>
http://acm.hust.edu.cn/vjudge/contest/view.action?cid=83295#problem/I
最多18个点，选3个点，能够成的三角形不超过1000个，O(n2)暴力就可以。
思路就是枚举三个点点，对于每一个构成的三角形，把这个三角形的最小角和次小角存起来。
然后枚举三角形，判断是否有两个三角形的最小角和次小角分别对应相等。
需要注意的是题目中问的是相似三角形的最大个数
如果A B 相似 C D 相似，但是B C 不相似，答案应该是2.
还有三角形自身和自身是相似的。
一开始求角度的时候只求了cos值，忘了求下acos了。
需要注意的是，枚举的到时候，三个点可能共线，这个还挺好，题目中说的是“** you may get a triangle**”
may算是提示了
如果共线，就不能构成三角形，何谈相似？
我共线的判断是用斜率搞的，特判下斜率不存在的情况（三个点的横坐标都相同）
然后又交，又WA....妈蛋。。。
然后想，会不会是他射到了同一个点上？
不管多少次射到同一个点上，就只会出现一个hole，也就算作一个点。
于是判重。
判重还没写全。
一开始只把因为重复而不能构成三角形的情况给cut掉了
就是枚举的三个点有至少两个一样，这个时候实际上只有两个点，所以不能够成三角形。
但是马上就发现，对于能构成的三角形的情况，一个点重复了几次，就算了几次，而实际上应该只算一次。
所以改在枚举之前判重。
至于精度问题，我是没遇到。。。
相等都是写成&amp;lt;=eqs 的形式了。。。
注意是fabs而不是abs
最后终于A了。
1 2 3 4 /* *********************************************** 5Author :111qqz 6Created Time :2016年03月03日 星期四 14时43分22秒 7File Name :code/hdu/4082.cpp 8************************************************ */ 9 10 #include&amp;lt;iostream&amp;gt;11 #include&amp;lt;iomanip&amp;gt;12 #include&amp;lt;cstdio&amp;gt;13 #include&amp;lt;algorithm&amp;gt;14 #include&amp;lt;cmath&amp;gt;15 #include&amp;lt;cstring&amp;gt;16 #include&amp;lt;string&amp;gt;17 #include&amp;lt;map&amp;gt;18 #include&amp;lt;set&amp;gt;19 #include&amp;lt;queue&amp;gt;20 #include&amp;lt;vector&amp;gt;21 #include&amp;lt;stack&amp;gt;22 #define y0 abc111qqz 23 #define y1 hust111qqz 24 #define yn hez111qqz 25 #define j1 cute111qqz 26 #define tm crazy111qqz 27 #define lr dying111qqz 28 using namespace std; 29 #define REP(i, n) for (int i=0;i&amp;lt;int(n);++i) 30 typedef long long LL; 31 typedef unsigned long long ULL; 32 const double eqs = 1E-6; 33 const int N = 25; 34 const int inf = 0x7fffffff; 35 int x[N],y[N]; 36 int n; 37 double an[2000][5]; 38 struct Q 39 { 40 int xx,yy; 41 }q[N]; 42 double dis(int a,int b) 43 { 44 double res; 45 res = (x[a]-x[b])*(x[a]-x[b])+(y[a]-y[b])*(y[a]-y[b]); 46 res = sqrt(res); 47 return res; 48 } 49 double angle(double a,double b,double c) 50 { 51 double res; 52 res = (b*b+c*c-a*a)/(2*b*c); 53 // cout&amp;lt;&amp;lt;a&amp;lt;&amp;lt;&amp;#34; &amp;#34;&amp;lt;&amp;lt;b&amp;lt;&amp;lt;&amp;#34; &amp;#34;&amp;lt;&amp;lt;c&amp;lt;&amp;lt;&amp;#34; &amp;#34;&amp;lt;&amp;lt;res&amp;lt;&amp;lt;endl; 54 res = acos(res); 55 return res; 56 } 57 58 bool cmp(Q a,Q b) 59 { 60 if (a.</description></item><item><title>poj 2398 Toy Storage (计算几何,判断点和线段关系)</title><link>https://111qqz.com/2015/07/poj2398/</link><pubDate>Tue, 21 Jul 2015 13:13:00 +0000</pubDate><guid>https://111qqz.com/2015/07/poj2398/</guid><description>
http://poj.org/problem?id=2398
题意大概是说将一个盒子用n个board分成n+1 部分
然后往里面放toy,给定盒子,board,和toy的坐标
问所有的toy放完后,有多少部分中有t个toy;
简单计算几何
需要判断的是点和直线的关系.
判断 某一点在直线左右侧
左右方向是相对前进方向的,只要指定了前进方向就可以知道左右(比如指定前进方向是从直线的起点到终点).判断点在直线的左侧还是右侧是计算几何里面的一个最基本算法.使用矢量来判断.
定义：平面上的三点P1(x1,y1),P2(x2,y2),P3(x3,y3)的面积量：
**
S(P1,P2,P3)=|y1 y2 y3|= (x1-x3)(y2-y3)-(y1-y3)(x2-x3)
当P1P2P3逆时针时S为正的，当P1P2P3顺时针时S为负的。
令矢量的起点为A，终点为B，判断的点为C，
如果S（A，B，C）为正数，则C在矢量AB的左侧；
如果S（A，B，C）为负数，则C在矢量AB的右侧；
如果S（A，B，C）为0，则C在直线AB上。**
1 2 3 4 5 6 /************************************************************************* 7&amp;gt; File Name: code/poj/2398.cpp 8&amp;gt; Author: 111qqz 9&amp;gt; Email: rkz2013@126.com 10&amp;gt; Created Time: 2015年11月08日 星期日 10时04分32秒 11************************************************************************/ 12 #include&amp;lt;iostream&amp;gt;13 #include&amp;lt;iomanip&amp;gt;14 #include&amp;lt;cstdio&amp;gt;15 #include&amp;lt;algorithm&amp;gt;16 #include&amp;lt;cmath&amp;gt;17 #include&amp;lt;cstring&amp;gt;18 #include&amp;lt;string&amp;gt;19 #include&amp;lt;map&amp;gt;20 #include&amp;lt;set&amp;gt;21 #include&amp;lt;queue&amp;gt;22 #include&amp;lt;vector&amp;gt;23 #include&amp;lt;stack&amp;gt;24 using namespace std; 25 #define REP(i, n) for (int i=0;i&amp;lt;int(n);++i) 26 typedef long long LL; 27 typedef unsigned long long ULL; 28 const int N=2E3+5; 29 struct node 30 { 31 int x,y; 32 }; 33 struct node rec,rec2; 34 struct node par[N],par2[N]; 35 struct node toy[N]; 36 int ans[N],cnt[N]; 37 int n,m; 38 bool judge(node p1,node p2,node p3) //判断点是否在直线的[右侧!</description></item><item><title>hdu 5120 - Intersection</title><link>https://111qqz.com/2015/02/hdu5120/</link><pubDate>Thu, 19 Feb 2015 07:22:00 +0000</pubDate><guid>https://111qqz.com/2015/02/hdu5120/</guid><description>
题意：求两个相等的圆环的相交的面积.... 简单计算几何+容斥原理？ 扇形面积公式记错调了半天2333333333 这题不难...倒是从学长那里收获了几点关于代码规范的问题... 听说了学长在北京区域赛时把PI定义错了一位结果一直WA的教训.... 以后还是写acos(-1)吧 局部变量和全局变量因为【想怎么其变量名想得整个人都不好了】就起成了一样的...被学长给了差评。 哦，对！还有一个就是发现了cmath库里有一个奇葩的函数名叫y1.。。。。。。。 —————————————————————————————————————————————— 竟然CE了 提示 error:pow(int,int) is ambiguous 看来我对语言的掌握程度还是不行呀.....
&amp;quot;就是一个函数声明为pow(double, double)你必须传两个double参数进去。但你传int也可以，int会转型会double，但c++有重载。声明了两个函数pow(double, double)，pow(long long, double),你传两个int进去编译器不知道把int转为double还是转为long long&amp;quot; &amp;quot;解决办法是把int转型成double (xxx) 或者long long (xxx)&amp;quot; 也可以 简单粗暴的xxx.0
(int,int)-&amp;gt;(double,int)?(double,double)
1 2 3 #include &amp;lt;iostream&amp;gt;4 #include &amp;lt;cmath&amp;gt;5 #include &amp;lt;iomanip&amp;gt;6 7 using namespace std; 8 9 int t,tt; 10 int rr,RR,x11,x22,y11,y22; 11 double ans; 12 const double PI=acos(-1); 13 const double C=10e-6; 14 double area(int x1,int y1,int x2,int y2,int R,int r); 15 int main() 16 { 17 cin&amp;gt;&amp;gt;t; 18 tt=t; 19 while (t--) 20 { 21 cin&amp;gt;&amp;gt;rr&amp;gt;&amp;gt;RR; 22 cin&amp;gt;&amp;gt;x11&amp;gt;&amp;gt;y11&amp;gt;&amp;gt;x22&amp;gt;&amp;gt;y22; 23 ans=area(x11,y11,x22,y22,RR,RR)-2*area(x11,y11,x22,y22,RR,rr)+ 24 area(x11,y11,x22,y22,rr,rr); 25 cout&amp;lt;&amp;lt;&amp;#34;Case #&amp;#34;&amp;lt;&amp;lt;tt-t&amp;lt;&amp;lt;&amp;#34;: &amp;#34; 26 &amp;lt;&amp;lt;fixed&amp;lt;&amp;lt;setprecision(6)&amp;lt;&amp;lt;ans&amp;lt;&amp;lt;endl; 27 } 28 return 0; 29 } 30 double area(int x1,int y1,int x2,int y2,int R,int r) 31 { 32 double d; 33 double A,a; 34 double st; 35 d=sqrt((x1-x2)*(x1-x2)+(y1-y2)*(y1-y2)); 36 if (d&amp;gt;=r+R) 37 return 0; 38 if (R-r&amp;gt;=d) 39 return r*r*PI; 40 A=acos((R*R+d*d-r*r)/(2.</description></item></channel></rss>