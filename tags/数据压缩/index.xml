<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>数据压缩 on Clarity</title><link>https://111qqz.com/tags/%E6%95%B0%E6%8D%AE%E5%8E%8B%E7%BC%A9/</link><description>Recent content in 数据压缩 on Clarity</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><copyright>Copyright © 2008–2018, Steve Francia and the Hugo Authors; all rights reserved.</copyright><lastBuildDate>Wed, 15 Mar 2017 02:55:56 +0000</lastBuildDate><atom:link href="https://111qqz.com/tags/%E6%95%B0%E6%8D%AE%E5%8E%8B%E7%BC%A9/index.xml" rel="self" type="application/rss+xml"/><item><title>压缩算法初探（科普向，转载）</title><link>https://111qqz.com/2017/03/overview-of-compression-algorithms/</link><pubDate>Wed, 15 Mar 2017 02:55:56 +0000</pubDate><guid>https://111qqz.com/2017/03/overview-of-compression-algorithms/</guid><description>
参考链接
简要概述原理： 每个文件都由各种不同代码组成，比如01代码。这类文件只有数字0与1组合。 压缩原理就是 【通过寻找其中的规律，简化数字的排列】。 比如 00000110001111111111 可以简化成 5个0,2个1,3个0,10个1的排列 100000000000 可以简化成数学的 10^10
至于@yskin 说 没见过2G压缩到十几兆的。 实际上在极限压缩方式下其实28.1G压到25.8M都可以。 &amp;lt;img src=&amp;quot;https://pic1.zhimg.com/893534a767ddb047cc04dd66e2a43900_b.jpg&amp;quot; data-rawwidth=&amp;quot;773&amp;quot; data-rawheight=&amp;quot;235&amp;quot; class=&amp;quot;origin_image zh-lightbox-thumb&amp;quot; width=&amp;quot;773&amp;quot; data-original=&amp;quot;https://pic1.zhimg.com/893534a767ddb047cc04dd66e2a43900_r.jpg&amp;quot;&amp;gt;附下载 Image not found a.warning-link { color: inherit !important; font-weight: inherit !important; text-decoration: underline !important; border-bottom: none !important; } Web path: https://pic1.zhimg.com/893534a767ddb047cc04dd66e2a43900_b.jpg
Disk path: /static/https://pic1.zhimg.com/893534a767ddb047cc04dd66e2a43900_b.jpg
Using Page Bundles: false
附下载 2^31-1 [AviSynth 16x16 60.000fps AVC-Lossless-yuv420p8]__
打开看后基本都能理解这个压缩的大概原理了。
下面是几种常见文件压缩算法原理介绍：
字典算法
字典算法是最为简单的压缩算法之一。它是把文本中出现频率比较多的单词或词汇组合做成一个对应的字典列表，并用特殊代码来表示这个单词或词汇。例如： 有字典列表： 00=Chinese 01=People 02=China 源文本：I am a Chinese people,I am from China 压缩后的编码为：I am a 00 01,I am from 02。压缩编码后的长度显著缩小，这样的编码在SLG游戏等专有名词比较多的游戏中比较容易出现，比如《SD高达》。 固定位长算法（Fixed Bit Length Packing）</description></item></channel></rss>