<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>后缀自动机 on 111qqz的小窝</title><link>https://111qqz.com/tags/%E5%90%8E%E7%BC%80%E8%87%AA%E5%8A%A8%E6%9C%BA/</link><description>Recent content in 后缀自动机 on 111qqz的小窝</description><generator>Hugo -- gohugo.io</generator><language>en</language><copyright>Copyright © 2012-2022 all rights reserved.</copyright><lastBuildDate>Mon, 13 Nov 2017 11:03:24 +0000</lastBuildDate><atom:link href="https://111qqz.com/tags/%E5%90%8E%E7%BC%80%E8%87%AA%E5%8A%A8%E6%9C%BA/index.xml" rel="self" type="application/rss+xml"/><item><title>codeforces 123D. String(后缀自动机)</title><link>https://111qqz.com/2017/11/codeforces-123d/</link><pubDate>Mon, 13 Nov 2017 11:03:24 +0000</pubDate><guid>https://111qqz.com/2017/11/codeforces-123d/</guid><description>
题目链接：http://codeforces.com/problemset/problem/123/D
题意： 如果字符串y在字符串x中出现n次，那么F(x,y)=n*(n+1)/2
现在给一个字符串，求所有的F(s,x)的和，x为字符串的所有不相同的子串．
思路： 这道题可以考虑用后缀数组做，麻烦一点：codeforces-123D-解题报告(SA)
直接SAM
right[v]就是SAM上状态表示的所有字符串出现的次数。
那么每个状态的答案就是right[v](right[v]+1)/2(st[v].len-st[st[v].link].len)
累加即可。
/* *********************************************** Author :111qqz Created Time :2017年11月08日 星期三 18时50分18秒 File Name :3518.cpp ************************************************ */ //#include &amp;lt;bits/stdc++.h&amp;gt; #include &amp;lt;cstring&amp;gt; #include &amp;lt;string&amp;gt; #include &amp;lt;algorithm&amp;gt; #include &amp;lt;iostream&amp;gt; #include &amp;lt;cstdio&amp;gt; #include &amp;lt;cmath&amp;gt; #define PB push_back #define fst first #define sec second #define lson l,m,rt&amp;lt;&amp;lt;1 #define rson m+1,r,rt&amp;lt;&amp;lt;1|1 #define ms(a,x) memset(a,x,sizeof(a)) typedef long long LL; #define pi pair &amp;lt; int ,int &amp;gt; #define MP make_pair using namespace std; const double eps = 1E-8; const int dx4[4]={1,0,0,-1}; const int dy4[4]={0,-1,1,0}; const int inf = 0x3f3f3f3f; #define MAXALP 55 //还有大写字母orz int k; struct state { int len, link, nxt[MAXALP]; }; const int N =1E5+7; state st[N*2]; int sz, last,rt; char s[N]; int Right[2*N]; int cnt[2*N],rk[2*N];//for radix sort int dp[2*N],lazy[2*N]; void sa_init() { sz = 0; last = rt = ++sz; st[1].</description></item><item><title>poj 3415 Common Substrings (后缀自动机+parent树上的lazy标记)</title><link>https://111qqz.com/2017/11/poj-3415/</link><pubDate>Sun, 12 Nov 2017 12:40:24 +0000</pubDate><guid>https://111qqz.com/2017/11/poj-3415/</guid><description>
http://poj.org/problem?id=3415
题意： 给出两个字符串，问公共长度大于等于k的子串个数（只要两个串的位置不同就认为是不同）
思路： 考虑SAM的性质。
SAM上的一个节点所能接受的本质不同的子串个数是**st[v].len - st[st[v].link].len**
而这些子串，都出现了right[v]次，因为不同子串的个数就是**(st[v].len-st[st[v].link].len)right[v]*
现在有了限制条件，要求长度大于等于k.
没有限制的话，SAM上的一个节点所能接受的字符串的长度范围是在[st[st[v].link].len+1,st[v].len]
那么现在范围其实就变成了**[MX,st[v].len],其中MX = max{st[st[v].link].len+1,k}**
对于A串构建SAM，然后B串在SAM上运行
考虑对于SAM的某个状态，B串此时的最大匹配长度为len，那么len&amp;gt;=MX时，满足条件的字符串的范围就变成了**[MX,len] **
len&amp;lt;MX时无贡献。
所以该状态(v)对答案的就是 (len-MX+1)*right[v]
然而这还不算完，和之前的LCS2一样，如果SAM上的一个节点能匹配字符串B的长度大于等于k，那么该节点的祖先节点（父亲节点，父亲的父亲的节点...)
能匹配的字符串B的长度也都大于等于k...
如果我们一边匹配一边沿着parent树自底向上传递的话...复杂度n^2,一首凉凉送给自己
但是正常人会这样？.jpg
我们先打个标记，最后沿parent树自底向上把标记传递上去就行了。。
需要注意的是，此题的字符集是大小写字母都会包含...RE了2发orz
/* *********************************************** Author :111qqz Created Time :2017年11月08日 星期三 18时50分18秒 File Name :3518.cpp ************************************************ */ //#include &amp;lt;bits/stdc++.h&amp;gt; #include &amp;lt;cstring&amp;gt; #include &amp;lt;string&amp;gt; #include &amp;lt;algorithm&amp;gt; #include &amp;lt;iostream&amp;gt; #include &amp;lt;cstdio&amp;gt; #include &amp;lt;cmath&amp;gt; #define PB push_back #define fst first #define sec second #define lson l,m,rt&amp;lt;&amp;lt;1 #define rson m+1,r,rt&amp;lt;&amp;lt;1|1 #define ms(a,x) memset(a,x,sizeof(a)) typedef long long LL; #define pi pair &amp;lt; int ,int &amp;gt; #define MP make_pair using namespace std; const double eps = 1E-8; const int dx4[4]={1,0,0,-1}; const int dy4[4]={0,-1,1,0}; const int inf = 0x3f3f3f3f; #define MAXALP 55 //还有大写字母orz int k; struct state { int len, link, nxt[MAXALP]; }; const int N =1E5+7; state st[N*2]; int sz, last,rt; char s[N]; int Right[2*N]; int cnt[2*N],rk[2*N];//for radix sort int dp[2*N],lazy[2*N]; void sa_init() { sz = 0; last = rt = ++sz; st[1].</description></item><item><title>hdu 4416 Good Article Good sentence (后缀自动机)</title><link>https://111qqz.com/2017/11/hdu-4416/</link><pubDate>Sat, 11 Nov 2017 22:44:03 +0000</pubDate><guid>https://111qqz.com/2017/11/hdu-4416/</guid><description>
http://acm.hdu.edu.cn/showproblem.php?pid=4416
题意： 给出一个字符串A和n个字符串B,问A的子串中，不在任何一个B中出现的本质不同的子串有多少。
思路： 还是根据len搞事情
我们知道，如果不加任何条件，SAM中一个节点所表示的本质不同的子串数量是st[i].len - st[st[i].link].len
现在加了限制条件。
那么该状态中，有一些长度的字符串就会不满足条件。
我们考虑对母串A构建SAM
那么只需要维护B的所有串，对于某个状态能匹配的最大长度，设为maxlen,那么 长度为[maxlen+1,st[i].len]的字符串可以贡献答案。
如果maxlen为0，则该状态所表示的所有本质不同的子串都可以贡献答案。
维护最大匹配长度 可以参考 spoj-lcs2 解题报告 
有所不同的是不需要在每一个B中都匹配，只需要至少一个匹配就行了，因此是取所有串的最大匹配长度即可。
/* *********************************************** Author :111qqz Created Time :2017年11月08日 星期三 18时50分18秒 File Name :4416.cpp ************************************************ */ #include &amp;lt;bits/stdc++.h&amp;gt; #define PB push_back #define fst first #define sec second #define lson l,m,rt&amp;lt;&amp;lt;1 #define rson m+1,r,rt&amp;lt;&amp;lt;1|1 #define ms(a,x) memset(a,x,sizeof(a)) typedef long long LL; #define pi pair &amp;lt; int ,int &amp;gt; #define MP make_pair using namespace std; const double eps = 1E-8; const int dx4[4]={1,0,0,-1}; const int dy4[4]={0,-1,1,0}; const int inf = 0x3f3f3f3f; #define MAXALP 30 const int mod = 2012; struct state { int len, link, nxt[MAXALP]; }; const int N =1E5+7; state st[N*2]; int sz, last,rt; char s[N]; int cnt[2*N],rk[2*N];//for radix sort int dp[2*N]; void sa_init() { sz = 0; last = rt = ++sz; st[1].</description></item><item><title>hdu 3518 Boring counting (后缀自动机)</title><link>https://111qqz.com/2017/11/hdu-3518/</link><pubDate>Sat, 11 Nov 2017 21:14:00 +0000</pubDate><guid>https://111qqz.com/2017/11/hdu-3518/</guid><description>
http://acm.hdu.edu.cn/showproblem.php?pid=3518
题意： 给一个字符串，问字符串中，至少出现2次且不相交的本质不同的子串有多少个。本质不同给的子串是说存在至少一位的字母不同。
思路： 考虑SAM
SAM上的一个节点表示的是一段长度从[st[st[i].link],len+1,st[i].len]的字符串。
考虑其right集合，如果right集合中最大的r设为rightmost,最小的r设为leftmost.
那么如果rightmost-leftmost+1 &amp;gt; st[i].len ，说明什么呢？
说明该状态所表示的最长的字符串能够至少放下两个而不重叠。
即从[leftmost-st[i].len+1,leftmost]一段 和 从[rightmost-st[i].len+1,rightmost]一段。
如果最长的能放下，那么其他的也一定能放下。因此对答案贡献为st[i].len - st[st[i].link].len
如果rightmost-leftmost+1&amp;lt;=st[i].len，也就是rightmost-leftmost&amp;lt;st[i].len
这个时候长的字符串因为重叠了不能出现2次，但是短的字符串仍然可以贡献答案。
考虑如下图：
Image not found a.warning-link { color: inherit !important; font-weight: inherit !important; text-decoration: underline !important; border-bottom: none !important; } Web path: /2017/11/hdu-3518/https://111qqz.com/wordpress/wp-content/uploads/2017/11/photo_2017-11-12_05-07-10.jpg
Disk path: /content/post/ACM-ICPC/https://111qqz.com/wordpress/wp-content/uploads/2017/11/photo_2017-11-12_05-07-10.jpg
Using Page Bundles: true
此时对答案的贡献为rightmost-leftmost+1 - (st[st[i].link].len+1),化简得到rightmost-leftmost-st[st[i].link].len
综合2种情况，SAM中每个节点对答案的贡献是** min(rightmost-leftmost,st[i].len)-st[st[i].link].len**
需要注意的是只有在st[i].link存在并且rightmost-leftmost&amp;gt;st[st[i].link].len 时 才更新答案
leftmost可以在构建的时候直接求出,rightmost用拓扑序更新下即可。
/* *********************************************** Author :111qqz Created Time :2017年11月08日 星期三 18时50分18秒 File Name :4436.</description></item><item><title>hdu 5558 | 2015ACM/ICPC亚洲区合肥站 G Alice's Classified Message (后缀自动机)</title><link>https://111qqz.com/2017/11/hdu-5558/</link><pubDate>Sat, 11 Nov 2017 14:34:06 +0000</pubDate><guid>https://111qqz.com/2017/11/hdu-5558/</guid><description>
题目链接： http://acm.hdu.edu.cn/showproblem.php?pid=5558
题意： 说了一大堆。。其实就是询问位置i开始的后缀和以位置[0...i - 1]开始的所有后缀中最大匹配的公共前缀长度
思路： 这个动态的过程很容易想到SAM啊。。
所以就一边匹配。。一边构建SAM就好了。。
需要注意的是，如果有多个最长，需要输出最左边的位置。
因此多维护一个leftmost,表示某个字符串第一次出现的结尾的位置。
/* *********************************************** Author :111qqz Created Time :2017年11月08日 星期三 18时50分18秒 File Name :4436.cpp ************************************************ */ #include &amp;lt;bits/stdc++.h&amp;gt; #define PB push_back #define fst first #define sec second #define lson l,m,rt&amp;lt;&amp;lt;1 #define rson m+1,r,rt&amp;lt;&amp;lt;1|1 #define ms(a,x) memset(a,x,sizeof(a)) typedef long long LL; #define pi pair &amp;lt; int ,int &amp;gt; #define MP make_pair using namespace std; const double eps = 1E-8; const int dx4[4]={1,0,0,-1}; const int dy4[4]={0,-1,1,0}; const int inf = 0x3f3f3f3f; #define MAXALP 30 struct state { int len, link, nxt[MAXALP]; int leftmost; //由于要求出现位置最小的，leftmost表示第一次出现的右端点位置。 }; const int N =1E5+7; state st[N*2]; int sz, last,rt; char s[N]; int cnt[2*N],rk[2*N];//for radix sort void sa_init() { sz = 0; last = rt = ++sz; st[1].</description></item><item><title>SPOJ LCS2 Longest Common Substring 2[后缀自动机+dp]</title><link>https://111qqz.com/2017/11/spoj-lcs2/</link><pubDate>Sat, 11 Nov 2017 07:11:25 +0000</pubDate><guid>https://111qqz.com/2017/11/spoj-lcs2/</guid><description>
题意： 求n个串的最长公共子串，n&amp;lt;=10
思路： 不会啊orz
先放一波参考资料&amp;amp;题解好了。
codeforces_Understanding Suffix Automaton in depth
code风景区_spoj_lcs2
code风景区_sam教学
candy SPOJ 1812 LCS2 [后缀自动机 DP]
首先参考下2个串的LCS的做法spoj-lcs
卧槽终于懂了...
一个串在上面走的时候记录与每个状态公共子串的最大值，注意**出现次数向父亲传递**，一个状态能到达说明了Suffix Link指向的状态可以取到最大子串，这一步对val后基数排序然后倒着更新就行了 ...代码之后补
关键是理解这句话：一个状态能到达说明了Suffix Link指向的状态可以取到最大子串
比如如果状态S（从初始状态到S状态所表示的子串是abcbc） 能够最长向前匹配的长度是x,那么状态s的par的状态Q(从初始状态到Q状态所表示的子串是bc）也至少为x.
所以dp[link[v]] = Max{dp[link[v]],dp[v]}
妈个鸡。。。
Image not found a.warning-link { color: inherit !important; font-weight: inherit !important; text-decoration: underline !important; border-bottom: none !important; } Web path: /2017/11/spoj-lcs2/https://111qqz.com/wordpress/wp-content/uploads/2017/11/深度截图_选择区域_20171111202708.png
Disk path: /content/post/ACM-ICPC/https://111qqz.com/wordpress/wp-content/uploads/2017/11/深度截图_选择区域_20171111202708.png
Using Page Bundles: true
没事改什么字符集大小啊。。。
上道题做的是数字。。就手贱把字符集的大小改成了12.。。忘了改回来。。WA到死。。。
/* *********************************************** Author :111qqz Created Time :2017年11月08日 星期三 18时50分18秒 File Name :4436.</description></item><item><title>hdu 4436 | 2012 Asia Tianjin Regional Contest str2int (dp+后缀自动机，多串建立)</title><link>https://111qqz.com/2017/11/hdu-4436/</link><pubDate>Thu, 09 Nov 2017 05:55:24 +0000</pubDate><guid>https://111qqz.com/2017/11/hdu-4436/</guid><description>
http://acm.hdu.edu.cn/showproblem.php?pid=4436
题意： 给出n个仅由数字组成的字符串，问n个字符串的所有不同子串的和。
思路： SAM水题
从初始状态开始，走过所有路径，就是该SAM表示的所有的（不重复）子串。
因此只需要从根节点按照拓扑序（这回是根据len从小到大）转移好了。
考虑num[i]表示从SAM中的init状态到i状态能表示的子串的数量。
dp[i]表示从SAM中的init状态到i状态所表示的子串对应的和（也就是到该节点的子串的答案）
那么对于SAM中一个u-&amp;gt;v（其中u和v是状态，设转移边为j，j属于0..9）的转移
有num[v]+=num[u]
dp[v] = dp[u] * 10 + num[u] * j
初始根节点num[rt]=1,表示唯一的空串。
需要注意，前缀0的数不考虑，所以SAM中 init状态不转移0这条边。
/* *********************************************** Author :111qqz Created Time :2017年11月08日 星期三 18时50分18秒 File Name :4436.cpp ************************************************ */ #include &amp;lt;bits/stdc++.h&amp;gt; #define PB push_back #define fst first #define sec second #define lson l,m,rt&amp;lt;&amp;lt;1 #define rson m+1,r,rt&amp;lt;&amp;lt;1|1 #define ms(a,x) memset(a,x,sizeof(a)) typedef long long LL; #define pi pair &amp;lt; int ,int &amp;gt; #define MP make_pair using namespace std; const double eps = 1E-8; const int dx4[4]={1,0,0,-1}; const int dy4[4]={0,-1,1,0}; const int inf = 0x3f3f3f3f; #define MAXALP 12 const int mod = 2012; struct state { int len, link, nxt[MAXALP]; }; const int N =1E5+7; state st[N*2]; int sz, last,rt; char s[N]; int cnt[2*N],rk[2*N];//for radix sort void sa_init() { sz = 0; last = rt = ++sz; st[1].</description></item><item><title>SPOJ SUBLEX Lexicographical Substring Search （ 后缀自动机）</title><link>https://111qqz.com/2017/11/spoj-sublex/</link><pubDate>Wed, 08 Nov 2017 13:15:20 +0000</pubDate><guid>https://111qqz.com/2017/11/spoj-sublex/</guid><description>
http://www.spoj.com/problems/SUBLEX/en/
题意： 给一个字符串，每次询问字典序第k大的不重复子串。
思路： 先做个拓扑dp，求出SAM上，一个状态到种态的路径数。
拓扑dp其实就是按照拓扑序的dp啦...
然后从SAM的初始态开始，每次字典序从小到大得贪心寻找。思想类似可持久化线段树求区间第k大。
/* *********************************************** Author :111qqz Created Time :2017年11月08日 星期三 18时50分18秒 File Name :sublex.cpp ************************************************ */ #include &amp;lt;bits/stdc++.h&amp;gt; #define PB push_back #define fst first #define sec second #define lson l,m,rt&amp;lt;&amp;lt;1 #define rson m+1,r,rt&amp;lt;&amp;lt;1|1 #define ms(a,x) memset(a,x,sizeof(a)) typedef long long LL; #define pi pair &amp;lt; int ,int &amp;gt; #define MP make_pair using namespace std; const double eps = 1E-8; const int dx4[4]={1,0,0,-1}; const int dy4[4]={0,-1,1,0}; const int inf = 0x3f3f3f3f; #define MAXALP 26 struct state { int len, link, nxt[MAXALP]; }; const int N =3E5+7; state st[N*2]; int sz, last,rt; char s[N]; int cnt[2*N],a[2*N];//for radix sort int sum[2*N]; //表示状态i到终态的路径数 void sa_init() { sz = 0; last = rt = ++sz; st[1].</description></item><item><title>spoj nsubstr Substrings (后缀自动机 模板题)</title><link>https://111qqz.com/2017/11/spoj-nsubstr/</link><pubDate>Wed, 08 Nov 2017 12:16:05 +0000</pubDate><guid>https://111qqz.com/2017/11/spoj-nsubstr/</guid><description>
http://www.spoj.com/problems/NSUBSTR/en/
题意： f[i]指长度为i的串出现次数的最大值。这里的不同出现指，可以有重复串，只要起始位置不同就视为不同的出现。
求f[1]..f[lenth]。
思路： 我们知道，SAM上的节点是right集合的等价类。
一个子串的right集合是指在一个母串中，某个子串所有出现位置的右端点的集合。
如果两个子串的right集合完全相同，那么就可以归结为同一个节点，也就是说这两个子串对于SAM是等价的。
因为在SAM上，这两个子串后，添加若干字符得到的后缀都是一样的。
所以一个SAM节点的个数，就是right集合等价类的个数（如果不考虑初始状态）
对于SAM某一个节点，其能表示的子串有一个范围，设为[MIN,MAX]
SAM的一个节点能表示的子串的含义是说，这些子串的right集合相同。
而一个子串出现的次数就是其right集合的大小。
考虑SAM上的某个节点，其表示的长度区间在[MIN,MAX]的子串都出现了|right|次
如果我们直接从MIN更新到MAX有点太暴力了，实际上这里我们可以只更新f[MAX]
由于长度i-1的子串出现的次数一定大于等于长度为i的子串出现的次数，所以最后长度从大到小更新f即可。
现在的问题就变成了如何求right集合。
实际上我们不需要知道right集合的具体组成，只需要知道right集合的大小。
考虑一棵parent树，树上某个节点的right集合就是该节点的所有儿子节点的right集合的并集
因此我们只需要在parent上自低向上更新right集合的大小就可以了。
如何保证在parent树上是自底向上更新呢？
我们只需要按照len,也就是SAM中所有节点能表示的子串的MAX值从大到小的顺序更新right集合。
原因是parent树上，儿子的len一定比父亲的len长。
注意到，对于parent树上的叶子节点，其right集合是1，这也是我们的初始状态。
部分实现细节见代码注释。
关于SAM的详细学习笔记日后补
20171109Update:
注释写错了一处，a[1]应该是len最短的状态的标号，之前写成了最长的。
/* *********************************************** Author :111qqz Created Time :2017年11月08日 星期三 18时50分18秒 File Name :nsubstr.cpp ************************************************ */ #include &amp;lt;bits/stdc++.h&amp;gt; #define PB push_back #define fst first #define sec second #define lson l,m,rt&amp;lt;&amp;lt;1 #define rson m+1,r,rt&amp;lt;&amp;lt;1|1 #define ms(a,x) memset(a,x,sizeof(a)) typedef long long LL; #define pi pair &amp;lt; int ,int &amp;gt; #define MP make_pair using namespace std; const double eps = 1E-8; const int dx4[4]={1,0,0,-1}; const int dy4[4]={0,-1,1,0}; const int inf = 0x3f3f3f3f; #define MAXALP 26 struct state { int len, link, nxt[MAXALP]; }; const int N =3E5+7; state st[N*2]; int Right[2*N]; //right[i]表示第i个状态的right集合大小 int sz, last,rt; char s[N]; int cnt[2*N],a[2*N];//for radix sort void sa_init() { sz = 0; last = rt = ++sz; st[1].</description></item><item><title>【施工中】SAM学习笔记</title><link>https://111qqz.com/2017/11/suffix-automaton-notes/</link><pubDate>Sat, 04 Nov 2017 07:07:26 +0000</pubDate><guid>https://111qqz.com/2017/11/suffix-automaton-notes/</guid><description>
***在学习后缀自动机之前需要熟练掌握WA自动机、RE自动机与TLE自动机*** 怕是老年人的最后一篇算法学习笔记了
心情不好，此文无限期tj
概述 主要讲解在我学习的过程中比较难理解的地方..并不保证全面
首先，后缀自动机是一个能且只能接受一个字符串的所有后缀的确定性有限状态自动机，也就是DFA
SAM同时具有自动机和树的性质。
节点（状态） SAM中的节点，也叫状态。
明确一个说法：“一个节点所表示的字符串”。
由于一个字符串的子串一定是某个后缀的前缀。
因此一个字符串的子串一定可以在SAM上运行。
因此“一个节点Q所表示的字符串”的含义是说，从初始状态开始，运行该字符串后，到达的状态是Q.
一个节点所表示的字符串长度属于范围[MIN,MAX]，并且区间中每个长度的字符串都出现一次
能表示的字符串长度范围有最大值很好理解，有最小值是因为：长度越小的字符串出现的位置越多，因此当长度小于MIN之后，其出现的位置增加。
由于后文见到，SAM中状态是终点位置集合的等价类，因此一个节点所表示的字符串长度存在一个最小值。
后文还问见到，一个节点的MIN恰好是其父亲节点的MAX+1
终点集合 (endpos / Right) 终点集合一般国内的资料叫right集合，国外好像更常见的叫法是endpos集合。
Image not found a.warning-link { color: inherit !important; font-weight: inherit !important; text-decoration: underline !important; border-bottom: none !important; } Web path: /2017/11/suffix-automaton-notes/https://111qqz.com/wordpress/wp-content/uploads/2017/11/深度截图_选择区域_20171113124457.png
Disk path: /content/post/ACM-ICPC/https://111qqz.com/wordpress/wp-content/uploads/2017/11/深度截图_选择区域_20171113124457.png
Using Page Bundles: true
其实就是对于一个子串a,其在母串S中出现的位置的右端点的集合。
那么这个right集合有什么作用呢？
考虑naive的做法，一个串S有O(n^2)的后缀，凉凉
那么我们发现，对于right集合相同的两个子串，代表其子串的状态（意思是说，从初始状态到该状态所表示的字符串）是可以合并的。
为什么？因为这两个子串的所有出现位置的右端点相同，那么在其后面添加若干字符得到的后缀也一定完全相同。
那么我们可以根据right集合，将字符串的子串分成若干个等价类
对于一个等价类，我们在SAM中用一个状态表示就行了。
接下来考虑right集合的性质。
right[v]表示状态v所表示的子串出现的次数。
后缀链/parent树 对于不为初始状态的所有状态，一个状态对应着一个等价类，令w作为其中最长的子串，其余的子串都是w的后缀。
w的所有后缀中，一部分在w所在的等价类中，另外一部分位于其他的等价类中。于是定义后缀链link(v)连接w所有后缀中位于其他等价类并且长度最长的那个后缀所在的等价类。
Image not found a.</description></item><item><title>poj 1509 Glass Beads (后缀自动机求最小循环表示)</title><link>https://111qqz.com/2017/11/poj-1509/</link><pubDate>Sat, 04 Nov 2017 06:58:49 +0000</pubDate><guid>https://111qqz.com/2017/11/poj-1509/</guid><description>
题意： 给定一个循环字符串，问字典序最小的串的开始位置。
思路： 之前用poj 1509 解题报告-字符串的最小表示法 A过
字符串的最小表示法的复杂度是O(n)，代码也不是很难写，不过由于最近在学SAM,所以用SAM写了一下。
参照张天扬的论文：
把原串复制一遍到后面，然后构建后缀自动机。 从初始状态开始，每次走字典序最小的转移，走|S|之后得到的就是最小循环表示。
如果求的是最小后缀，就在原串后加入一个比字符集中所有字符的字典序都小的字符作为终止后，再添加一遍原串。
/* *********************************************** Author :111qqz Created Time :2017年11月03日 星期五 18时20分42秒 File Name :2774_SAM.cpp ************************************************ */ //#include &amp;lt;bits/stdc++.h&amp;gt; #include &amp;lt;iostream&amp;gt; #include &amp;lt;cstdio&amp;gt; #include &amp;lt;algorithm&amp;gt; #include &amp;lt;cmath&amp;gt; #include &amp;lt;string&amp;gt; #include &amp;lt;cstring&amp;gt; #define PB push_back #define fst first #define sec second #define lnxt l,m,rt&amp;lt;&amp;lt;1 #define rnxt m+1,r,rt&amp;lt;&amp;lt;1|1 #define ms(a,x) memset(a,x,sizeof(a)) typedef long long LL; #define pi pair &amp;lt; int ,int &amp;gt; #define MP make_pair using namespace std; const double eps = 1E-8; const int dx4[4]={1,0,0,-1}; const int dy4[4]={0,-1,1,0}; const int inf = 0x3f3f3f3f; const int maxn = 5E5; struct node{ node*nxt[26],*fail; LL len,cnt; }; struct SAM{ node no[maxn]; node*root; int cnt; node*newnode(){ ms(no[cnt].</description></item><item><title>hdu 4622 | 2013 Multi-University Training Contest 3 Reincarnation (后缀自动机)</title><link>https://111qqz.com/2017/11/hdu-4622/</link><pubDate>Sat, 04 Nov 2017 04:31:38 +0000</pubDate><guid>https://111qqz.com/2017/11/hdu-4622/</guid><description>
http://acm.hdu.edu.cn/showproblem.php?pid=4622
题意： 给一个字符串，给出若干询问，每组询问给一个区间[l,r]，问区间中本质不同的字符串的个数。
思路： 观察发现，有10000组查询，字符串的长度最多才2000，所以可以预处理一波。
我们先考虑如何处理整个区间中，本质不同的子串数量。
考虑SAM，由于后缀自动机中每一条从初始状态出发的路径都对应的一个子串，同时后缀自动机是最简的，所以问题也就变成了从初始状态开始不同路径的数量。
每个节点 u 表示的子串长度在 [min[u],max[u]]范围内.
又由于max(u.fail) = min(u)-1
因此u表示的子串的长度就是变成了**(max[u.fail],max[u] ] (注意区间，是左闭右开)**
由于每个长度的串都出现了一次，因此这个状态子串的个数就是max[u] - max[u.fail]
如果是统计整个串的本质不同的串的个数，那么buildSAM之后统计一下就行了。
现在是询问区间。
问题变成了，从[l,r]到[l,r+1]，答案的改变是什么。
在SAM上添加一个字符之后，SAM当前的状态变成了cur,那么实际上，对答案的贡献，就是初始状态到新的状态cur的不同路径数目。
也就是max[cur]-max[cur.fail]
#include &amp;lt;bits/stdc++.h&amp;gt; #define PB push_back #define fst first #define sec second #define lnxt l,m,rt&amp;lt;&amp;lt;1 #define rnxt m+1,r,rt&amp;lt;&amp;lt;1|1 #define ms(a,x) memset(a,x,sizeof(a)) typedef long long LL; #define pi pair &amp;lt; int ,int &amp;gt; #define MP make_pair using namespace std; const double eps = 1E-8; const int dx4[4]={1,0,0,-1}; const int dy4[4]={0,-1,1,0}; const int inf = 0x3f3f3f3f; const int N=2017; const int maxn = 4017; LL ret; struct node{ node*nxt[26],*fail; LL len,cnt; void init() { for ( int i = 0 ; i &amp;lt; 26 ; i++) nxt[i]=NULL; fail=NULL; len=cnt=0; } }; struct SAM{ node no[maxn]; node*root; int cnt; node* newnode(){ ms(no[cnt].</description></item><item><title>SPOJ LCS Longest Common Substring （后缀自动机模板题）</title><link>https://111qqz.com/2017/11/spoj-lcs/</link><pubDate>Fri, 03 Nov 2017 11:44:35 +0000</pubDate><guid>https://111qqz.com/2017/11/spoj-lcs/</guid><description>
题意： 给出2个字符串(2.5E5)，问最长公共子串的长度。
思路： 拿一个串建SAM
由于SAM上的任何一个状态，都对应一个或者若干个子串，然后拿另一个串在SAM上面跑就行了
20171110UPdate:我好像说得太简略了。。
参考clj的冬令营讲稿：
* 给两个长度小于100000的字符串A和B，求出他们的最长公共连续子串。 Ê我们构造出A的后缀自动机SAM * 对于SAM的每个状态s，令r为Right(s)中任意的一个元素，它代表的是结束位置在r的，长度在[Min(s),Max(s)]之间的所有子串。 * 我们不妨对状态s，求出所有B的子串中，从任意r开始往前能匹配的最大长度L，那么min(L,Max(s))就可以更新答案了。 * 我们考虑用_SAM_读入字符串_B_。 * **令当前状态为_s_，同时最大匹配长度为_len _Ê我们读入字符_x_。如果_s_有标号为_x_的边，** * **那么_s=trans(s,x),len = len+1 _Ê否则我们找到_s_的第一个祖先_a_，它有标号为_x_的边，令** * **_s=trans(a,x),len=Max(a)+1__。 _Ê如果没有这样的祖先，那么令_s=root,len=0_。** * 在过程中更新状态的最大匹配长度 唯一不显然的地方在于，为什么当失配时，我们是沿着parent树向上找。
考虑如下例子：
Image not found a.warning-link { color: inherit !important; font-weight: inherit !important; text-decoration: underline !important; border-bottom: none !important; } Web path: /2017/11/spoj-lcs/https://111qqz.com/wordpress/wp-content/uploads/2017/11/深度截图_选择区域_20171110203549.png
Disk path: /content/post/ACM-ICPC/https://111qqz.com/wordpress/wp-content/uploads/2017/11/深度截图_选择区域_20171110203549.png
Using Page Bundles: true
我们知道，parent树，或者叫后缀链树，一个状态S指向的是，总起点开始到S的子串的后缀中，长度最长的后缀，满足该后缀所对应的某个状态Q(对应的意思是说，从初始状态到状态Q表示的子串恰好是该后缀)的right集合和状态S的集合不相等。</description></item></channel></rss>