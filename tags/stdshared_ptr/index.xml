<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>std::shared_ptr on 111qqz的小窝</title><link>https://111qqz.com/tags/stdshared_ptr/</link><description>Recent content in std::shared_ptr on 111qqz的小窝</description><generator>Hugo -- gohugo.io</generator><language>en</language><copyright>Copyright © 2012-2022 all rights reserved.</copyright><lastBuildDate>Sat, 05 Mar 2022 16:33:25 +0800</lastBuildDate><atom:link href="https://111qqz.com/tags/stdshared_ptr/index.xml" rel="self" type="application/rss+xml"/><item><title>[施工中] std::shared_ptr 学习笔记</title><link>https://111qqz.com/2022/03/std-shared-ptr-notes/</link><pubDate>Sat, 05 Mar 2022 16:33:25 +0800</pubDate><guid>https://111qqz.com/2022/03/std-shared-ptr-notes/</guid><description>
概述 std::shared_ptr是智能指针的一种，在modern c++中被广泛使用
虽然天天使用，但是有些细节还不是100%清楚，因此来整理一下
线程安全 简单说，shared_ptr&amp;lt;T&amp;gt;的引用计数的实现是线程安全的，但是对于T的操作不是线程安全的
control block type This leads to a question of how std::shared_ptr can destroy a managed object of a specific type despite holding a void*? It works because the object deletion procedure in std::shared_ptr is type-erased,
std::shared_ptr的constrol block中有对应的deleter. 这个deleter不需要类型也可以work是因为这个deleter做到到了&amp;quot;type-erasure&amp;quot; 也就是 确保程序在运行时执行不依赖类型信息。 参考 wiki-类型擦除
一种可能的实现</description></item></channel></rss>