<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>std::shared_ptr on 111qqz的小窝</title><link>https://111qqz.com/tags/stdshared_ptr/</link><description>Recent content in std::shared_ptr on 111qqz的小窝</description><generator>Hugo -- gohugo.io</generator><language>en</language><copyright>Copyright © 2012-2022 all rights reserved.</copyright><lastBuildDate>Sat, 05 Mar 2022 16:33:25 +0800</lastBuildDate><atom:link href="https://111qqz.com/tags/stdshared_ptr/index.xml" rel="self" type="application/rss+xml"/><item><title>[施工中] std::shared_ptr 学习笔记</title><link>https://111qqz.com/2022/03/std-shared-ptr-notes/</link><pubDate>Sat, 05 Mar 2022 16:33:25 +0800</pubDate><guid>https://111qqz.com/2022/03/std-shared-ptr-notes/</guid><description>
概述 std::shared_ptr是智能指针的一种，在modern c++中被广泛使用（甚至滥用)
虽然天天使用，但是有些细节还不是100%清楚，因此来整理一下 为了方便表述，下文只写shared_ptr,不在写std的namespace.
组成 shared_ptr的实现中，成员通常由两部分组成。一个是所涵盖对象的指针，一个是control block 的指针
control block Tip 最重要的是，control block是 dynamically-allocated 的
(校招的时候某次面试，让我手写shared_ptr的实现，当时被多个object如何共享引用计数卡住了。。主要就是没意识到control block是单独allocate的，shared_ptr的实现中只是保留一个指针)
control block中通常包含五部分
either a pointer to the managed object or the managed object itself; the deleter (type-erased); the allocator (type-erased); the number of shared_ptrs that own the managed object; the number of weak_ptrs that refer to the managed object. 这里面有几点值得强调：
两个引用计数都是atomic的。 weak_ptr是为了解决循环引用 type-erased是什么？ 后面会介绍 线程安全 shared_ptr的线程安全性快成c++面试的top10经典八股文了
Tip 简单说，shared_ptr&amp;lt;T&amp;gt;的引用计数的实现是线程安全的(通常是两个atomic变量)，但是对于T的操作不是线程安全的*</description></item></channel></rss>