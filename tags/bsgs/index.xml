<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>BSGS on 111qqz的小窝</title><link>https://111qqz.com/tags/bsgs/</link><description>Recent content in BSGS on 111qqz的小窝</description><generator>Hugo -- gohugo.io</generator><language>en</language><copyright>Copyright © 2012-2022 all rights reserved.</copyright><lastBuildDate>Fri, 28 Jul 2017 14:23:36 +0000</lastBuildDate><atom:link href="https://111qqz.com/tags/bsgs/index.xml" rel="self" type="application/rss+xml"/><item><title>hdu 2815 Mod Tree (扩展BSGS算法)</title><link>https://111qqz.com/2017/07/hdu-2815/</link><pubDate>Fri, 28 Jul 2017 14:23:36 +0000</pubDate><guid>https://111qqz.com/2017/07/hdu-2815/</guid><description>
题意：k^D=n(%p),求最小的D (1&amp;lt;=K, P, N&amp;lt;=10^9)
思路：出题人英文水平捉鸡。。。。
扩展BSGS算法即可，注意p&amp;gt;=n的时候显然是无解的，判掉。
/* *********************************************** Author :111qqz Created Time :Mon 24 Jul 2017 09:43:41 PM CST File Name :2815.cpp ************************************************ */ #include &amp;lt;cstdio&amp;gt; #include &amp;lt;cstring&amp;gt; #include &amp;lt;iostream&amp;gt; #include &amp;lt;algorithm&amp;gt; #include &amp;lt;vector&amp;gt; #include &amp;lt;queue&amp;gt; #include &amp;lt;set&amp;gt; #include &amp;lt;map&amp;gt; #include &amp;lt;string&amp;gt; #include &amp;lt;cmath&amp;gt; #include &amp;lt;cstdlib&amp;gt; #include &amp;lt;ctime&amp;gt; #define PB push_back #define fst first #define sec second #define lson l,m,rt&amp;lt;&amp;lt;1 #define rson m+1,r,rt&amp;lt;&amp;lt;1|1 #define ms(a,x) memset(a,x,sizeof(a)) typedef long long LL; #define pi pair &amp;lt; int ,int &amp;gt; #define MP make_pair using namespace std; const double eps = 1E-8; const int dx4[4]={1,0,0,-1}; const int dy4[4]={0,-1,1,0}; const int inf = 0x3f3f3f3f; LL k,p,n; map&amp;lt;LL,LL&amp;gt;mp; LL ksm(LL a,LL b,LL p) { LL res = 1LL; while (b) { if (b&amp;amp;1) res = res * a % p; b = b&amp;gt;&amp;gt;1LL; a = a * a % p; } return res; } LL gcd( LL a,LL b){return b?</description></item><item><title>BZOJ 2480: Spoj3105 Mod (扩展BSGS算法，模板)</title><link>https://111qqz.com/2017/07/bzoj-2480/</link><pubDate>Mon, 24 Jul 2017 13:37:40 +0000</pubDate><guid>https://111qqz.com/2017/07/bzoj-2480/</guid><description>
Description 已知数a,p,b，求满足a^x≡b(mod p)的最小自然数x。
Input  每个测试文件中最多包含100组测试数据。
 每组数据中，每行包含3个正整数a,p,b。
 当a=p=b=0时，表示测试数据读入完全。
Output  对于每组数据，输出一行。
 如果无解，输出“No Solution”（不含引号），否则输出最小自然数解。
Sample Input 5 58 33 2 4 3 0 0 0
Sample Output 9 No Solution
HINT  100%的数据，a,p,b≤1e9。 2016.3.29新加数据一组 by 1430586275
思路：BSGS算法，需要注意这里没有保证(a,p)=1，因此不能直接使用BSGS算法。
我们称之为扩展BSGS算法...
但是其实并不是什么新东西，不过是几次gcd,将条件转化成满足BSGS算法的情况
/* *********************************************** Author :111qqz Created Time :Mon 24 Jul 2017 08:54:25 PM CST File Name :2480.cpp ************************************************ */ #include &amp;lt;cstdio&amp;gt; #include &amp;lt;cstring&amp;gt; #include &amp;lt;iostream&amp;gt; #include &amp;lt;algorithm&amp;gt; #include &amp;lt;vector&amp;gt; #include &amp;lt;queue&amp;gt; #include &amp;lt;set&amp;gt; #include &amp;lt;map&amp;gt; #include &amp;lt;string&amp;gt; #include &amp;lt;cmath&amp;gt; #include &amp;lt;cstdlib&amp;gt; #include &amp;lt;ctime&amp;gt; #define PB push_back #define fst first #define sec second #define lson l,m,rt&amp;lt;&amp;lt;1 #define rson m+1,r,rt&amp;lt;&amp;lt;1|1 #define ms(a,x) memset(a,x,sizeof(a)) typedef long long LL; #define pi pair &amp;lt; int ,int &amp;gt; #define MP make_pair using namespace std; const double eps = 1E-8; const int dx4[4]={1,0,0,-1}; const int dy4[4]={0,-1,1,0}; const int inf = 0x3f3f3f3f; map&amp;lt;LL,LL&amp;gt;mp; LL a,b,p; LL ksm(LL a,LL b,LL p) { LL res = 1LL; while (b) { if (b&amp;amp;1) res = res * a % p; b = b&amp;gt;&amp;gt;1LL; a = a * a % p; } return res; } LL gcd( LL a,LL b){return b?</description></item><item><title>BSGS（Baby steps giant steps）算法学习笔记</title><link>https://111qqz.com/2017/07/bsgs-algorithm-notes/</link><pubDate>Sun, 23 Jul 2017 12:41:46 +0000</pubDate><guid>https://111qqz.com/2017/07/bsgs-algorithm-notes/</guid><description>
离散对数（Discrete Logarithm）问题是这样一个问题，它是对于模方程
a^x=b(mod prime)，求满足条件的X，或者得出不存在这样的X
最暴力的思路，那么就是枚举x? 根据费马小定理，只需要枚举[0,p-1)
但是还是很大...我们不禁想到把x写成x=A*m+B的形式，m=ceil(sqrt(p))
因此有 ，变形得到 然后预处理一边存到map中，从小到大枚举另一边看是否存在...
我们可以设 ，其中 , ，这样的话化简后的方程就是
就可以不用求出逆元，要注意只是不用求出逆元，而不是没有用到逆元的存在
就可以不用求出逆元，要注意只是不用求出逆元，而不是没有用到逆元的存在
就可以不用求出逆元，要注意只是不用求出逆元，而不是没有用到逆元的存在
其实在m=sqrt(p)的时候你可能就有预感了...
BSGS算法的本质，就是个分块啊，而分块的本质就是暴力乱搞...所以BSGS看起来很高大上的算法不过是暴力乱搞2333
而BSGS的名字也很贴切...A的变化是giant step？B的变化是baby step? (纯属yy...但是我感觉这样想很好理解啊？
需要注意的是，这里介绍的是常规的BSGS算法，
前提条件是a和P互质
前提条件是a和P互质
前提条件是a和P互质
放一个板子好了，poj 2417
/* *********************************************** Author :111qqz Created Time :2017年07月23日 星期日 11时11分00秒 File Name :2417.cpp ************************************************ */ #include &amp;lt;cstdio&amp;gt; #include &amp;lt;cstring&amp;gt; #include &amp;lt;iostream&amp;gt; #include &amp;lt;algorithm&amp;gt; #include &amp;lt;vector&amp;gt; #include &amp;lt;queue&amp;gt; #include &amp;lt;set&amp;gt; #include &amp;lt;map&amp;gt; #include &amp;lt;string&amp;gt; #include &amp;lt;cmath&amp;gt; #include &amp;lt;cstdlib&amp;gt; #include &amp;lt;ctime&amp;gt; #define PB push_back #define fst first #define sec second #define lson l,m,rt&amp;lt;&amp;lt;1 #define rson m+1,r,rt&amp;lt;&amp;lt;1|1 #define ms(a,x) memset(a,x,sizeof(a)) typedef long long LL; #define pi pair &amp;lt; int ,int &amp;gt; #define MP make_pair using namespace std; const double eps = 1E-8; const int dx4[4]={1,0,0,-1}; const int dy4[4]={0,-1,1,0}; const int inf = 0x3f3f3f3f; LL p,b,n; map&amp;lt;LL,LL&amp;gt;Hash; map&amp;lt;LL,LL&amp;gt;::iterator it; inline LL ksm(LL a,LL b,LL MOD) { LL res = 1LL; while (b) { if (b&amp;amp;1) res = (res*a)%MOD; b = b &amp;gt;&amp;gt; 1; a = (a*a)%MOD; } return res; } LL BSGS(LL a,LL b ,LL p) // a^x = b (mod p),求x { a%=p; b%=p; if (!</description></item><item><title>poj 2417 Discrete Logging (BSGS算法)</title><link>https://111qqz.com/2017/07/poj-2417/</link><pubDate>Sun, 23 Jul 2017 12:13:28 +0000</pubDate><guid>https://111qqz.com/2017/07/poj-2417/</guid><description>
题目链接
题意：
Given a prime P, 2 &amp;lt;= P &amp;lt; 231, an integer B, 2 &amp;lt;= B &amp;lt; P, and an integer N, 1 &amp;lt;= N &amp;lt; P, compute the discrete logarithm of N, base B, modulo P. That is, find an integer L such that BL == N (mod P)
思路：bsgs算法
详情见BSGS算法笔记
然后被map的count坑了一下？ 我想判断map中某个key是否存在，用count会TLE，find也会TLE,[]可以通过....不太懂，复杂度不都是log吗，差常数？还是有人会退化？
不过似乎[]比较安全就对了。
/* *********************************************** Author :111qqz Created Time :2017年07月23日 星期日 11时11分00秒 File Name :2417.cpp ************************************************ */ #include &amp;lt;cstdio&amp;gt; #include &amp;lt;cstring&amp;gt; #include &amp;lt;iostream&amp;gt; #include &amp;lt;algorithm&amp;gt; #include &amp;lt;vector&amp;gt; #include &amp;lt;queue&amp;gt; #include &amp;lt;set&amp;gt; #include &amp;lt;map&amp;gt; #include &amp;lt;string&amp;gt; #include &amp;lt;cmath&amp;gt; #include &amp;lt;cstdlib&amp;gt; #include &amp;lt;ctime&amp;gt; #define PB push_back #define fst first #define sec second #define lson l,m,rt&amp;lt;&amp;lt;1 #define rson m+1,r,rt&amp;lt;&amp;lt;1|1 #define ms(a,x) memset(a,x,sizeof(a)) typedef long long LL; #define pi pair &amp;lt; int ,int &amp;gt; #define MP make_pair using namespace std; const double eps = 1E-8; const int dx4[4]={1,0,0,-1}; const int dy4[4]={0,-1,1,0}; const int inf = 0x3f3f3f3f; LL p,b,n; map&amp;lt;LL,LL&amp;gt;Hash; map&amp;lt;LL,LL&amp;gt;::iterator it; inline LL ksm(LL a,LL b,LL MOD) { LL res = 1LL; while (b) { if (b&amp;amp;1) res = (res*a)%MOD; b = b &amp;gt;&amp;gt; 1; a = (a*a)%MOD; } return res; } LL BSGS(LL a,LL b ,LL p) // a^x = b (mod p),求x { a%=p; b%=p; if (!</description></item></channel></rss>