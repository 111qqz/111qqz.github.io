<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>c&#43;&#43; on 111qqz的小窝</title>
    <link>https://111qqz.github.io/tags/c&#43;&#43;/</link>
    <description>Recent content in c&#43;&#43; on 111qqz的小窝</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Tue, 28 Aug 2018 06:30:59 +0000</lastBuildDate>
    
	<atom:link href="https://111qqz.github.io/tags/c++/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>[设计模式] 组合模式（composite） 学习笔记</title>
      <link>https://111qqz.github.io/2018/08/composite-pattern-notes/</link>
      <pubDate>Tue, 28 Aug 2018 06:30:59 +0000</pubDate>
      
      <guid>https://111qqz.github.io/2018/08/composite-pattern-notes/</guid>
      <description>目的是忽略单一对象和组合对象的不同。 有点像以前写过的用链表定义一个树结构，每个节点是一个val + 多个*tree 。如果某个节点是叶子节点了，那</description>
    </item>
    
    <item>
      <title>把二进制文件按字节读到vector中</title>
      <link>https://111qqz.github.io/2018/08/how-to-read-binary-data-into-cpp-vector/</link>
      <pubDate>Tue, 21 Aug 2018 06:08:56 +0000</pubDate>
      
      <guid>https://111qqz.github.io/2018/08/how-to-read-binary-data-into-cpp-vector/</guid>
      <description>std::vector&amp;lt;unsigned char&amp;gt; readFromFile1(const char* filePath) { FILE* file = fopen(filePath, &amp;quot;rb&amp;quot;); std::vector&amp;lt;unsigned char&amp;gt; result; if (file == nullptr) { return result; } // 获取文件大小，尽量一次读完 size_t fileSize = getFileSize(file); if (fileSize != 0) { result.resize(fileSize); size_t n = fread(&amp;amp;result[0], 1, fileSize, file); assert(n &amp;lt;= fileSize); if (n != fileSize) { result.resize(n); } } // 在读取过程</description>
    </item>
    
    <item>
      <title>记录一次因动态库符号表可见性导致的未定义的引用(undefined reference)</title>
      <link>https://111qqz.github.io/2018/08/undefined-references-caused-by-dynamic-library-symbol-table-visibility/</link>
      <pubDate>Wed, 15 Aug 2018 13:12:17 +0000</pubDate>
      
      <guid>https://111qqz.github.io/2018/08/undefined-references-caused-by-dynamic-library-symbol-table-visibility/</guid>
      <description>编译某代码，发现报错某函数未定义的引用。该函数的是先前编译得到的动态库中。 先去check了该函数的实现，还有接口与头文件中的声明是否统一。发</description>
    </item>
    
    <item>
      <title>C&#43;&#43; STL Algotithms 学习笔记</title>
      <link>https://111qqz.github.io/2018/05/c-stl-algotithms-notes/</link>
      <pubDate>Sun, 06 May 2018 09:45:50 +0000</pubDate>
      
      <guid>https://111qqz.github.io/2018/05/c-stl-algotithms-notes/</guid>
      <description>迫于拙劣的cpp水平，这次来记录一些关于STL算法部分的内容。 参考内容是CS106L的course reader Iterator Categories Iterators分为以下五种: * Output</description>
    </item>
    
    <item>
      <title>C&#43;&#43; IO Streams 学习笔记</title>
      <link>https://111qqz.github.io/2018/05/cpp-io-streams-notes/</link>
      <pubDate>Fri, 04 May 2018 03:48:37 +0000</pubDate>
      
      <guid>https://111qqz.github.io/2018/05/cpp-io-streams-notes/</guid>
      <description>迫于拙劣的cpp水平，来补补以前忽略掉的cpp细节。 老规矩，先放资料。 参考资料: A Gentle Introduction to C++ IO Streams &#34;Designing and implementing a general input/output facility for a programming language is notoriously difficult&#34; - Bjarne Stroustrup Stream</description>
    </item>
    
    <item>
      <title>Eigen: C&#43;&#43;开源矩阵学习笔记</title>
      <link>https://111qqz.github.io/2018/04/eigen-notes/</link>
      <pubDate>Thu, 05 Apr 2018 07:14:54 +0000</pubDate>
      
      <guid>https://111qqz.github.io/2018/04/eigen-notes/</guid>
      <description>接触Eigen的原因是最近在看caffe/caffe2源码,caffe2中使用了Eigen库. Eigen 是一个基于C++模板的线性代数库，直接将库下</description>
    </item>
    
  </channel>
</rss>