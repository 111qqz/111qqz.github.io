<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>虚点 on 111qqz的小窝</title><link>http://example.org/tags/%E8%99%9A%E7%82%B9/</link><description>Recent content in 虚点 on 111qqz的小窝</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Sat, 21 May 2016 04:58:22 +0000</lastBuildDate><atom:link href="http://example.org/tags/%E8%99%9A%E7%82%B9/index.xml" rel="self" type="application/rss+xml"/><item><title>hdu 2874 Connections between cities (添加虚点，并查集+LCA(rmq+dfs))</title><link>http://example.org/2016/05/hdu-2874/</link><pubDate>Sat, 21 May 2016 04:58:22 +0000</pubDate><guid>http://example.org/2016/05/hdu-2874/</guid><description>hdu2874题目链接
题意：给一个森林，问两点的最短距离，或者输出两点不联通。
思路：最最重要的一点是:添加虚点！
最最重要的一点是:添加虚点！
最最重要的一点是:添加虚点！
所谓虚点，就是之前假设某个不存在的点，有点类似做辅助线。
通过添加虚点，我们可以把这个森林转化成一棵树。
这样求两点的距离就可以转化成一棵树上的两点的距离。
用dis[u]+dis[v]-2*dis[LCA(u,v)]来求。 dis[i]表示节点i到新的树根节点的距离。
不联通的话就是LCA 为0的情况（0是添加的虚点，作为新的树的根）
具体添加虚点的方法是：森林中每棵树的根连边到虚点上。权值大小随意，因为最后会抵消（？） 为了知道每棵树的根，需要用到并查集(其实根是随便定义的，但是森林中每棵树只能一个点和虚点相连不然就出现环了，所以需要用到并查集）
以及了解了（？）并查集的非递归的路径压缩写法。。。？
缺点是速度更慢，优点是不会爆栈。。。
还有需要学习一下按rank合并和按size合并的进阶并查集。。。？
以及：RE了好多次是因为。。。添加了虚点0，所以各种下标都应该是从0开始，初始化清空的时候忘了（从0开始）清vector&amp;hellip;导致多组数据一直往edge[0]里面添加边。。。然后就炸了（手动微笑）
/* *********************************************** Author :111qqz Created Time :2016年05月20日 星期五 19时31分44秒 File Name :code/hdu/2874.cpp ************************************************ */ #include &amp;lt;cstdio&amp;gt; #include &amp;lt;cstring&amp;gt; #include &amp;lt;iostream&amp;gt; #include &amp;lt;algorithm&amp;gt; #include &amp;lt;vector&amp;gt; #include &amp;lt;queue&amp;gt; #include &amp;lt;set&amp;gt; #include &amp;lt;map&amp;gt; #include &amp;lt;string&amp;gt; #include &amp;lt;cmath&amp;gt; #include &amp;lt;cstdlib&amp;gt; #include &amp;lt;ctime&amp;gt; #define fst first #define sec second #define lson l,m,rt&amp;lt;&amp;lt;1 #define rson m+1,r,rt&amp;lt;&amp;lt;1|1 #define ms(a,x) memset(a,x,sizeof(a)) typedef long long LL; #define pi pair &amp;lt; int ,int &amp;gt; #define MP make_pair using namespace std; const double eps = 1E-8; const int dx4[4]={1,0,0,-1}; const int dy4[4]={0,-1,1,0}; const int inf = 0x3f3f3f3f; const int N=2E4+7; int n,m,q; vector &amp;lt; pi &amp;gt; edge[N]; int dis[N]; int E[2*N],depth[2*N],R[2*N]; int p; int dp[2*N][20]; int f[N]; /*int root2 ( int a) { int x = a,ret; while (x!</description></item></channel></rss>