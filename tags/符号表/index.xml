<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>符号表 on 111qqz的小窝</title><link>http://example.org/tags/%E7%AC%A6%E5%8F%B7%E8%A1%A8/</link><description>Recent content in 符号表 on 111qqz的小窝</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Wed, 15 Aug 2018 13:12:17 +0000</lastBuildDate><atom:link href="http://example.org/tags/%E7%AC%A6%E5%8F%B7%E8%A1%A8/index.xml" rel="self" type="application/rss+xml"/><item><title>记录一次因动态库符号表可见性导致的未定义的引用(undefined reference)</title><link>http://example.org/2018/08/symbol-table-visibility/</link><pubDate>Wed, 15 Aug 2018 13:12:17 +0000</pubDate><guid>http://example.org/2018/08/symbol-table-visibility/</guid><description>编译某代码，发现报错某函数未定义的引用。该函数的是先前编译得到的动态库中。
先去check了该函数的实现，还有接口与头文件中的声明是否统一。发现没有问题。
然后怀疑.cpp文件没有被编译到，于是在该函数中添加
#pragma message(&amp;quot;******************************8&amp;quot;)
发现的确被编译到了。
使用nm来查看动态库中的符号表，发现也可以找到这个函数的符号。
于是怀疑编译代码的时候没有链接到该动态库。
于是在make的时候打印详细信息。make VERBOSE=1
发现也的确链接了动态库&amp;hellip;.
见鬼了Orz
然后用readelf -s 来查看动态库，惊讶得发现要找的那个符号的BIND怎么是LOCAL..也就是只有文件内可见。
最后发现&amp;hellip;是公司内部的工具和CMakeLists中的add_library冲突&amp;hellip;
虽然这个坑的解决方案没什么价值&amp;hellip;不过因为这个坑了解了一些之前没有了解的部分，也算值得。
关于动态库的符号可见性：
控制的原因是，如果不控制，那么不同的cpp文件可能有相同的变量名字，如果把所有的符号都暴露，很可能在链接时产生冲突。 另外一个原因是，暴露没有必要的符号，会导致符号表的size变大，从而使得link时速度变慢。
参考资料:
Introduction to symbol visibility
readelf elf文件格式分析
Hiding what&amp;rsquo;s exposed in a shared library
Why is the new C++ visibility support so useful?</description></item></channel></rss>