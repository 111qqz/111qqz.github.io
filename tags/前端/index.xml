<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>前端 on 111qqz的小窝</title><link>https://111qqz.com/tags/%E5%89%8D%E7%AB%AF/</link><description>Recent content in 前端 on 111qqz的小窝</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><copyright>Copyright © 2012-2022 all rights reserved.</copyright><lastBuildDate>Thu, 06 Sep 2018 09:56:57 +0000</lastBuildDate><atom:link href="https://111qqz.com/tags/%E5%89%8D%E7%AB%AF/index.xml" rel="self" type="application/rss+xml"/><item><title>前端To do list</title><link>https://111qqz.com/2018/09/front-end-to-do-list/</link><pubDate>Thu, 06 Sep 2018 09:56:57 +0000</pubDate><guid>https://111qqz.com/2018/09/front-end-to-do-list/</guid><description>
20181014update: 可以不写了，开心
迫于生计，要从零开始学习前端。
由于之前的to do list 年代久远+ 前端的技术栈可之前几乎没有关系，因此新开一篇记录。
* css盒子模型 * 布局,flex * 前端debug的方法 * &amp;lt;del&amp;gt;javascript,&amp;lt;/del&amp;gt;有空可以使用js刷leetcode练习语法 * &amp;lt;del&amp;gt;typescript&amp;lt;/del&amp;gt; * jsx，以及jsx的typescript版tsx * 学习axios https://alligator.io/react/axios-react/ * 学习dva: https://github.com/sorrycc/blog/issues/62 * 学习umijs https://umijs.org/zh/guide/with-dva.html#</description></item><item><title>typescript学习笔记</title><link>https://111qqz.com/2018/09/typescript-notes/</link><pubDate>Wed, 05 Sep 2018 08:02:42 +0000</pubDate><guid>https://111qqz.com/2018/09/typescript-notes/</guid><description>
先放参考资料:
TypeScript 入门教程
React &amp;amp; Webpack
react-typescript-cheatsheet (强推一波，讲了很多react+ts的实践）
typescript是javascript的语法扩展。。。好处是提供了类型。。可以在编译（结果为js文件)的时候提供静态的类型检查。。。
typescript的问号语法:标记某个参数为可选。
例子:
export class Thread { id: string; lastMessage: Message; name: string; avatarSrc: string; constructor(id?: string, name?: string, avatarSrc?: string) { this.id = id || uuid(); this.name = name; this.avatarSrc = avatarSrc; } } 关于typescript的类型推断。。如果在定义时直接赋值则会进行推断，否则会推断类型为any.
let myFavoriteNumber = 'seven'; myFavoriteNumber = 7; // index.ts(2,1): error TS2322: Type 'number' is not assignable to type 'string'. //上面的写法会编译错误，原因是定义时已经推断类型为string //但是下面的写法没有问题 let myFavoriteNumber; myFavoriteNumber = 'seven'; myFavoriteNumber = 7; let myFavoriteNumber: string | number; myFavoriteNumber = 'seven'; myFavoriteNumber = 7; 这里的 let myFavoriteNumber: string | number 的含义是， 允许 myFavoriteNumber 的类型是 string 或者 number，但是不能是其他类型。 当 TypeScript 不确定一个联合类型的变量到底是哪个类型的时候，我们只能访问此联合类型的所有类型里共有的属性或方法</description></item><item><title>Redux 学习笔记</title><link>https://111qqz.com/2018/08/redux-notes/</link><pubDate>Thu, 30 Aug 2018 12:05:35 +0000</pubDate><guid>https://111qqz.com/2018/08/redux-notes/</guid><description>
Redux是Flux架构的一种实现。
至于Flux架构是什么，可以参考Flux 架构入门教程
粗略得讲，和MVC架构是同一类东西，最大的区别是单向数据流，禁止了Model和VIEW层之间数据的流动。 Image not found a.warning-link { color: inherit !important; font-weight: inherit !important; text-decoration: underline !important; border-bottom: none !important; } 网站链接: /2018/08/redux-notes/http://www.ruanyifeng.com/blogimg/asset/2016/bg2016011503.png
链接到文件: /content/post/工程/http://www.ruanyifeng.com/blogimg/asset/2016/bg2016011503.png
使用 Page Bundles: true</description></item><item><title>JavaScript 学习笔记</title><link>https://111qqz.com/2018/08/javascript-notes/</link><pubDate>Thu, 30 Aug 2018 03:42:19 +0000</pubDate><guid>https://111qqz.com/2018/08/javascript-notes/</guid><description>
暂时没空从头开始搞...用到哪里先记录一下好了orz
我觉得不行，还是要先大致了解一下。
参考资料:
A re-introduction to JavaScript (JS tutorial)
继承与原型链
// 让我们假设我们有一个对象 o, 其有自己的属性 a 和 b： // {a: 1, b: 2} // o 的 [[Prototype]] 有属性 b 和 c： // {b: 3, c: 4} // 最后, o.[[Prototype]].[[Prototype]] 是 null. // 这就是原型链的末尾，即 null， // 根据定义，null 没有[[Prototype]]. // 综上，整个原型链如下: // {a:1, b:2} ---&amp;gt; {b:3, c:4} ---&amp;gt; null console.log(o.a); // 1 // a是o的自身属性吗？是的，该属性的值为1 console.log(o.b); // 2 // b是o的自身属性吗？是的，该属性的值为2 // 原型上也有一个'b'属性,但是它不会被访问到.这种情况称为&amp;quot;属性遮蔽 (property shadowing)&amp;quot; console.</description></item><item><title>react学习笔记</title><link>https://111qqz.com/2018/08/react-notes/</link><pubDate>Tue, 28 Aug 2018 10:16:16 +0000</pubDate><guid>https://111qqz.com/2018/08/react-notes/</guid><description>
首先介绍一个fb家的快速开发react的工具 create-react-app
这个东西依赖node6.0或者更高版本。
关于在ubuntu 14.04上安装node ，可以参考这个链接
发现执行nvm install 6.0会没有任何相应...但是实际上已经安装好了。
接下来安装create-react-app
命令是: npm install --global create-react-app
然后创建一个react app
命令为:create-react-app first_react_app
挂着代理大概需要半小时左右。
或者可以使用淘宝npm镜像:
设置方法为：npm config set registry https://registry.npm.taobao.org，设置完成后，重新执行create-react-app first-app
实现的第一个组件，功能是点击按钮增加计数...
import React, { Component } from 'react'; class ClickCounter extends Component{ constructor(props){ super(props); this.onClickButton = this.onClickButton.bind(this); this.state = {count:0}; } onClickButton(){ this.setState({count: this.state.count+1}); } render(){ return( &amp;lt;div&amp;gt; &amp;lt;button onClick={this.onClickButton}&amp;gt;Who am I?&amp;lt;/button&amp;gt; &amp;lt;div&amp;gt; click Count: {this.state.count} &amp;lt;/div&amp;gt; &amp;lt;/div&amp;gt; ) } } export default ClickCounter; JSX是JS的语法扩展。JSX中使用的元素包含html中的元素和React中的组件。React 判断一个元素是 HTML 元素还是 React 组件的原则就是看第一个字母是否大 写。</description></item></channel></rss>