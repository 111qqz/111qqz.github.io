<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>编译器 on 111qqz的小窝</title><link>http://example.org/tags/%E7%BC%96%E8%AF%91%E5%99%A8/</link><description>Recent content in 编译器 on 111qqz的小窝</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Mon, 12 Dec 2016 09:02:12 +0000</lastBuildDate><atom:link href="http://example.org/tags/%E7%BC%96%E8%AF%91%E5%99%A8/index.xml" rel="self" type="application/rss+xml"/><item><title>编译原理实验：词法分析器</title><link>http://example.org/2016/12/</link><pubDate>Mon, 12 Dec 2016 09:02:12 +0000</pubDate><guid>http://example.org/2016/12/</guid><description>实验一　设计实现简单语言的词法分析器 1、实验目的
通过该实验,熟练应用编译原理关于词法分析的基本理论和方法；学会用C/C++高级程序设计语言设计一个词法分析器；加深对编译原理理论的分析理解，提高实际操作和解决具体问题的能力。
2、实验条件
计算机上安装C/C++编译处理软件。
3、实验内容及要求
对下述单词表定义的语言设计编制一个词法分析器。单词符号及种别表和词法分析器功能及基本要求如下：
（1）单词符号及种别表
处理用户提交的符合上述词法的源代码序列，进行词法分析，并输出单词二元组。
4、主要参考步骤
(1)画出识别上述语言单词的状态转换图
(2)用C/C++语言编写词法分析程序（应考虑能被语法分析程序调用）
(3)预处理，去除注释、多余空格、Tab字符、回车换行符等
(4)设计若干用例，上机测试并通过所设计实现的词法分析器
1. +++-123.456e-127*+45.99e+200++abc+-cnt++49 2. (+123.456+-456.789e-120)*m2+(a++456)*-c123 3. ++4+1.4 4. a+-149+49.7e+127+m123 5. x=a++1.27e+18 6. --20+-124.987e+127+-xyz begin if(x&amp;gt;=-1.27e-18) xyz=(x1+y1)* -124.987e+127
7. --20+-124. e+111-137++569.246e+(123+ivar); x=1;if(x&amp;gt;1) y=1234; x=(123+abc); (本例应有出错信息)
5、思考
数字的正负号与运算符加减如何处理，识别数字的DFA怎样和运算符加减等融合在一起，进而指导词法分析器的程序编写。
6、实验报告提交格式
(1) 总体设计思想
(2) 详细算法设计
(3) 流程框图
(4) 函数相关说明
(5) 输入与输出（包括出错处理）
(6) 程序运行结果（屏幕截图）
(7) 词法分析器使用说明
(8) 心得与体会
(9) 源程序清单
——————————————————————————————————————————————————————————————————————————————
主要时间卡在了double转二进制上&amp;hellip;
有的人说需要转，有的人说不需要orz
我能想到的办法。。大概就是要高精度＋手动实现itof?
一点也不美啊。。。求好看的方法orz
/* *********************************************** Author :111qqz Created Time :2016年12月09日 星期五 10时39分52秒 ************************************************ */ #include &amp;lt;cstdio&amp;gt; #include &amp;lt;cstring&amp;gt; #include &amp;lt;iostream&amp;gt; #include &amp;lt;algorithm&amp;gt; #include &amp;lt;vector&amp;gt; #include &amp;lt;queue&amp;gt; #include &amp;lt;set&amp;gt; #include &amp;lt;map&amp;gt; #include &amp;lt;string&amp;gt; #include &amp;lt;cmath&amp;gt; #include &amp;lt;cstdlib&amp;gt; #include &amp;lt;ctime&amp;gt; #define fst first #define sec second #define lson l,m,rt&amp;lt;&amp;lt;1 #define rson m+1,r,rt&amp;lt;&amp;lt;1|1 #define ms(a,x) memset(a,x,sizeof(a)) typedef long long LL; #define pi pair &amp;lt; int ,int &amp;gt; #define MP make_pair using namespace std; const double eps = 1E-200; const int dx4[4]={1,0,0,-1}; const int dy4[4]={0,-1,1,0}; const int inf = 0x3f3f3f3f; const int MAX = 2E4+5; map&amp;lt;string,int&amp;gt;mp; char code[MAX]; /* * ascii code: * sapce -&amp;gt;32 * n -&amp;gt;10 * tab-&amp;gt;9 */ char token[100]; int Reallen = 0 ; int codelen = 0; //table size:26 char table[][10]={&amp;quot;main&amp;quot;,&amp;quot;int&amp;quot;,&amp;quot;float&amp;quot;,&amp;quot;double&amp;quot;,&amp;quot;char&amp;quot;,&amp;quot;if&amp;quot;,&amp;quot;else&amp;quot;,&amp;quot;do&amp;quot;,&amp;quot;while&amp;quot;}; bool comment = false; int row; void killchar(char *code) { int len = strlen(code); //cout&amp;lt;&amp;lt;&amp;quot;len:&amp;quot;&amp;lt;&amp;lt;len&amp;lt;&amp;lt;endl; for ( int i = 0 ;i &amp;lt; len ; i++) { // if (code[i]==32||code[i]==10||code[i]==9) continue; if (i&amp;lt;len-1) { if (code[i]=='/'&amp;amp;&amp;amp;code[i+1]=='*') { // cout&amp;lt;&amp;lt;&amp;quot;xgxgxg&amp;quot;&amp;lt;&amp;lt;endl; comment = true; i+=2; continue; } if (code[i]=='*'&amp;amp;&amp;amp;code[i+1]=='/') { comment = false; i+=2; continue; } } if (comment) continue; code[Reallen++] = code[i]; } } bool letter(char ch) { if (ch&amp;gt;='A'&amp;amp;&amp;amp;ch&amp;lt;='Z') return true; if (ch&amp;gt;='a'&amp;amp;&amp;amp;ch&amp;lt;='z') return true; return false; } bool digit(char ch) { if (ch&amp;gt;='0'&amp;amp;&amp;amp;ch&amp;lt;='9') return true; return false; } int state; int sum = 0 ; //记录数值 int sign; //0,1,-1,分别表示没有符号，正号，符号。 int pos = 0 ; int dblcmp(double d) { return d&amp;lt;-eps?</description></item></channel></rss>