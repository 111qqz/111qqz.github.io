<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>cpp on 111qqz的小窝</title><link>https://111qqz.com/tags/cpp/</link><description>Recent content in cpp on 111qqz的小窝</description><generator>Hugo -- gohugo.io</generator><language>en</language><copyright>Copyright © 2012-2022 all rights reserved.</copyright><lastBuildDate>Tue, 12 Apr 2022 21:39:31 +0800</lastBuildDate><atom:link href="https://111qqz.com/tags/cpp/index.xml" rel="self" type="application/rss+xml"/><item><title>浅谈 Cpp Value Categories</title><link>https://111qqz.com/2022/04/cpp-value-categories/</link><pubDate>Tue, 12 Apr 2022 21:39:31 +0800</pubDate><guid>https://111qqz.com/2022/04/cpp-value-categories/</guid><description>
背景 每一个cpp expression都有一个type 和 value category 属性 前者大家都比较了解，但是后者却常常被忽视
Value Categories in the c language cpp是由c语言发展而来，因此这里先介绍c 语言中的value category
c语言只有简单的lvalue和rvalue两种
lvalue lvalue的&amp;quot;l&amp;quot;表示&amp;quot;left&amp;quot;,表示lvalue可以出现在assigment operator的左边
更准确的说
Tip &amp;quot;lvalue is a value refer to an object&amp;quot; &amp;quot;an object is a region of storage&amp;quot;
所以通俗的说，lvalue就是可以取地址(存在storage region)的值 实际上编译器可能会对lvalue做优化，导致实际没有占用storage 但是cpp保证可以在编程时认为lvalue 一定是有占用storage的
rvalue 一切不是lvalue的值都是rvalue
大部分字面量都是rvalue, 但是string(比如&amp;quot;hello world&amp;quot;)不是 E1+E2是rvalue, 其中E1和E2不限制是何种value 但是实际上并不是所有的rvalue都不会占用storage 原因是字面量的空间是有限的,如果是一个非常大的int值，那么实际上可能是会占用地址的
然而，cpp 要求不要依赖这个行为来编程 Warning 也就是可以一直认为rvalue(non-class)是不会占用storage的 因此也不能取地址
为啥要区分lvalue 和rvalue? 原因之一是，编译器可以根据value category 做更多优化 比如对于如下代码
1 2int x = 3; 可以在汇编得到的代码中直接用立即数3而不是放在data storage中</description></item><item><title>std::shared_ptr 学习笔记</title><link>https://111qqz.com/2022/03/std-shared-ptr-notes/</link><pubDate>Sat, 05 Mar 2022 16:33:25 +0800</pubDate><guid>https://111qqz.com/2022/03/std-shared-ptr-notes/</guid><description>
概述 std::shared_ptr是智能指针的一种，在modern c++中被广泛使用（甚至滥用)
虽然天天使用，但是有些细节还不是100%清楚，因此来整理一下 为了方便表述，下文只写shared_ptr,不在写std的namespace.
组成 shared_ptr的实现中，成员通常由两部分组成。一个是所涵盖对象的指针，一个是control block 的指针
control block Tip 最重要的是，control block是 dynamically-allocated 的
(校招的时候某次面试，让我手写shared_ptr的实现，当时被多个object如何共享引用计数卡住了。。主要就是没意识到control block是单独allocate的，shared_ptr的实现中只是保留一个指针)
control block中通常包含五部分
either a pointer to the managed object or the managed object itself; the deleter (type-erased); the allocator (type-erased); the number of shared_ptrs that own the managed object; the number of weak_ptrs that refer to the managed object. 这里面有几点值得强调：
两个引用计数都是atomic的。 weak_ptr是为了解决循环引用 type-erased是什么？ 后面会介绍 线程安全 shared_ptr的线程安全性快成c++面试的top10经典八股文了 Tip 简单说，shared_ptr&amp;lt;T&amp;gt;的引用计数的实现是线程安全的(通常是两个atomic变量)，但是对于T的操作不是线程安全的*</description></item><item><title>[c++17] std::any 笔记</title><link>https://111qqz.com/2022/03/std-any-notes/</link><pubDate>Sat, 05 Mar 2022 16:02:36 +0800</pubDate><guid>https://111qqz.com/2022/03/std-any-notes/</guid><description>
背景 一种很常见的背景是，需要表示未知类型的数据。 比如可能是用户提供的数据，比如是一个Cache的实现， value想支持任意类型的数据
对于这种场景，c语言的出身的开发者通常会使用void*来实现
1struct day { 2 // ...things... 3 void* user_data; 4}; 5 6struct month { 7 std::vector&amp;lt;day&amp;gt; days; 8 void* user_data; 9}; 10 了解cpp11的开发者可能会使用std::shared_ptr&amp;lt;void&amp;gt; 来实现
1struct day { 2 // ...things... 3 std::shared_ptr&amp;lt;void&amp;gt; user_data; 4}; 5 6struct month { 7 std::vector&amp;lt;day&amp;gt; days; 8 std::shared_ptr&amp;lt;void&amp;gt; user_data; 9}; 10 那么有没有更好的实现办法呢？是有的，c++17中提供了std::any
std::any含义 The class any describes a type-safe container for single values of any copy constructible type. Tip 重点是提供了类型安全。</description></item><item><title>[c++11] std::async std::packaged_task std::promise and std::future notes</title><link>https://111qqz.com/2018/09/c11-async-packaged-ask-promise-future-notes/</link><pubDate>Sun, 30 Sep 2018 06:49:27 +0000</pubDate><guid>https://111qqz.com/2018/09/c11-async-packaged-ask-promise-future-notes/</guid><description>
把std::async,std::packaged_task,std::promise三个放在一起来说,是因为他们都可以返回一个std::future对象.简单来说,当某个线程需要等待一个特定的一次性事件(one-off event),它可以用一个&amp;quot;future&amp;quot;来表示这个事件.
std::async 有的时候可能你需要做一个花费事件比较长的计算,但是计算结果不是立刻需要.这个时候就可以用一个新的线程来做这个计算.这里比较关键的问题是如何将在新线程进行计算的结果传回到当前线程,因为std::thread并没有提供一个类似的机制.
这个时候就需要std::async登场了.
1 2 #include &amp;lt;future&amp;gt;3 #include &amp;lt;iostream&amp;gt;4 int find_the_answer_to_ltuae(); 5 void do_other_stuff(); 6 int main() 7 { 8 std::future&amp;lt;int&amp;gt; the_answer=std::async(find_the_answer_to_ltuae); 9 do_other_stuff(); 10 std::cout&amp;lt;&amp;lt;&amp;#34;The answer is &amp;#34;&amp;lt;&amp;lt;the_answer.get()&amp;lt;&amp;lt;std::endl; 11 } 当然也可以与向std::thread包装的thread function中传参数一样,向std::async中传参数,如下:
1 2 #include &amp;lt;string&amp;gt;3 #include &amp;lt;future&amp;gt;4 struct X 5 { 6 void foo(int,std::string const&amp;amp;); 7 std::string bar(std::string const&amp;amp;); 8 }; 9 X x; 10 auto f1=std::async(&amp;amp;X::foo,&amp;amp;x,42,&amp;#34;hello&amp;#34;); // 调用p-&amp;gt;foo(42, &amp;#34;hello&amp;#34;)，p是指向x的指针 11 auto f2=std::async(&amp;amp;X::bar,x,&amp;#34;goodbye&amp;#34;); // 调用tmpx.bar(&amp;#34;goodbye&amp;#34;)， tmpx是x的拷贝副本 12 struct Y 13 { 14 double operator()(double); 15 }; 16 Y y; 17 auto f3=std::async(Y(),3.</description></item><item><title>[C++11]std::condition_variable notes</title><link>https://111qqz.com/2018/09/condition_variable-notes/</link><pubDate>Sun, 23 Sep 2018 08:42:33 +0000</pubDate><guid>https://111qqz.com/2018/09/condition_variable-notes/</guid><description>
condition_variable 类是同步原语，能用于阻塞一个线程，或同时阻塞多个线程，直至另一线程修改共享变量（条件）并通知 condition_variable 。 用人话来说,condition_variable，也就是条件变量，是线程间通信的一种方式。
线程之间在很多时候需要通信，比如经典的生产者消费者问题
一个比较naive的方案是，用mutex来保护一个flag,然后另一线程不停得check这个flag的状态是否改变。以及在这个方案上的改进:让另一个线程check之后，可以先睡一段时间。
但是这两种方法都不够好。第一种不好的原因当然是不停得check，肯定会耗费大量的资源。而第二种，由于没办法准确估计要休眠的时间，因此不够实际。
这个时候我们可以考虑使用条件变量。
条件变量是可以用在如下场景: 一个或者多个线程在等某个条件的成立，而这个条件由另外的线程所控制。当该条件成立时，控制该条件的线程会主动通知这些线程，将这些线程唤醒。
如下是一个最简单的例子:
1 std::mutex mut; 2 std::queue&amp;lt;data_chunk&amp;gt; data_queue; // 1 3 std::condition_variable data_cond; 4 5 void data_preparation_thread() 6 { 7 while(more_data_to_prepare()) 8 { 9 data_chunk const data=prepare_data(); 10 std::lock_guard&amp;lt;std::mutex&amp;gt; lk(mut); 11 data_queue.push(data); // 2 12 data_cond.notify_one(); // 3 13 } 14 } 15 16 void data_processing_thread() 17 { 18 while(true) 19 { 20 std::unique_lock&amp;lt;std::mutex&amp;gt; lk(mut); // 4 21 data_cond.wait( 22 lk,[]{return !</description></item><item><title>std::call_once &amp;&amp; std::once_flag notes</title><link>https://111qqz.com/2018/09/stdcall_once-stdonce_flag-notes/</link><pubDate>Thu, 20 Sep 2018 12:47:46 +0000</pubDate><guid>https://111qqz.com/2018/09/stdcall_once-stdonce_flag-notes/</guid><description>
多线程保护数据时，一种较为特殊的情况是只需要保护资源的初始化。
资源初始化一般遵循&amp;quot;lazy initialization&amp;quot;的原则，也就是在用到该资源最近的地方再初始化。
比较容易想到的办法是用std::mutex，将资源初始化的地方锁起来，如下:
1 std::shared_ptr&amp;lt;some_resource&amp;gt; resource_ptr; 2 std::mutex resource_mutex; 3 void foo() 4 { 5 std::unique_lock&amp;lt;std::mutex&amp;gt; lk(resource_mutex); 6 if(!resource_ptr) 7 { 8 resource_ptr.reset(new some_resource); 9 } 10 lk.unlock(); 11 resource_ptr-&amp;gt;do_something(); 12 } 13 这确实是一个办法。但是初始化时如果需要耗费比较多的时间，当有比较多的线程时，一个线程初始化时，其他线程会耗时间在不必要的等待上。
在c++11以后，我们可以使用std::once_flag和std::call_once来解决资源初始化时加锁的问题。比起显示调用std::mutex的好处是，资源消耗更少。
下面是两个例子:
1 std::shared_ptr&amp;lt;some_resource&amp;gt; resource_ptr; 2 std::once_flag resource_flag; 3 b 4 void init_resource() 5 { 6 resource_ptr.reset(new some_resource); 7 } 8 void foo() 9 { 10 std::call_once(resource_flag,init_resource); 11 resource_ptr-&amp;gt;do_something(); 12 } 13 14 15 16 17 class X 18 { 19 private: 20 connection_info connection_details; 21 connection_handle connection; 22 std::once_flag connection_init_flag; 23 void open_connection() 24 { 25 connection=connection_manager.</description></item><item><title>[c++11 ]std::move 右值引用 转移语义 完美转发 notes</title><link>https://111qqz.com/2018/09/c11-stdmove-notes/</link><pubDate>Sun, 09 Sep 2018 13:01:45 +0000</pubDate><guid>https://111qqz.com/2018/09/c11-stdmove-notes/</guid><description>
起因是在看&amp;lt;CplusplusConcurrencyInAction_PracticalMultithreading&amp;gt;，里面讲到转移一个std::thread的ownership提到了std::move.
之前[C++11 ] std::ref&amp;amp;&amp;amp;std::reference_wrapper notes 提到的情况是在我们想要用引用的时候却进行了拷贝，得到不符合期望的结果。现在的情况是，有些object或许是不支持拷贝构造的。比如std::unique_str,std::ifstream，这个时候如果我们需要传参数进去，就可以使用std::move来实现。比如下面这个例子:
1 2 void process_big_object(std::unique_ptr&amp;lt;big_object&amp;gt;); 3 std::unique_ptr&amp;lt;big_object&amp;gt; p(new big_object); 4 p-&amp;gt;prepare_data(42); 5 std::thread t(process_big_object,std::move(p)); 6 当然这只是使用std::move的一种情形，即传递不允许拷贝构造的object作为参数。
另外，std::move可以更有效率地传递资源。内容之后补orz
实际上std::move()的作用是传进去一个object,返回这个object的右值引用（rvalue reference）
首先区分左值和右值，这其实是一个c语言中就有的概念（作为区分，右值引用是C++11中新引入的概念）
一般来说，右值是不能被取地址的值。在C++11之前，右值是不能被引用的。
语法上为了区分C++11之前的引用（也就是左值引用&amp;amp;）,右值引用的符号为&amp;amp;&amp;amp;
1 void process_value(int&amp;amp; i) { 2 std::cout &amp;lt;&amp;lt; &amp;#34;LValue processed: &amp;#34; &amp;lt;&amp;lt; i &amp;lt;&amp;lt; std::endl; 3 } 4 5 void process_value(int&amp;amp;&amp;amp; i) { 6 std::cout &amp;lt;&amp;lt; &amp;#34;RValue processed: &amp;#34; &amp;lt;&amp;lt; i &amp;lt;&amp;lt; std::endl; 7 } 8 9 int main() { 10 int a = 0; 11 process_value(a); 12 process_value(1); 13 } 14 LValue processed: 0 15 RValue processed: 1 那么为什么要引入“右值引用”这个概念？ 主要有两个目的：完美转发(Perfect Forwarding)和转移语义(Move Sementics)</description></item><item><title>[C++11 ] std::ref&amp;&amp;std::reference_wrapper notes</title><link>https://111qqz.com/2018/09/reference_wrapper-notes/</link><pubDate>Sun, 09 Sep 2018 11:28:53 +0000</pubDate><guid>https://111qqz.com/2018/09/reference_wrapper-notes/</guid><description>
起因是在看《CplusplusConcurrencyInAction_PracticalMultithreading》的时候，里面讲到初始化std::thread的时候，如果thread funtion的参数列表中有引用，需要传入std::ref才可以得到符合预期的结果。
查阅发现std::ref是用来生成std::reference_wrapper。 按照 cppreference 上的话来说
`std::reference_wrapper` 是包装引用于可复制、可赋值对象的类模板。它常用作将容器存储入无法正常保有引用的标准容器（类似 [std::vector](https://zh.cppreference.com/w/cpp/container/vector) ）的机制。 用人话来说，就是有的时候一些地方（比如STL容器中传值，又比如std::bind）会默认使用复制，这可能与我们想使用引用的期望不符。
具体见下面的几个例子：
1 2 #include &amp;lt;functional&amp;gt;3 #include &amp;lt;iostream&amp;gt;4 5 void f(int&amp;amp; n1, int&amp;amp; n2, const int&amp;amp; n3) 6 { 7 std::cout &amp;lt;&amp;lt; &amp;#34;In function: &amp;#34; &amp;lt;&amp;lt; n1 &amp;lt;&amp;lt; &amp;#39; &amp;#39; &amp;lt;&amp;lt; n2 &amp;lt;&amp;lt; &amp;#39; &amp;#39; &amp;lt;&amp;lt; n3 &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;; 8 ++n1; // increments the copy of n1 stored in the function object 9 ++n2; // increments the main()&amp;#39;s n2 10 // ++n3; // compile error 11 } 12 13 int main() 14 { 15 int n1 = 1, n2 = 2, n3 = 3; 16 std::function&amp;lt;void()&amp;gt; bound_f = std::bind(f, n1, std::ref(n2), std::cref(n3)); 17 n1 = 10; 18 n2 = 11; 19 n3 = 12; 20 std::cout &amp;lt;&amp;lt; &amp;#34;Before function: &amp;#34; &amp;lt;&amp;lt; n1 &amp;lt;&amp;lt; &amp;#39; &amp;#39; &amp;lt;&amp;lt; n2 &amp;lt;&amp;lt; &amp;#39; &amp;#39; &amp;lt;&amp;lt; n3 &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;; 21 bound_f(); 22 std::cout &amp;lt;&amp;lt; &amp;#34;After function: &amp;#34; &amp;lt;&amp;lt; n1 &amp;lt;&amp;lt; &amp;#39; &amp;#39; &amp;lt;&amp;lt; n2 &amp;lt;&amp;lt; &amp;#39; &amp;#39; &amp;lt;&amp;lt; n3 &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;; 23 } Before function: 10 11 12 In function: 1 11 12 After function: 10 12 12 我们发现直接传进去的参数n1的值没有改变，而使用std::ref传进去的值的结果符合预期。</description></item><item><title>[设计模式] 观察者( Observer )模式学习笔记</title><link>https://111qqz.com/2018/09/observer-pattern-notes/</link><pubDate>Sat, 01 Sep 2018 09:27:40 +0000</pubDate><guid>https://111qqz.com/2018/09/observer-pattern-notes/</guid><description>
最近在学习node.js，里面讲到node.js的事件机制使用了观察者模式，因此来学习一下。
观察者模式的目的是定义对象间的一种一对多的依赖关系，当一个对象的状态发生改变时，所有依赖于它的对象都得到通知并被自动更新。
因此观察者模式又叫发布-订阅模式。
下面放一个简化之后的例子:
1 2 3 #include &amp;lt;iostream&amp;gt;4 #include &amp;lt;vector&amp;gt;5 #include &amp;lt;string&amp;gt;6 using namespace std; 7 class Secretary; 8 // 看股票的同事类（观察对象，观察者） 9 class StockObserver 10 { 11 public: 12 StockObserver(string strName, Secretary* strSub) 13 { 14 name = strName; 15 sub = strSub; 16 } 17 18 void Update(); 19 20 private: 21 string name; 22 Secretary* sub;我所理解的设计模式（C++实现）——观察者模式（Observer Pattern） 23 }; 24 25 // 秘书类（主题对象，通知者） 26 class Secretary 27 { 28 29 public: 30 string action; 31 void Add(StockObserver ob) { observers.</description></item><item><title>[C++11] promise &amp;&amp; future leanrning notes</title><link>https://111qqz.com/2018/08/promise-future-notes/</link><pubDate>Thu, 23 Aug 2018 02:45:53 +0000</pubDate><guid>https://111qqz.com/2018/08/promise-future-notes/</guid><description>
用人话就是，主线程传给附属线程一个promise Object,然后主线程想要获取附属线程set给promise Object的值（也就是该线程返回的某个结果），需要通过主线程中的promise object 得到对应的future object(每个promise 对应一个 future),然后调用future 的get方法。如果附属线程没有执行作为参数传入的promise的set方法去返回结果，那么程序就会block住。
1 /* *********************************************** 2Author :111qqz 3mail: renkuanze@sensetime.com 4Created Time :2018年08月23日 星期四 10时37分07秒 5File Name :future_sample.cpp 6************************************************ */ 7 8 #include &amp;lt;iostream&amp;gt;9 #include &amp;lt;thread&amp;gt;10 #include &amp;lt;future&amp;gt;11 12 void initiazer(std::promise&amp;lt;int&amp;gt; * promObj) 13 { 14 //std::cout&amp;lt;&amp;lt;&amp;#34;Inside Thread&amp;#34;&amp;lt;&amp;lt;std::endl; 15 for ( int i = 1 ; i &amp;lt;= 2000000000 ; i++); 16 //promObj-&amp;gt;set_value(35); 17 } 18 19 int main() 20 { 21 std::promise&amp;lt;int&amp;gt; promiseObj; 22 std::future&amp;lt;int&amp;gt; futureObj = promiseObj.</description></item><item><title>把二进制文件按字节读到vector中</title><link>https://111qqz.com/2018/08/how-to-read-binary-data-into-cpp-vector/</link><pubDate>Tue, 21 Aug 2018 06:08:56 +0000</pubDate><guid>https://111qqz.com/2018/08/how-to-read-binary-data-into-cpp-vector/</guid><description>
1 std::vector&amp;lt;unsigned char&amp;gt; readFromFile1(const char* filePath) { 2 FILE* file = fopen(filePath, &amp;#34;rb&amp;#34;); 3 std::vector&amp;lt;unsigned char&amp;gt; result; 4 if (file == nullptr) { 5 return result; 6 } 7 8 // 获取文件大小，尽量一次读完 9 size_t fileSize = getFileSize(file); 10 if (fileSize != 0) { 11 result.resize(fileSize); 12 size_t n = fread(&amp;amp;result[0], 1, fileSize, file); 13 assert(n &amp;lt;= fileSize); 14 if (n != fileSize) { 15 result.resize(n); 16 } 17 } 18 19 // 在读取过程当中，有可能文件大小有变化，再尝试读取 20 const size_t read_len = 1024; 21 char buf[read_len]; 22 for (;;) { 23 size_t n = fread(buf, 1, read_len, file); 24 result.</description></item><item><title>boost:property_tree 学习笔记</title><link>https://111qqz.com/2018/08/boost_property_tree-notes/</link><pubDate>Mon, 20 Aug 2018 08:10:16 +0000</pubDate><guid>https://111qqz.com/2018/08/boost_property_tree-notes/</guid><description>
先放资料:
How to use boost::property_tree to load and write JSON
How to iterate a boost property tree?
不出现key的方法遍历一个json文件:
1 /* *********************************************** 2Author :111qqz 3mail: renkuanze@sensetime.com 4Created Time :2018年08月17日 星期五 15时29分23秒 5File Name :ptree.cpp 6************************************************ */ 7 #include &amp;lt;boost/property_tree/ptree.hpp&amp;gt;8 #include &amp;lt;boost/property_tree/json_parser.hpp&amp;gt;9 #include &amp;lt;bits/stdc++.h&amp;gt;10 #include &amp;lt;vector&amp;gt;11 using namespace std; 12 using boost::property_tree::ptree; 13 14 string indent(int level) { 15 string s; 16 for (int i=0; i&amp;lt;level; i++) s += &amp;#34; &amp;#34;; 17 return s; 18 } 19 20 void printTree (ptree &amp;amp;pt, int level) { 21 if (pt.</description></item><item><title>记录一次因动态库符号表可见性导致的未定义的引用(undefined reference)</title><link>https://111qqz.com/2018/08/symbol-table-visibility/</link><pubDate>Wed, 15 Aug 2018 13:12:17 +0000</pubDate><guid>https://111qqz.com/2018/08/symbol-table-visibility/</guid><description>
编译某代码，发现报错某函数未定义的引用。该函数的是先前编译得到的动态库中。
先去check了该函数的实现，还有接口与头文件中的声明是否统一。发现没有问题。
然后怀疑.cpp文件没有被编译到，于是在该函数中添加
#pragma message(&amp;quot;******************************8&amp;quot;)
发现的确被编译到了。
使用nm来查看动态库中的符号表，发现也可以找到这个函数的符号。
于是怀疑编译代码的时候没有链接到该动态库。
于是在make的时候打印详细信息。make VERBOSE=1
发现也的确链接了动态库....
见鬼了Orz
然后用readelf -s 来查看动态库，惊讶得发现要找的那个符号的BIND怎么是LOCAL..也就是只有文件内可见。
最后发现...是公司内部的工具和CMakeLists中的add_library冲突...
虽然这个坑的解决方案没什么价值...不过因为这个坑了解了一些之前没有了解的部分，也算值得。
关于动态库的符号可见性：
控制的原因是，如果不控制，那么不同的cpp文件可能有相同的变量名字，如果把所有的符号都暴露，很可能在链接时产生冲突。 另外一个原因是，暴露没有必要的符号，会导致符号表的size变大，从而使得link时速度变慢。
参考资料:
Introduction to symbol visibility
readelf elf文件格式分析
Hiding what's exposed in a shared library
Why is the new C++ visibility support so useful?</description></item><item><title>c++11 function 与bind 学习笔记</title><link>https://111qqz.com/2018/07/cpp11-function-bind-notes/</link><pubDate>Thu, 19 Jul 2018 10:46:26 +0000</pubDate><guid>https://111qqz.com/2018/07/cpp11-function-bind-notes/</guid><description>
C++11 std::function 是一种通用、多态的函数封装,它的实例可以对任何可 以调用的目标实体进行存储、复制和调用操作
见下面的例子
1 /* *********************************************** 2Author :111qqz 3mail: renkuanze@sensetime.com 4Created Time :2018年07月19日 星期四 17时41分00秒 5File Name :bind.cpp 6************************************************ */ 7 #include &amp;lt;functional&amp;gt;8 #include &amp;lt;iostream&amp;gt;9 using namespace std; 10 float foo( int x,int y,int z){return x+y+z+1.;} 11 int main() 12 { 13 function&amp;lt;int(int,int)&amp;gt;func = foo; 14 int y = 10; 15 function&amp;lt;int(int)&amp;gt;fun = [&amp;amp;]( int value)-&amp;gt;int 16 { 17 return 1+value+y; 18 }; 19 cout&amp;lt;&amp;lt;func(15,4,9)&amp;lt;&amp;lt;endl; 20 cout&amp;lt;&amp;lt;fun(8)&amp;lt;&amp;lt;endl; 21 return 0; 22 } 23 std::bind 则是用来绑定函数调用的参数的,它解决的需求是我们有时候可 能并不一定能够一次性获得调用某个函数的全部参数,通过这个函数,我们可以将 部分调用参数提前绑定到函数身上成为一个新的对象,然后在参数齐全后,完成调 用</description></item><item><title>C++ 记录代码运行时间</title><link>https://111qqz.com/2018/07/Record-code-run-time-with-cpp/</link><pubDate>Tue, 10 Jul 2018 02:26:50 +0000</pubDate><guid>https://111qqz.com/2018/07/Record-code-run-time-with-cpp/</guid><description>
以前用的办法太老土啦
看到一个since C++11的方法，我觉得比较优雅
1 #include &amp;lt;iostream&amp;gt;2 #include &amp;lt;chrono&amp;gt;3 //#include &amp;lt;ratio&amp;gt; 4 #include &amp;lt;thread&amp;gt;5 6 void f() 7 { 8 std::this_thread::sleep_for(std::chrono::seconds(1)); 9 } 10 11 int main() 12 { 13 auto t1 = std::chrono::high_resolution_clock::now(); 14 f(); 15 auto t2 = std::chrono::high_resolution_clock::now(); 16 17 // floating-point duration: no duration_cast needed 18 std::chrono::duration&amp;lt;double, std::milli&amp;gt; fp_ms = t2 - t1; 19 20 // integral duration: requires duration_cast 21 auto int_ms = std::chrono::duration_cast&amp;lt;std::chrono::milliseconds&amp;gt;(t2 - t1); 22 23 // converting integral duration to integral duration of shorter divisible time unit: 24 // no duration_cast needed 25 std::chrono::duration&amp;lt;long, std::micro&amp;gt; int_usec = int_ms; 26 27 std::cout &amp;lt;&amp;lt; &amp;#34;f() took &amp;#34; &amp;lt;&amp;lt; fp_ms.</description></item><item><title>gdb学习笔记</title><link>https://111qqz.com/2018/07/gdb-notes/</link><pubDate>Fri, 06 Jul 2018 07:44:38 +0000</pubDate><guid>https://111qqz.com/2018/07/gdb-notes/</guid><description>
用gdb调试c++的时候，需要添加-g编译选项add_compile_options(-g)，并且关掉各种编译优化
如果是多线程程序，可以用info threads 查看每个线程的信息
然后用thread [id] 查看指定线程，并用bt查看调用栈。
gdb调试的时候，可以用ctrl+c 停住程序，来查看调用栈，然后按c(continue)继续程序的运行。
emmm
先放一些相关的。
Linux 下如何产生core文件（core dump设置）
ulimit -a 查看限制
ulimit -c unlimited 表示这只为不限制core文件大小
用gdb的调试命令如下:
gdb ./test core.2065</description></item><item><title>linux 下C++ 连接mysql 数据库</title><link>https://111qqz.com/2018/07/connect-mysql-with-cpp-under-linux/</link><pubDate>Mon, 02 Jul 2018 07:02:28 +0000</pubDate><guid>https://111qqz.com/2018/07/connect-mysql-with-cpp-under-linux/</guid><description>
资料推荐这个:MySQL C API programming tutorial
环境为ubuntu 14.04 lts
需要安装mysql 和mysql 开发包
sudo apt-get install libmysqlclient15-dev mysql-server mysql-client
先在mysql 中建立test数据库和test表格
　mysql&amp;gt;create database test; mysql&amp;gt;use test; //切换到test数据库中 mysql&amp;gt; create table test(name varchar(255),num int(10) ); //创建一个叫test的表 mysql&amp;gt;show create table test; //显示刚才创建的表信息 mysql&amp;gt; select * from test; //查询test表中数据 mysql&amp;gt;quit 然后用如下cpp代码连接
#include &amp;lt;cstdio&amp;gt; #include &amp;lt;mysql.h&amp;gt; #include &amp;lt;cstring&amp;gt; int main(int argc,char *argv[]) { MYSQL conn; int res; mysql_init(&amp;amp;conn); if (mysql_real_connect(&amp;amp;conn,&amp;quot;localhost&amp;quot;,&amp;quot;root&amp;quot;,&amp;quot;2254965&amp;quot;,&amp;quot;test&amp;quot;,0,NULL,CLIENT_FOUND_ROWS)) { puts(&amp;quot;connect success&amp;quot;); res = mysql_query(&amp;amp;conn,&amp;quot;insert into test values('sensetime','23333')&amp;quot;); if (res) puts(&amp;quot;error&amp;quot;); else puts(&amp;quot;success&amp;quot;); printf(&amp;quot;res=%d\n&amp;quot;,res); } return 0; } 编译:</description></item><item><title>C++ STL Algotithms 学习笔记</title><link>https://111qqz.com/2018/05/c-stl-algotithms-notes/</link><pubDate>Sun, 06 May 2018 09:45:50 +0000</pubDate><guid>https://111qqz.com/2018/05/c-stl-algotithms-notes/</guid><description>
迫于拙劣的cpp水平，这次来记录一些关于STL算法部分的内容。
参考内容是CS106L的course reader
Iterator Categories Iterators分为以下五种:
* Output Iterators:可以使用&amp;quot;++&amp;quot;；可以用*myItr = value,不能用value = *myItr * Input Iterators:可以使用&amp;quot;++&amp;quot;;可以用value = *myItr，不能用*myItr = value * Forward Iterators: 可以使用&amp;quot;++&amp;quot;,可以同时用value = *myItr和*myItr = value * Bidirectional Iterators:比起Forward Iterator 对了&amp;quot;--&amp;quot;,但是不能+或者+= * Random-Access Iterators：比起Bidirectional Iterators多了+和+= Algorithm Naming Conventions 一些关于STL Algorithm的命名规则
后缀_if表示只有当满足一定条件的时候该算法才会执行一定任务。
比如:
1 2 bool IsEven(int value) { 3 return value % 2 == 0; 4 } 5 cout &amp;lt;&amp;lt; count_if(myVec.begin(), myVec.end(), IsEven) &amp;lt;&amp;lt; endl; _n表示执行一个特定的操作n次。</description></item><item><title>C++ IO Streams 学习笔记</title><link>https://111qqz.com/2018/05/cpp-io-streams-notes/</link><pubDate>Fri, 04 May 2018 03:48:37 +0000</pubDate><guid>https://111qqz.com/2018/05/cpp-io-streams-notes/</guid><description>
迫于拙劣的cpp水平，来补补以前忽略掉的cpp细节。
老规矩，先放资料。
参考资料:
A Gentle Introduction to C++ IO Streams
"Designing and implementing a general input/output facility for a programming language is notoriously difficult" - Bjarne Stroustrup Stream的基本认识 说说我的理解。stream(流)可以看做输入输出的抽象。我们通过流可以忽略掉device的细节，采取同样的输入输出方式。
对于任何原生的cpp类型，都可以用stream来处理。用户自定义的类，也可以通过重载&amp;lt;&amp;lt;和&amp;gt;&amp;gt;而让stream可以处理。
1 2 #include &amp;lt;iostream&amp;gt;3 #include &amp;lt;ctime&amp;gt;4 #include &amp;lt;sstream&amp;gt;5 #include &amp;lt;fstream&amp;gt;6 7 using namespace std; 8 9 // timestamp returns the current time as a string 10 std::string timestamp(); 11 12 class LogStatement; 13 ostream&amp;amp; operator&amp;lt;&amp;lt;(ostream&amp;amp; ost, const LogStatement&amp;amp; ls); 14 15 class LogStatement 16 { 17 public: 18 LogStatement(std::string s): data(s), time_string( timestamp() ) 19 { }; 20 21 //This method handles all the outputs.</description></item><item><title>cmake 学习笔记</title><link>https://111qqz.com/2018/03/cmake-notes/</link><pubDate>Sun, 18 Mar 2018 10:27:26 +0000</pubDate><guid>https://111qqz.com/2018/03/cmake-notes/</guid><description>
前置技能点：
gnu make
linux下.so,.a,.o文件
cmake是一个工具，也可以看成一门语言。
学习cmake最大的障碍在于看不懂全是大写的英文
学习cmake主要参考了《cmake practice》
不过感觉作者有些啰嗦...不重要的东西讲了半天，重要的东西却一带而过。。。表述得也不是特别流畅。。。但是还是感谢作者的分享吧orz...
cmake的定位是大型项目构建工具。
目前适用于C/C++/JAVA的项目。
可以不需要自己写makefile文件。
既然cmake可以看做一门语言，那么自然就有语法。
下面只是列举一些常用的。不常用的可以用到的时候再去查。这里也会不定期补充。
cmake的语法中，对于变量大小写敏感，对于cmake的关键字大小写不敏感，不过习惯于全部大写。
cmake有两种编译方式，一种叫in source 编译（就是直接在工程目录编译）
一种叫out of source 编译，就是在工程目录下新建build,然后在build文件夹里编译。
一般都采用out of source的方式编译，这样可以使得编译得到的结果都存放在build文件夹里，不会和源代码混在一起。
set 命令用来定义变量：
SET(HELLO_SRC main.SOURCE_PATHc)
然后就可以用${HELLO_SRC}　来引用这个变量了（例外：在if语句中，是直接使用变量名引用，而不需要${}）
ADD_EXECUTABLE来定义生成的可执行文件的名字：
ADD_EXECUTABLE(hello SRC_LIST)
表示源文件是SRC_LIST 中定义的源文件列表，生成一个文件名为hello的可执行文件。
如果有多个参数，可以写成：
ADD_EXECUTABLE(hello main.c func.c)或者 ADD_EXECUTABLE(hello main.c;func.c)
ADD_SUBDIRECTORY指令：
ADD_SUBDIRECTORY(source_dir [binary_dir] [EXCLUDE_FROM_ALL]) 这个指令用于向当前工程添加存放源文件的子目录,并可以指定中间二进制和目标二进制存 放的位置。EXCLUDE_FROM_ALL 参数的含义是将这个目录从编译过程中排除,比如,工程 的 example,可能就需要工程构建完成后,再进入 example 目录单独进行构建(当然,你 也可以通过定义依赖来解决此类问题)。
ADD_LIBRARY(hello SHARED ${LIBHELLO_SRC})：生成动态(共享)库
语法为：ADD_LIBRARY(libname [SHARED|STATIC|MODULE] [EXCLUDE_FROM_ALL] source1 source2 ... sourceN)
常用到的是SHARED动态库，STATIC静态库
SET_TARGET_PROPERTIES：可以修改生成的库的名字
SET_TARGET_PROPERTIES(hello_static PROPERTIES OUTPUT_NAME &amp;quot;hello&amp;quot;)</description></item><item><title>CUDA C Best Practices Guide 阅读笔记（二） Heterogeneous Computing</title><link>https://111qqz.com/2018/02/cuda-c-best-practices-guide-heterogeneous-computing/</link><pubDate>Tue, 13 Feb 2018 06:38:38 +0000</pubDate><guid>https://111qqz.com/2018/02/cuda-c-best-practices-guide-heterogeneous-computing/</guid><description>
CUDA 编程涉及到在不同的平台上同时运行代码:包含CPU的host 和包含GPU的device.
所以了解host和device的对性能优化是非常重要的。
2.1. Differences between Host and Device Threading resources host 上能同时运行的线程数目比较少（比如24个）
device上能同时运行的线程数目比较多（数量级通常为1E3，1E4等）
Threads 操作系统必须交换CPU执行通道上和下的线程以提供多线程功能。因此，上下文切换(当交换两个线程时)既慢又昂贵。
相比之下，GPU上的线程非常轻量级。在典型的系统中，成千上万的线程排队等待工作(每个线程有32个线程)。如果GPU必须等待 one warp of threads，它只需开始在另一个线程上执行工作。
简而言之，CPU内核被设计为每次最小化一个或两个线程的等待时间，而GPU被设计为处理大量并发的轻量级线程以最大化吞吐量。
RAM host和device 各自具有各自不同的附接物理存储器。host和device内存由PCI Express ( PCIe )总线分隔，因此host内存中的项目必须偶尔通过总线传送到device内存，反之亦然
2.2. What Runs on a CUDA-Enabled Device? 下面谈谈应该把应用的哪些部分放在device 上运行
* 大数据集上的算术运算 * 为了获得最佳性能，设备上运行的相邻线程的内存访问应该具有一定的一致性。**某些内存访问模式使硬件能够将多个数据项的读或写组合并到一个操作中**。当在CUDA上的计算中使用时，无法布局以实现合并的数据，或者没有足够的局部性来有效地使用L1或纹理缓存的数据，将倾向于看到较小的加速比。 * host和device之间的数据交换尽可能少 * **换到device上执行的数据一定会被做足够多的运算**，不然数据从Host传送到device的代价 可能与该运算在device上并行计算的优势向抵消，甚至得不偿失。 * **数据应尽可能长时间保存在设备上。**因为传输应该最小化，所以在同一数据上运行多个内核的程序应该倾向于在内核调用之间将数据保留在设备上，而不是将中间结果传输到主机，然后再将它们发送回设备进行后续计算。就是说，如果有一段连续的操作要处理某些数据，就算其中的部分操作在host上运行要比在device上快（比如不是算数运算而是逻辑处理），那么考虑到数据传输的巨大代价，将所有数据都放在device上处理可能会更好。这种处理原则即使相对较慢的内核也可能是有利的，如果它避免了一个或多个PCIe传输。</description></item><item><title>cuda c++ 基础算法库 thrust 学习笔记</title><link>https://111qqz.com/2018/02/cuda-thrust-notes/</link><pubDate>Sat, 10 Feb 2018 08:43:54 +0000</pubDate><guid>https://111qqz.com/2018/02/cuda-thrust-notes/</guid><description>
可以了解成并行版的STL(?
过了一遍nvidia的官方网文档
发现如果熟悉STL的话,thrust没什么太多好说的,看起来很简单...
不过还是开一篇记录一下,一段时间内估计要和cuda c++ 打交道,就当记录使用过程中遇到的问题吧.</description></item><item><title>cuda error checking 学习笔记</title><link>https://111qqz.com/2018/02/cuda-error-checking-notes/</link><pubDate>Fri, 09 Feb 2018 06:55:00 +0000</pubDate><guid>https://111qqz.com/2018/02/cuda-error-checking-notes/</guid><description>
由于发现cuda c++ 的 debug方式和c++ 差别很大,因此打算再开一篇,专门记录一些和error checking 以及debug有关的内容.
Error checks in CUDA code can help catch CUDA errors at their source. There are 2 sources of errors in CUDA source code:
1. Errors from CUDA **API** calls. For example, a call to `cudaMalloc()` might fail. 2. Errors from CUDA **kernel** calls. For example, there might be invalid memory access inside a kernel. All CUDA API calls return a cudaError value, so these calls are easy to check:</description></item><item><title>C++ const 用法总结（转载）</title><link>https://111qqz.com/2017/03/cpp-const/</link><pubDate>Sat, 18 Mar 2017 12:22:32 +0000</pubDate><guid>https://111qqz.com/2017/03/cpp-const/</guid><description>
基本全文照搬了：关于C++ const 的全面总结
总结全面还是要一点时间的orz..感谢原作者，暂时没发现有什么错误（?
其中对我而言比较陌生的是“const修饰成员函数”的用法。。已经加粗。
 C++中的const关键字的用法非常灵活，而使用const将大大改善程序的健壮性，本人根据各方面查到的资料进行总结如下，期望对朋友们有所帮助。 Const 是C++中常用的类型修饰符,常类型是指使用类型修饰符const说明的类型，常类型的变量或对象的值是不能被更新的。
一、Const作用
** **如下表所示：
**No.** **作用** **说明** **参考代码** 1 可以定义const常量 const int Max = 100; 2 便于进行类型检查 const常量有数据类型，而宏常量没有数据类型。编译器可以对前者进行类型安全检查，而对后者只进行字符替换，没有类型安全检查，并且在字符替换时可能会产生意料不到的错误 void f(const int i) { .........} //对传入的参数进行类型检查，不匹配进行提示
3 可以保护被修饰的东西 防止意外的修改，增强程序的健壮性。 void f(const int i) { i=10;//error!</description></item><item><title>C++ sort学习笔记</title><link>https://111qqz.com/2017/03/cpp-sort/</link><pubDate>Wed, 01 Mar 2017 07:27:12 +0000</pubDate><guid>https://111qqz.com/2017/03/cpp-sort/</guid><description>
回想起大一的时候打cf...那个时候对C++还不怎么熟悉。。。用sort不会自定义排序方式。。
于是手写快排。。。直接取中间元素没加随机化。。。跪了。。。
后来知道sort怎么写以后。。发现sort是可以通过的。。。
于是我就一直以为sort是带随机化的快排。。。
然而实际上是：
sort在数据量比较大的时候用quick_sort...当分段后的数据量小于某个门槛，为了避免对此递归带来的额外负担。。采取插入排序的策略。。
以及。。。快排在最快情况下还是会到达平方的复杂度。。。
于是有人发明了introsort...中文翻译叫内省排序。。。？
维基百科_introsort
这个算法其实就是。。对于数据量大的时候。。。一开始还是快排。。。但是当递归深度过深时。。用堆排。。。
据说现在的STL一般都是用了introsort....</description></item><item><title>cpp vector学习笔记</title><link>https://111qqz.com/2017/02/cpp-vector/</link><pubDate>Tue, 28 Feb 2017 07:21:49 +0000</pubDate><guid>https://111qqz.com/2017/02/cpp-vector/</guid><description>
起因是百度实习二面的时候被问了一道类似这样的题：
给我下面的代码，问有没有什么问题。
1 /* *********************************************** 2Author :111qqz 3Created Time :2017年02月28日 星期二 14时49分37秒 4File Name :vector.cpp 5************************************************ */ 6 #include &amp;lt;cstdio&amp;gt;7 #include &amp;lt;vector&amp;gt;8 #include &amp;lt;ctime&amp;gt;9 using namespace std; 10 int func( int x ) //此处函数的条件是不单调...这样才可以触发问题. 11 { 12 return (x-50)*(x-50)+1; 13 } 14 int main() 15 { 16 17 vector&amp;lt;int&amp;gt;vec; 18 int *pint = NULL; 19 for ( int i = 0 ; i &amp;lt; 100 ; i++) 20 { 21 int x = func(i); 22 vec.</description></item></channel></rss>