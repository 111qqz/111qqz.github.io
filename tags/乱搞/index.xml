<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>乱搞 on 111qqz's blog</title><link>https://111qqz.com/tags/%E4%B9%B1%E6%90%9E/</link><description>Recent content in 乱搞 on 111qqz's blog</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><copyright>Copyright © 2012-2022 all rights reserved.</copyright><lastBuildDate>Mon, 25 Sep 2017 10:55:57 +0000</lastBuildDate><atom:link href="https://111qqz.com/tags/%E4%B9%B1%E6%90%9E/index.xml" rel="self" type="application/rss+xml"/><item><title>codeforces edu #29 E. Turn Off The TV (思维，乱搞)</title><link>https://111qqz.com/2017/09/codeforces-edu-29e/</link><pubDate>Mon, 25 Sep 2017 10:55:57 +0000</pubDate><guid>https://111qqz.com/2017/09/codeforces-edu-29e/</guid><description>
题目链接
题意：有若干线段，给出起点和终点，问是否有一个线段是冗余的。冗余的意思是说，对于该线段所覆盖的所有整数点，没有该线段，也能被其他一个或者多个线段覆盖到。如果有，输出任意一个冗余线段即可。
思路：画画图？ 显然可以按照第一关键字左端点升序，第二关键字右端点降序（降序是为了处理 n=2,[1,2],[1,3] 这样的case容易一些），先考虑2种最简单的情况。
第一种是a[i+1]完全被a[i]包裹在里面，准确得说不一定是a[i]，而是之前所有线段的最大右端点的那条线段，此时a[i+1]就是冗余的线段。
第二种是a[i+1]的左端点在之前所有线段的最大右端点右边，此时没有冗余，继续进行。
接下来考虑比较复杂的相交情况，我们画图发现，当前线段是否冗余，只与a[i-1]和a[i+1]有关。
如果第i条线段的左端点，不超过第i-2条线段的右端点的右边一个位置，此时第i-1条线段就是冗余的。
wa了2次。。原因是没认真看题，l,r的范围的最小值是从0开始而不是1。所以总体来说是道水题（调教场的题这么水了么。。。
/* *********************************************** Author :111qqz Created Time :2017年09月25日 星期一 02时57分03秒 File Name :E.cpp ************************************************ */ #include &amp;lt;cstdio&amp;gt; #include &amp;lt;cstring&amp;gt; #include &amp;lt;iostream&amp;gt; #include &amp;lt;algorithm&amp;gt; #include &amp;lt;vector&amp;gt; #include &amp;lt;queue&amp;gt; #include &amp;lt;set&amp;gt; #include &amp;lt;map&amp;gt; #include &amp;lt;string&amp;gt; #include &amp;lt;cmath&amp;gt; #include &amp;lt;cstdlib&amp;gt; #include &amp;lt;ctime&amp;gt; #define PB push_back #define fst first #define sec second #define lson l,m,rt&amp;lt;&amp;lt;1 #define rson m+1,r,rt&amp;lt;&amp;lt;1|1 #define ms(a,x) memset(a,x,sizeof(a)) typedef long long LL; #define pi pair &amp;lt; int ,int &amp;gt; #define MP make_pair using namespace std; const double eps = 1E-8; const int dx4[4]={1,0,0,-1}; const int dy4[4]={0,-1,1,0}; const int inf = 0x3f3f3f3f; const int N=2E5+7; struct Node { int l,r; int id; }a[N]; int n; int ans; vector&amp;lt;int&amp;gt;ret; bool cmp( Node x, Node y) { if (x.</description></item><item><title>BZOJ 1303: [CQOI2009]中位数图（前缀/后缀和乱搞）</title><link>https://111qqz.com/2017/01/bzoj-1303-cqoi2009/</link><pubDate>Mon, 30 Jan 2017 16:09:22 +0000</pubDate><guid>https://111qqz.com/2017/01/bzoj-1303-cqoi2009/</guid><description>
1303: [CQOI2009]中位数图 Time Limit: 1 Sec Memory Limit: 162 MB Submit: 2480 Solved: 1529 [Submit][Status][Discuss]
Description 给出1~n的一个排列，统计该排列有多少个长度为奇数的连续子序列的中位数是b。中位数是指把所有元素从小到大排列后，位于中间的数。
Input 第一行为两个正整数n和b ，第二行为1~n 的排列。
Output 输出一个整数，即中位数为b的连续子序列个数。
Sample Input 7 4 5 7 2 4 3 1 6
Sample Output 4
HINT 第三个样例解释：{4}, {7,2,4}, {5,7,2,4,3}和{5,7,2,4,3,1,6} N&amp;lt;=100000
思路：这道题的思路还是比较经典的...把大于b的数看成1，小于b的数看成-1..于是一段以b为中位数的连续的长度为奇数的数列的和为0.
那么从b往前做一个后缀和，往后做一个前缀和...然后统计每个前缀和/后缀和的值的个数..
然后枚举前缀和/后缀和可能的值（-n..n，由于负数不好处理，整体+n，变成0..2n)
具体见代码
/* *********************************************** Author :111qqz Created Time :2017年01月30日 星期一 20时13分11秒 File Name :code/bzoj/1303.cpp ************************************************ */ #include &amp;lt;cstdio&amp;gt; #include &amp;lt;cstring&amp;gt; #include &amp;lt;iostream&amp;gt; #include &amp;lt;algorithm&amp;gt; #include &amp;lt;vector&amp;gt; #include &amp;lt;queue&amp;gt; #include &amp;lt;set&amp;gt; #include &amp;lt;map&amp;gt; #include &amp;lt;string&amp;gt; #include &amp;lt;cmath&amp;gt; #include &amp;lt;cstdlib&amp;gt; #include &amp;lt;ctime&amp;gt; #define fst first #define sec second #define lson l,m,rt&amp;lt;&amp;lt;1 #define rson m+1,r,rt&amp;lt;&amp;lt;1|1 #define ms(a,x) memset(a,x,sizeof(a)) typedef long long LL; #define pi pair &amp;lt; int ,int &amp;gt; #define MP make_pair using namespace std; const double eps = 1E-8; const int dx4[4]={1,0,0,-1}; const int dy4[4]={0,-1,1,0}; const int inf = 0x3f3f3f3f; const int N=1E5+7; int a[N]; int sum[N]; int l[N*2],r[N*2]; int n,b; int pos; int main() { #ifndef ONLINE_JUDGE freopen(&amp;quot;code/in.</description></item><item><title>BZOJ 1637: [Usaco2007 Mar]Balanced Lineup (前缀和乱搞)</title><link>https://111qqz.com/2016/04/bzoj-1637/</link><pubDate>Fri, 08 Apr 2016 06:59:57 +0000</pubDate><guid>https://111qqz.com/2016/04/bzoj-1637/</guid><description>
1637: [Usaco2007 Mar]Balanced Lineup Time Limit: 5 Sec Memory Limit: 64 MB Submit: 503 Solved: 336 [Submit][Status][Discuss]
Description Farmer John 决定给他的奶牛们照一张合影，他让 N (1 ≤ N ≤ 50,000) 头奶牛站成一条直线，每头牛都有它的坐标(范围: 0..1,000,000,000)和种族(0或1)。 一直以来 Farmer John 总是喜欢做一些非凡的事，当然这次照相也不例外。他只给一部分牛照相，并且这一组牛的阵容必须是“平衡的”。平衡的阵容，指的是在一组牛中，种族0和种族1的牛的数量相等。 请算出最广阔的区间，使这个区间内的牛阵容平衡。区间的大小为区间内最右边的牛的坐标减去最做边的牛的坐标。 输入中，每个种族至少有一头牛，没有两头牛的坐标相同。
Input 行 1: 一个整数: N 行 2..N + 1: 每行两个整数，为种族 ID 和 x 坐标。
Output 行 1: 一个整数，阵容平衡的最大的区间的大小。
Sample Input 7 0 11 1 10 1 25 1 12 1 4 0 13 1 22</description></item><item><title>codeforces #346 div 2 C. Tanya and Toys (暴力乱搞)</title><link>https://111qqz.com/2016/03/codeforces-346-div-2-c-tanya-and-toys-/</link><pubDate>Thu, 31 Mar 2016 08:36:59 +0000</pubDate><guid>https://111qqz.com/2016/03/codeforces-346-div-2-c-tanya-and-toys-/</guid><description>
题目链接 题意:有1E9个礼物，第i个礼物价钱是i,然后现在已经有n个不重复的礼物，a[i],m元钱，想尽可能多得买不同种类的礼物，还能买多少个。 思路：先不考虑已经买的，从1连续买到k,然后考虑子啊这个区间内已经买的，等于实际上没有花钱。 反正就是暴力搞啊搞啊。。我也不知道怎么搞。。 结果最后。。方案数为0的时候。。。最后一个答案我是单独输出的。。忘了判断了。。。所以会输出两个0.宝宝心里苦啊。。。。。。。。
/* *********************************************** Author :111qqz Created Time :2016年03月31日 星期四 00时00分03秒 File Name :code/cf/#346/C.cpp ************************************************ */ #include &amp;lt;cstdio&amp;gt; #include &amp;lt;cstring&amp;gt; #include &amp;lt;iostream&amp;gt; #include &amp;lt;algorithm&amp;gt; #include &amp;lt;vector&amp;gt; #include &amp;lt;queue&amp;gt; #include &amp;lt;set&amp;gt; #include &amp;lt;map&amp;gt; #include &amp;lt;string&amp;gt; #include &amp;lt;cmath&amp;gt; #include &amp;lt;cstdlib&amp;gt; #include &amp;lt;ctime&amp;gt; #define fst first #define sec second #define lson l,m,rt&amp;lt;&amp;lt;1 #define rson m+1,r,rt&amp;lt;&amp;lt;1|1 #define ms(a,x) memset(a,x,sizeof(a)) typedef long long LL; #define pi pair &amp;lt; int ,int &amp;gt; #define MP make_pair using namespace std; const double eps = 1E-8; const int dx4[4]={1,0,0,-1}; const int dy4[4]={0,-1,1,0}; const int inf = 0x3f3f3f3f; const int N=3E5+7; LL n,m; LL a[N]; LL sum[N]; set&amp;lt;LL&amp;gt;se; LL ans[N]; bool vis[N]; int main() { #ifndef ONLINE_JUDGE freopen(&amp;quot;code/in.</description></item><item><title>codeforces 484 B Maximum Value (暴力乱搞)</title><link>https://111qqz.com/2016/03/484b/</link><pubDate>Thu, 31 Mar 2016 07:20:25 +0000</pubDate><guid>https://111qqz.com/2016/03/484b/</guid><description>
题目链接 题意：给出n个元素的序列，求出最大的a[i]%a[j] (i&amp;gt;=j) 思路：没思路。。。。
Let us iterate over all different _a__j_. Since we need to maximize ![](http://codeforces.com/predownloaded/78/b3/78b367327f7d7a7eba50f5e1ebfaf0cb199e1837.png) , then iterate all integer _x_ (such_x_ divisible by _a__j_) in range from 2_a__j_ to _M_, where _M_ — doubled maximum value of the sequence. For each such _x_ we need to find maximum _a__i_, such _a__i_ 题解也没有特别懂。。。感觉和筛法有点类似。
不过学到了一个o(1)时间得到小于x的最大数是多少的做法。
Sort the array and just maintain another array `A` of `10^6` elements where`index i stores element just smaller than i` For example consider sorted array [2,4,7,11], then</description></item><item><title>codeforces #322 div 2 C. Developing Skills(乱搞)</title><link>https://111qqz.com/2015/09/codeforces322div2c-developingskills/</link><pubDate>Wed, 30 Sep 2015 02:38:00 +0000</pubDate><guid>https://111qqz.com/2015/09/codeforces322div2c-developingskills/</guid><description>
time limit per test
1 second
memory limit per test
256 megabytes
input
standard input
output
standard output
Petya loves computer games. Finally a game that he's been waiting for so long came out!
The main character of this game has n different skills, each of which is characterized by an integer a__i from 0 to 100. The higher the number_a__i_ is, the higher is the i-th skill of the character.</description></item></channel></rss>