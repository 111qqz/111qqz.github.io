<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>tsp on Clarity</title><link>https://111qqz.com/tags/tsp/</link><description>Recent content in tsp on Clarity</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><copyright>Copyright © 2008–2018, Steve Francia and the Hugo Authors; all rights reserved.</copyright><lastBuildDate>Sat, 22 Aug 2015 15:09:00 +0000</lastBuildDate><atom:link href="https://111qqz.com/tags/tsp/index.xml" rel="self" type="application/rss+xml"/><item><title>bc #52 div 2 B || hdoj 5418 Victor and World(tsp问题,状压dp)</title><link>https://111qqz.com/2015/08/hdoj5418/</link><pubDate>Sat, 22 Aug 2015 15:09:00 +0000</pubDate><guid>https://111qqz.com/2015/08/hdoj5418/</guid><description>
比赛的时候一看,tsp么
前些天好像刚写过一个clean robot什么的
然后发现n才16,而m很大..
应该有很多重复的.
那么我们取油费最少的.
然后先做一遍 floyd
之后我写了一个dfs...TLE 了...sad
正解是状压dp
虽然没写过状压dp
但是之前写过一道状态压缩的bfs
所以理解起来没有问题.
这道题的做法是:
用dp[i][j]表示当前访问国家的状态为s,要访问的国家为j的时候的最小费用.i是二进制,i的第p位为1表示第p个国家已经访问过了,否则表示没有访问过.
那么状态转移方程则为:dp[i|(1&amp;lt;
初始化的时候d[i][i] =0,其他为inf
dp[0][0] 表示要访问第一个国家且没有访问国人国家的时候的状态,此时花费为0
然后先枚举访问国家的状态,再枚举访问的国家.
/************************************************************************* &amp;gt; File Name: code/bc/#52/rrr1002.cpp &amp;gt; Author: 111qqz &amp;gt; Email: rkz2013@126.com &amp;gt; Created Time: 2015年08月22日 星期六 22时33分20秒 ************************************************************************/ #include&amp;lt;iostream&amp;gt; #include&amp;lt;iomanip&amp;gt; #include&amp;lt;cstdio&amp;gt; #include&amp;lt;algorithm&amp;gt; #include&amp;lt;cmath&amp;gt; #include&amp;lt;cstring&amp;gt; #include&amp;lt;string&amp;gt; #include&amp;lt;map&amp;gt; #include&amp;lt;set&amp;gt; #include&amp;lt;queue&amp;gt; #include&amp;lt;vector&amp;gt; #include&amp;lt;stack&amp;gt; #include&amp;lt;cctype&amp;gt; #define y1 hust111qqz #define yn hez111qqz #define j1 cute111qqz #define ms(a,x) memset(a,x,sizeof(a)) #define lr dying111qqz using namespace std; #define For(i, n) for (int i=0;i&amp;lt;int(n);++i) typedef long long LL; typedef double DB; const int inf = 0x3f3f3f3f; const int N=17; int d[N][N]; int n,m; int dp[(1&amp;lt;&amp;lt;16)+5][N]; void floyd(){ For(k,n){ For(i,n){ For (j,n){ d[i][j] = min ( d[i][j] , d[i][k]+d[k][j]); } } } } void solve() { dp[0][0] = 0; for ( int i = 0 ; i &amp;lt;(1&amp;lt;&amp;lt;n) ; i ++){ for ( int j = 0 ; j &amp;lt; n ;j++){ if (dp[i][j]!</description></item><item><title>poj 2688 Cleaning Robot (tsp问题)</title><link>https://111qqz.com/2015/08/poj2688/</link><pubDate>Sat, 15 Aug 2015 20:16:00 +0000</pubDate><guid>https://111qqz.com/2015/08/poj2688/</guid><description>
＿＿＿＿＿＿
好蠢，竟然没看出来这道题的不同之处，以为就是个搜
然后样例什么的都过了．．．
结果显然wa...
然后才发现，这道题应该是tsp问题．
解法是先跑一遍bfs,
对于所有的脏点和起点，得到没两个点之间的距离．
然后跑一遍dfs，枚举出所有的组合，同时更新答案．
晚安．
/************************************************************************* &amp;gt; File Name: code/poj/rr2688.cpp &amp;gt; Author: 111qqz &amp;gt; Email: rkz2013@126.com &amp;gt; Created Time: 2015年08月16日 星期日 03时39分34秒 ************************************************************************/ #include&amp;lt;iostream&amp;gt; #include&amp;lt;iomanip&amp;gt; #include&amp;lt;cstdio&amp;gt; #include&amp;lt;algorithm&amp;gt; #include&amp;lt;cmath&amp;gt; #include&amp;lt;cstring&amp;gt; #include&amp;lt;string&amp;gt; #include&amp;lt;map&amp;gt; #include&amp;lt;set&amp;gt; #include&amp;lt;queue&amp;gt; #include&amp;lt;vector&amp;gt; #include&amp;lt;stack&amp;gt; #define y0 abc111qqz #define y1 hust111qqz #define yn hez111qqz #define j1 cute111qqz #define tm crazy111qqz #define lr dying111qqz using namespace std; #define REP(i, n) for (int i=0;i&amp;lt;int(n);++i) typedef long long LL; typedef unsigned long long ULL; const int inf = 0x7fffffff; const int N=25; int w,h; char maze[N][N]; int dist[N][N]; int cnt;//机器人与脏地的个数 int tag[N][N];//标记 bool vist[N][N]; struct node { int x,y; int step; bool ok () { if (x&amp;lt;1||x&amp;gt;h||y&amp;lt;1||y&amp;gt;w||vist[x][y]||maze[x][y]=='x') return false; return true; } }pos[N*N]; node robot; int dir[4][2]={0,-1,0,1,-1,0,1,0}; void bfs(node p,int po) { vist[p.</description></item></channel></rss>