<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>树状数组 on 111qqz的小窝</title><link>https://111qqz.com/tags/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84/</link><description>Recent content in 树状数组 on 111qqz的小窝</description><generator>Hugo -- gohugo.io</generator><language>en</language><copyright>Copyright © 2012-2022 all rights reserved.</copyright><lastBuildDate>Wed, 08 Nov 2017 07:05:29 +0000</lastBuildDate><atom:link href="https://111qqz.com/tags/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84/index.xml" rel="self" type="application/rss+xml"/><item><title>hdu 4777 Rabbit Kingdom (树状数组+预处理)</title><link>https://111qqz.com/2017/11/hdu-4777/</link><pubDate>Wed, 08 Nov 2017 07:05:29 +0000</pubDate><guid>https://111qqz.com/2017/11/hdu-4777/</guid><description>
https://vjudge.net/problem/47450/origin
题意： 有一个含有n个数的序列，m个询问。问 [l, r] 区间内与所有数都互质的数有几个？
思路： 想到了预处理每个数最左最右的，最远的互质的数的范围。。
之后对于询问区间[l,r]，我们要知道 对于 i&amp;gt;=L &amp;amp;&amp;amp; i &amp;lt;= R 并且 a[i].l&amp;lt;=L，a[i].r&amp;gt;=R的i的个数...
没有想到怎么维护,gg
转载一段题解：
先算出每个数的有效范围，l[i]，r[i]代表与第i个数一直互质到的最左端和最右端。这个处理方法是，预处理出一张因子表。然后对每个输入的数，判断其因子出现的最接近它的位置。从左到右扫一遍求出l[i]，从右到左扫一遍求出r[i]；我们还需要用一个vector记录下左边界为i时的所有数。 我们思考一个范围内，当一个数的l[i]和r[i]都在范围之外时，这个数会被统计在内。反过来讲就是一个范围在一个数的边界之内，当前的数会被统计到范围之内。
我们先对问题进行离线处理，先根据问题的左边界排序。我们需要维护一个树状数组来统计和增减值。
然后我们按照i从1到n扫一遍，i代表的意义是左边界。
当扫到第i个数时，我们统计左边界为i+1的问题(这样范围一定满足左边界，因为右边界接下来也进行了处理，所以可以直接统计）。
 我们还需要更新第i个数。i的意义是左边界，因为之后统计的问题左边界都大于i，都满足。所以我们找到所有左边界为i的数，将其+1处理。然后右边界-1处理。这样如果问题的边界大于右边界的话，这个数就不会统计在内。
 最后处理完i后，因为以后问题的左边界都大于i，所以第i个数不会再被统计了，所以我们要除去第i个数的影响，就是把其右边界+1（自身为什么不处理，因为处不处理都一样，不会在涉及到它本身了）
转载又一段题解：
先预处理出来每个数的贡献区间，每个数的贡献区间是 [左边最近不互质数的位置，右边最近不互质数的位置] ，现在问题就转化为了求区间 [L, R] 中有几个数的贡献区间能完整覆盖 [L, R] 区间。但是数据范围挺大的，可以考虑用树状数组离线处理来达到优化的目的。先对所有的查询进行排序 (按照L升序排列) ，然后从左到右依次处理。我们用树状数组区间和sum [L, R] 表示区间[L, R]中符合题意的有多少个数。假设现在需要查询 [L, R] 区间，我们可以考虑贡献区间L[i]</description></item><item><title>hdu 5618 Jam's problem again （cdq分治+BIT，三维偏序）</title><link>https://111qqz.com/2017/10/hdu-5618/</link><pubDate>Tue, 10 Oct 2017 12:53:20 +0000</pubDate><guid>https://111qqz.com/2017/10/hdu-5618/</guid><description>
题目链接
题意: If two point such as (xi,yi,zi) and (xj,yj,zj) xi≥xj yi≥yj zi≥zj, the bigger one level add 1
问每个point的level是多少。
思路： cdq分治，先去重并统计相同的点的数量，需要注意要记录原id对应到了哪个新id
/* *********************************************** Author :111qqz Created Time :2017年10月10日 星期二 19时53分38秒 File Name :5618.cpp ************************************************ */ #include &amp;lt;cstdio&amp;gt; #include &amp;lt;cstring&amp;gt; #include &amp;lt;iostream&amp;gt; #include &amp;lt;algorithm&amp;gt; #include &amp;lt;vector&amp;gt; #include &amp;lt;queue&amp;gt; #include &amp;lt;set&amp;gt; #include &amp;lt;map&amp;gt; #include &amp;lt;string&amp;gt; #include &amp;lt;cmath&amp;gt; #include &amp;lt;cstdlib&amp;gt; #include &amp;lt;ctime&amp;gt; #define PB push_back #define fst first #define sec second #define lson l,m,rt&amp;lt;&amp;lt;1 #define rson m+1,r,rt&amp;lt;&amp;lt;1|1 #define ms(a,x) memset(a,x,sizeof(a)) typedef long long LL; #define pi pair &amp;lt; int ,int &amp;gt; #define MP make_pair using namespace std; const double eps = 1E-8; const int dx4[4]={1,0,0,-1}; const int dy4[4]={0,-1,1,0}; const int inf = 0x3f3f3f3f; const int N=1E5+7; int n; struct point { int x,y,z; int id; int cnt,sum; void input( int _id) { scanf(&amp;quot;%d %d %d&amp;quot;,&amp;amp;x,&amp;amp;y,&amp;amp;z); id=_id; } bool operator &amp;lt; (const point &amp;amp;b)const { if (x!</description></item><item><title>BZOJ 3262: 陌上花开 (cdq分治模板题，三维偏序)</title><link>https://111qqz.com/2017/10/bzoj-3262/</link><pubDate>Tue, 10 Oct 2017 11:43:22 +0000</pubDate><guid>https://111qqz.com/2017/10/bzoj-3262/</guid><description>
Description 有n朵花，每朵花有三个属性：花形(s)、颜色(c)、气味(m)，又三个整数表示。现要对每朵花评级，一朵花的级别是它拥有的美丽能超过的花的数量。定义一朵花A比另一朵花B要美丽，当且仅当Sa&amp;gt;=Sb,Ca&amp;gt;=Cb,Ma&amp;gt;=Mb。显然，两朵花可能有同样的属性。需要统计出评出每个等级的花的数量。
Input 第一行为N,K (1 &amp;lt;= N &amp;lt;= 100,000, 1 &amp;lt;= K &amp;lt;= 200,000 ), 分别表示花的数量和最大属性值。
以下N行，每行三个整数si, ci, mi (1 &amp;lt;= si, ci, mi &amp;lt;= K)，表示第i朵花的属性
Output 包含N行，分别表示评级为0...N-1的每级花的数量。
Sample Input 10 3 3 3 3 2 3 3 2 3 1 3 1 1 3 1 2 1 3 1 1 1 2 1 2 2 1 3 2 1 2 1
Sample Output 3 1 3 0 1 0 1 0 0 1</description></item><item><title>codeforces #413 C. Fountains （BIT维护前缀max）</title><link>https://111qqz.com/2017/05/codeforces-div2-413c/</link><pubDate>Fri, 12 May 2017 13:27:36 +0000</pubDate><guid>https://111qqz.com/2017/05/codeforces-div2-413c/</guid><description>
题目链接
题意：有２种货币，分别为C和D.给出n种资源的代价和美丽度，每种资源只能用其中一种资源购买。现在拥有货币C的数量是c,拥有货币D的数量是d.然后恰好买２个资源，问最大美丽度，不能的话输出０．
思路：首先显然三种情况。。。CC，CD,DD.
CD直接扫一遍。。重点是CC和DD
一开始思路错掉了。。全程写two pointer wa4...一直调。。
最后恍然大悟。。发现two pointer非常错啊。。。
其实正解也很简单？
先去跑步了orz
只要想办法维护每个代价的最大美丽度就好了(更准确得说，是维护小于等于某代价的最大美丽度)
直接BIT搞。维护一个前缀max...好像很稳啊？
不过我竟然对于BIT能维护前缀max吃了一惊？
以往都是用线段树来做这个操作的...想想大概是。。我把BIT的函数起名叫&amp;quot;Sum&amp;quot;的锅。。。
看起来就只能求Sum。。。。233333
/* *********************************************** Author :111qqz Created Time :2017年05月12日 星期五 20时20分57秒 File Name :code/codeforces/413/CC.cpp ************************************************ */ #include &amp;lt;cstdio&amp;gt; #include &amp;lt;cstring&amp;gt; #include &amp;lt;iostream&amp;gt; #include &amp;lt;algorithm&amp;gt; #include &amp;lt;vector&amp;gt; #include &amp;lt;queue&amp;gt; #include &amp;lt;set&amp;gt; #include &amp;lt;map&amp;gt; #include &amp;lt;string&amp;gt; #include &amp;lt;cmath&amp;gt; #include &amp;lt;cstdlib&amp;gt; #include &amp;lt;ctime&amp;gt; #define PB push_back #define fst first #define sec second #define lson l,m,rt&amp;lt;&amp;lt;1 #define rson m+1,r,rt&amp;lt;&amp;lt;1|1 #define ms(a,x) memset(a,x,sizeof(a)) typedef long long LL; #define pi pair &amp;lt; int ,int &amp;gt; #define MP make_pair using namespace std; const double eps = 1E-8; const int dx4[4]={1,0,0,-1}; const int dy4[4]={0,-1,1,0}; const int inf = 0x3f3f3f3f; const int N=1E5+7; int n,c,d; int t[N] ; //for BIT vector&amp;lt;pair&amp;lt;int,int&amp;gt; &amp;gt;v[2]; //总的思路是，维护每个代价(或者小于该代价）所对的美丽度的最大值 //用bit维护一个前缀max // // int lowbit( int x) { return x&amp;amp;(-x); } void update( int x,int delta) { for ( int i = x ; i &amp;lt; N ; i+=lowbit(i)) t[i] = max(t[i],delta); } int query( int x) { int ret = 0 ; for ( int i = x ; i&amp;gt;=1 ; i-=lowbit(i)) ret = max(ret,t[i]); return ret; } int main() { #ifndef ONLINE_JUDGE freopen(&amp;quot;code/in.</description></item><item><title>codeforces 594 D. REQ (树状数组+欧拉函数+逆元)</title><link>https://111qqz.com/2016/09/cf594d/</link><pubDate>Thu, 22 Sep 2016 07:48:00 +0000</pubDate><guid>https://111qqz.com/2016/09/cf594d/</guid><description>
题目链接
题意：给出n个数,q个查询，每组一个区间，询问区间中所有数的乘积的欧拉函数9+7的答案是多少。
思路：这道题需要一点欧拉函数的知识。
phi(n)是欧拉函数，意义为小于等于n并且与n互质的数的个数。
To calculate the answer on every query let's use the formula Image not found a.warning-link { color: inherit !important; font-weight: inherit !important; text-decoration: underline !important; border-bottom: none !important; } Web path: /2016/09/cf594d/http://codeforces.com/predownloaded/5a/dd/5add7e69f82f723e3ec1324e302d8958cf65e4b0.png
Disk path: /content/post/ACM-ICPC/http://codeforces.com/predownloaded/5a/dd/5add7e69f82f723e3ec1324e302d8958cf65e4b0.png
Using Page Bundles: true
, where _p_1, p_2, ..., p__k — all prime numbers which divided_n.
如果知道欧拉函数的这个公式。。。那么这道题就成了水题。。。。
考虑两个数a,b的欧拉函数。
一开始考虑也许有什么性质。。。查了下欧拉函数的wiki 欧拉函数_维基百科 欧拉函数是积性函数（但不是完全积性函数。。因此必须phi(ab) =phi(a)*phi(b)成立当且仅当gcd(a,b)==1)
然而这里并不一定满足互质的条件。。。
再想一下。。。发现完全没必要由phi(a)和phi(b)得到phi(a*b)
直接把a*b看成一个数就好了。。。。
后面质因子乘积部分只需要把两部分的并在一起就好了。。。
所以根据上面欧拉函数的公式。。。答案分为两部分。。。
一部分是区间中所有数的乘积。。。</description></item><item><title>codeforces #351 D. Jeff and Removing Periods (线段树/树状数组判断位置成等差数列)</title><link>https://111qqz.com/2016/09/cf351d/</link><pubDate>Sun, 18 Sep 2016 13:53:39 +0000</pubDate><guid>https://111qqz.com/2016/09/cf351d/</guid><description>
题目链接 题意：有n个数，每次可以删除掉数值相同并且所在位置成等差数列（只删2个数或者只删1个数应该也是可以的），删掉这些数以后可以将剩下的数重新以任意顺序排列，称为一次操作。现在给出m个询问，每个询问一个区间[l,r]，问删光区间[l,r]中的数最少需要的操作次数。
思路/题解：由于第一次操作之后可以重排，那么把相同的数放在一起得到一个位置的公差为1的等差数列，之后的答案显然是元素个数。所以需要判断初始的时候，是否能一次删光某个数值的数，也就是需要判断初始时刻是否有某个数出现的所有位置组成一个等差数列。
(去icpc-camp的论坛问了一波。。。链接在这里)
之前刚刚学了判断一个区间中不同的数有多少个的姿势。。。
所以问题就在于如何判断这个等差数列。。。
参考叉姐的思路，我的思路如下：
就是从左往右扫的时候，对于当前的数，看该种数在当前位置左边且离当前位置最近的不能和当前位置构成等差数列的数的位置，然后用树状数组判断这个位置和当前查询区间的左端点的关系，如果左端点在这个位置左边，就不是等差，否则就是等差。 上面是判断一种数的情况。。。我要找到一种数满足题意即可。。
具体做法：
从左到右扫描每个元素，对于每种数字，肯定是有最长的一段后缀是等差数列，假设是 xx 个，那么左端点落在第 x + 1x+1 个后，这种数字就是全是等差数列。 我们可以拿一个树状数组把从第 (x + 1)(x+1) 个数往后全部 +1，询问时只要询问某个元素是不是 0 就可以了。 顺便说一句：叉姐人真的好nice啊。。本来昨天大概找了大半天题解。。看了代码也没看懂。。。
然后晚上去icpc-camp的论坛上问了一波。。。
然后茶姐的回复窝仍然看不懂。。。。。
感觉窝问的应该不是什么困难的问题（虽然我想了好久都想不出）。。。
所以纠结了好久要不要再问一下叉姐。。。。
最后还是问了。。。结果叉姐非常热心而又详细地回答了我。。。。
真是让我这种蒟蒻感动不已啊。。。。orz
怪不得人人爱叉姐。
/* *********************************************** Author :111qqz Created Time :Sun 18 Sep 2016 08:30:02 PM CST File Name :code/cf/problem/351D.cpp ************************************************ */ #include &amp;lt;cstdio&amp;gt; #include &amp;lt;cstring&amp;gt; #include &amp;lt;iostream&amp;gt; #include &amp;lt;algorithm&amp;gt; #include &amp;lt;vector&amp;gt; #include &amp;lt;queue&amp;gt; #include &amp;lt;set&amp;gt; #include &amp;lt;map&amp;gt; #include &amp;lt;string&amp;gt; #include &amp;lt;cmath&amp;gt; #include &amp;lt;cstdlib&amp;gt; #include &amp;lt;ctime&amp;gt; #define fst first #define sec second #define lson l,m,rt&amp;lt;&amp;lt;1 #define rson m+1,r,rt&amp;lt;&amp;lt;1|1 #define ms(a,x) memset(a,x,sizeof(a)) typedef long long LL; #define pi pair &amp;lt; int ,int &amp;gt; #define MP make_pair using namespace std; const double eps = 1E-8; const int dx4[4]={1,0,0,-1}; const int dy4[4]={0,-1,1,0}; const int inf = 0x3f3f3f3f; const int N=1E5+7; int a[N],pre[N],lst[N]; int n,m; int tree[N&amp;lt;&amp;lt;2]; int t[N]; int ans[N]; struct node { int l,r; int id; bool operator &amp;lt; (node b)const { if (r==b.</description></item><item><title>codeforces 220 E. Little Elephant and Inversions (树状数组+尺取)</title><link>https://111qqz.com/2016/09/cf220e/</link><pubDate>Thu, 15 Sep 2016 08:13:56 +0000</pubDate><guid>https://111qqz.com/2016/09/cf220e/</guid><description>
题目链接
题意：
how many pairs of integers l and r are there, such that 1 ≤ l &amp;lt; r ≤ n and sequence b = _a_1_a_2... a__l__a__r__a__r + 1... a__n has no more than k inversions.
我花了两个小时才看懂题。。。。一直没懂b数列中a[l]和a[r]怎么就挨着了。。。
其实意思是。。。只保留a数列中1..l和r..n的。。。构成b数列。。。然后b数列的逆序对数小于等于k.问这样的l,r的对数。
思路：尺取+树状数组。
枚举l,每次找到最小的满足题意的r，对答案的贡献是n-r+1,然后用两个树状数组，分别维护增加或者减少一个树的时候，前半段和后半段对逆序数的影响。
/* *********************************************** Author :111qqz Created Time :Wed 14 Sep 2016 04:23:06 PM CST File Name :code/cf/problem/220E.cpp ************************************************ */ #include &amp;lt;cstdio&amp;gt; #include &amp;lt;cstring&amp;gt; #include &amp;lt;iostream&amp;gt; #include &amp;lt;algorithm&amp;gt; #include &amp;lt;vector&amp;gt; #include &amp;lt;queue&amp;gt; #include &amp;lt;set&amp;gt; #include &amp;lt;map&amp;gt; #include &amp;lt;string&amp;gt; #include &amp;lt;cmath&amp;gt; #include &amp;lt;cstdlib&amp;gt; #include &amp;lt;ctime&amp;gt; #define fst first #define sec second #define lson l,m,rt&amp;lt;&amp;lt;1 #define rson m+1,r,rt&amp;lt;&amp;lt;1|1 #define ms(a,x) memset(a,x,sizeof(a)) typedef long long LL; #define pi pair &amp;lt; int ,int &amp;gt; #define MP make_pair using namespace std; const double eps = 1E-8; const int dx4[4]={1,0,0,-1}; const int dy4[4]={0,-1,1,0}; const int inf = 0x3f3f3f3f; const int N=2E5+7; int tree[2][N]; int a[N],p[N]; int n; LL k; int lowbit( int x) { return x&amp;amp;(-x); } void update (int o, int x,int delta) { if (!</description></item><item><title>BZOJ 3289 Mato的文件管理 (莫队算法套树状数组)</title><link>https://111qqz.com/2016/02/bzoj3289/</link><pubDate>Sat, 20 Feb 2016 03:33:15 +0000</pubDate><guid>https://111qqz.com/2016/02/bzoj3289/</guid><description>
http://www.lydsy.com/JudgeOnline/problem.php?id=3289
题意：中文题目，简单来说就是求某一区间内的逆序对数。
思路：逆序对数想到树状数组。不过写莫队转移的时候没弄明白。。。。大概是树状数组理解的还不够透彻。。。需要复习一下了。。。
还有这题没给数据范围但是需要离散化。。。不然会re...
/* *********************************************** Author :111qqz Created Time :2016年02月17日 星期三 20时18分51秒 File Name :code/bzoj/3289.cpp ************************************************ */ #include &amp;lt;cstdio&amp;gt; #include &amp;lt;cstring&amp;gt; #include &amp;lt;iostream&amp;gt; #include &amp;lt;algorithm&amp;gt; #include &amp;lt;vector&amp;gt; #include &amp;lt;queue&amp;gt; #include &amp;lt;set&amp;gt; #include &amp;lt;map&amp;gt; #include &amp;lt;string&amp;gt; #include &amp;lt;cmath&amp;gt; #include &amp;lt;cstdlib&amp;gt; #include &amp;lt;ctime&amp;gt; #define fst first #define sec second #define lson l,m,rt&amp;lt;&amp;lt;1 #define rson m+1,r,rt&amp;lt;&amp;lt;1|1 #define ms(a,x) memset(a,x,sizeof(a)) typedef long long LL; #define pi pair &amp;lt; int ,int &amp;gt; #define MP make_pair using namespace std; const double eps = 1E-8; const int dx4[4]={1,0,0,-1}; const int dy4[4]={0,-1,1,0}; const int inf = 0x3f3f3f3f; const int N=5E4+11; int n,m; int a[N],b[N]; int pos[N]; LL c[N]; LL ans[N]; LL sum; struct node { int l,r; int id; bool operator &amp;lt; (node b)const { if (pos[l]==pos[b.</description></item><item><title>codeforces 522 A. Vanya and Table</title><link>https://111qqz.com/2015/12/cf552a/</link><pubDate>Mon, 14 Dec 2015 06:44:28 +0000</pubDate><guid>https://111qqz.com/2015/12/cf552a/</guid><description>
http://codeforces.com/problemset/problem/552/A 题意：一个100*100的网格。然后给n个矩形。每个格子中填上包含这个格子的矩形的个数。最后问所有格子的和。 思路：树状数组搞得...然而..直接求所有矩形面积的和就可以啊喂。。o(n)。。。111qqz你个炒鸡大菜鸡。
/* *********************************************** Author :111qqz Created Time :2015年12月14日 星期一 14时01分14秒 File Name :code/cf/problem/552A.cpp ************************************************ */ #include &amp;lt;cstdio&amp;gt; #include &amp;lt;cstring&amp;gt; #include &amp;lt;iostream&amp;gt; #include &amp;lt;algorithm&amp;gt; #include &amp;lt;vector&amp;gt; #include &amp;lt;queue&amp;gt; #include &amp;lt;set&amp;gt; #include &amp;lt;map&amp;gt; #include &amp;lt;string&amp;gt; #include &amp;lt;cmath&amp;gt; #include &amp;lt;cstdlib&amp;gt; #include &amp;lt;ctime&amp;gt; #define fst first #define sec second #define lson l,m,rt&amp;lt;&amp;lt;1 #define rson m+1,r,rt&amp;lt;&amp;lt;1|1 #define ms(a,x) memset(a,x,sizeof(a)) typedef long long LL; #define pi pair &amp;lt; int ,int &amp;gt; #define MP make_pair using namespace std; const double eps = 1E-8; const int dx4[4]={1,0,0,-1}; const int dy4[4]={0,-1,1,0}; const int inf = 0x3f3f3f3f; const int N=1E2+7; int n; int c[N][N]; struct Point { int x1,y1,x2,y2; void input() { scanf(&amp;quot;%d %d&amp;quot;,&amp;amp;x1,&amp;amp;y1); scanf(&amp;quot;%d %d&amp;quot;,&amp;amp;x2,&amp;amp;y2); } }p[N]; int lowbit( int x) { return x&amp;amp;(-x); } void update( int x,int y,int delta) { for ( int i = x ; i &amp;lt;= 105 ; i += lowbit(i)) { for ( int j = y ; j &amp;lt;= 105 ; j +=lowbit(j)) { c[i][j] +=delta; } } } int sum ( int x,int y) { int res = 0 ; for ( int i = x; i&amp;gt;= 1 ; i-=lowbit(i)) { for ( int j = y ; j &amp;gt;= 1 ; j-=lowbit(j)) { res += c[i][j]; // cout&amp;lt;&amp;lt;&amp;quot;res:&amp;quot;&amp;lt;&amp;lt;res&amp;lt;&amp;lt;endl; } } return res; } int main() { #ifndef ONLINE_JUDGE freopen(&amp;quot;code/in.</description></item><item><title>hdu 1394 Minimum Inversion Number (树状数组 逆序对)</title><link>https://111qqz.com/2015/10/hdu1394/</link><pubDate>Wed, 28 Oct 2015 14:00:00 +0000</pubDate><guid>https://111qqz.com/2015/10/hdu1394/</guid><description>
题目链接
题意：
这题是问一个长度为n的循环数组中，逆序对最少的个数。。。
我们可以先用树状数组求出初始的数列的逆序对。。。
然后其他的可以通过递推得到。。。。
当a[i]从处于位置1而被放到最后的时候。。。
cnt = cnt -a[i]+n-a[i]+1;
然后取所有cnt的最大值就行。
/************************************************************************* &amp;gt; File Name: code/hud/1394.cpp &amp;gt; Author: 111qqz &amp;gt; Email: rkz2013@126.com &amp;gt; Created Time: 2015年10月28日 星期三 21时16分47秒 ************************************************************************/ #include&amp;lt;iostream&amp;gt; #include&amp;lt;iomanip&amp;gt; #include&amp;lt;cstdio&amp;gt; #include&amp;lt;algorithm&amp;gt; #include&amp;lt;cmath&amp;gt; #include&amp;lt;cstring&amp;gt; #include&amp;lt;string&amp;gt; #include&amp;lt;map&amp;gt; #include&amp;lt;set&amp;gt; #include&amp;lt;queue&amp;gt; #include&amp;lt;vector&amp;gt; #include&amp;lt;stack&amp;gt; #include&amp;lt;cctype&amp;gt; #define yn hez111qqz #define j1 cute111qqz #define ms(a,x) memset(a,x,sizeof(a)) using namespace std; const int dx4[4]={1,0,0,-1}; const int dy4[4]={0,-1,1,0}; typedef long long LL; typedef double DB; const int inf = 0x3f3f3f3f; const int N=5E3+7; int c[N]; int n,a[N]; int lowbit( int x) { return x&amp;amp;(-x); } void update ( int x,int delta) { for ( int i = x ; i &amp;lt;= n ; i = i + lowbit(i)) c[i] = c[i] + delta; } int Sum( int x) { int res = 0 ; for ( int i = x ;i &amp;gt;= 1; i = i - lowbit(i)) { res = res + c[i]; } return res; } int main() { #ifndef ONLINE_JUDGE freopen(&amp;quot;in.</description></item><item><title>hdu 5480|| bestcoder 　　＃５７　div 2　Conturbatio（前缀和｜｜树状数组）</title><link>https://111qqz.com/2015/09/hdu5480/</link><pubDate>Sat, 26 Sep 2015 17:20:00 +0000</pubDate><guid>https://111qqz.com/2015/09/hdu5480/</guid><description>
比较水．
唯一一点需要注意的是...
可能有重复元素...
因为我的思路是用两棵一维树状数组搞..
每个点标记为1
然后看矩形的两个方向中是否至少有一个方向上和等于长度...
所以这样如果有重复元素的话，不处理会出错..　但实际上又没修改..直接前缀和就好了．．．
树状数组个毛线．．．
不过看到还有人线段树搞得233333
/************************************************************************* &amp;gt; File Name: code/bc/#57/1002.cpp &amp;gt; Author: 111qqz &amp;gt; Email: rkz2013@126.com &amp;gt; Created Time: 2015年09月26日 星期六 19时31分10秒 ************************************************************************/ #include&amp;lt;iostream&amp;gt; #include&amp;lt;iomanip&amp;gt; #include&amp;lt;cstdio&amp;gt; #include&amp;lt;algorithm&amp;gt; #include&amp;lt;cmath&amp;gt; #include&amp;lt;cstring&amp;gt; #include&amp;lt;string&amp;gt; #include&amp;lt;map&amp;gt; #include&amp;lt;set&amp;gt; #include&amp;lt;queue&amp;gt; #include&amp;lt;vector&amp;gt; #include&amp;lt;stack&amp;gt; #include&amp;lt;cctype&amp;gt; #define y1 hust111qqz #define yn hez111qqz #define j1 cute111qqz #define ms(a,x) memset(a,x,sizeof(a)) #define lr dying111qqz using namespace std; #define For(i, n) for (int i=0;i&amp;lt;int(n);++i) typedef long long LL; typedef double DB; const int inf = 0x3f3f3f3f; const int N=1E5+7; int c[N],d[N]; int n,m,K,Q; bool vx[N],vy[N]; int lowbit(int x) { return x&amp;amp;(-x); } void update ( int x,int delta) { for ( int i = x ; i &amp;lt;= n ; i = i + lowbit(i)) { c[i] = c[i] + delta; } } LL sum ( int x) { LL res = 0 ; for ( int i = x ; i &amp;gt;= 1 ; i = i - lowbit(i)) { res = res + c[i]; } return res; } void update2( int y,int delta) { for ( int i = y ; i &amp;lt;= m ; i = i + lowbit(i)) { d[i] = d[i] + delta; } } LL sum2( int y) { LL res = 0 ; for ( int i = y ; i &amp;gt;= 1 ; i = i - lowbit(i)) { res = res + d[i]; } return res; } int main() { #ifndef ONLINE_JUDGE freopen(&amp;quot;in.</description></item><item><title>bestcoder #56 div 2 C Clarke and puzzle (nim游戏　树状数组)</title><link>https://111qqz.com/2015/09/bestcoder56div2cclarkeandpuzzlenim/</link><pubDate>Tue, 22 Sep 2015 03:32:00 +0000</pubDate><guid>https://111qqz.com/2015/09/bestcoder56div2cclarkeandpuzzlenim/</guid><description>
比赛的时候没过．还以为是树状数组写残了． 但实际上是有自己不知道的东西． 这种博弈叫　nim游戏 所以这是一个二维的nim游戏． **nim游戏的性质是xor 和为0必败，否则必胜． xor和也有前缀和性质，所以可以用树状数组维护．
/************************************************************************* &amp;gt; File Name: code/bc/#56/r1003.cpp &amp;gt; Author: 111qqz &amp;gt; Email: rkz2013@126.com &amp;gt; Created Time: 2015年09月22日 星期二 11时10分06秒 ************************************************************************/ #include&amp;lt;iostream&amp;gt; #include&amp;lt;iomanip&amp;gt; #include&amp;lt;cstdio&amp;gt; #include&amp;lt;algorithm&amp;gt; #include&amp;lt;cmath&amp;gt; #include&amp;lt;cstring&amp;gt; #include&amp;lt;string&amp;gt; #include&amp;lt;map&amp;gt; #include&amp;lt;set&amp;gt; #include&amp;lt;queue&amp;gt; #include&amp;lt;vector&amp;gt; #include&amp;lt;stack&amp;gt; #include&amp;lt;cctype&amp;gt; #define y1 hust111qqz #define yn hez111qqz #define j1 cute111qqz #define ms(a,x) memset(a,x,sizeof(a)) #define lr dying111qqz using namespace std; #define For(i, n) for (int i=0;i&amp;lt;int(n);++i) typedef long long LL; typedef double DB; const int inf = 0x3f3f3f3f; const int N=5E2+5; int c[N][N]; int a[N][N]; int n,m,q; int lowbit ( int x) { return x&amp;amp;(-x); } void update (int x,int y,int delta) { for ( int i = x ; i &amp;lt;= n ; i = i + lowbit(i)) { for ( int j = y ; j &amp;lt;= m ; j = j + lowbit(j)) { c[i][j]^=delta; } } } int sum( int x,int y) { int res = 0; for ( int i = x; i &amp;gt;= 1 ; i = i - lowbit(i)) { for ( int j = y ; j &amp;gt;= 1 ; j = j - lowbit(j)) { res ^= c[i][j]; } } return res; } int main() { #ifndef ONLINE_JUDGE freopen(&amp;quot;in.</description></item><item><title>hdu 3333 Turing Tree (求区间中不相同数的和，离线+线段树/树状数组)</title><link>https://111qqz.com/2015/08/hdu3333/</link><pubDate>Fri, 07 Aug 2015 18:42:00 +0000</pubDate><guid>https://111qqz.com/2015/08/hdu3333/</guid><description>
题目链接
喵呜，离散树状数组。
这道题由于相同的值加和的时候只算一次，所以比较伤脑筋==
怎么办呢？
我们发现对于一个值，由于相同的只算一次，所以在任意时间内，这个值只需要出现一次。
如果我们从作往右将原数组更新到树状数组，如果某个值之前出现过，那么我在更新当前的时候，还需要删掉之前那个。
这样就可以保证当前的序列中一个值只出现了一次，而且位置更新成最后出现的位置。
如果只出现一次的话那就又是我们喜闻乐见的那个熟悉的树状数组了呢 喵呜！
但是这样删掉前面出现的元素真心大丈夫？ 万一之后又查询了之前你删掉的点岂不是整个人都萌萌哒了？
所以我们可以按照查询区间的又断点排序，保证前面删掉的点以后不会再被查询。
也就是按照顺序，从左往右，边查询，边更新原数组到树状数组。
由于查询区间是无序的，按照右端点排序之后打乱了原来的查询顺序，所以要离线操作。
由于查询区间是无序的，按照右端点排序之后打乱了原来的查询顺序，所以要离线操作。
由于查询区间是无序的，按照右端点排序之后打乱了原来的查询顺序，所以要离线操作。
** **重要的事情说三遍。
所谓离线操作，就是查询的时候不直接输出答案，而是将答案存起来，然后最后一起输出。
 我们需要开一个数组pre [x] 记录x这个数的上一个位置，初始为-1
由 x的范围太大，数组存不下，所以要离散化。
离散化是为了记录一个数上次出现的位置！
注意要开LL 。
/************************************************************************* &amp;gt; File Name: code/hdu/3333.cpp &amp;gt; Author: 111qqz &amp;gt; Email: rkz2013@126.com &amp;gt; Created Time: 2015年08月07日 星期五 17时04分07秒 ************************************************************************/ #include&amp;lt;iostream&amp;gt; #include&amp;lt;iomanip&amp;gt; #include&amp;lt;cstdio&amp;gt; #include&amp;lt;algorithm&amp;gt; #include&amp;lt;cmath&amp;gt; #include&amp;lt;cstring&amp;gt; #include&amp;lt;string&amp;gt; #include&amp;lt;map&amp;gt; #include&amp;lt;set&amp;gt; #include&amp;lt;queue&amp;gt; #include&amp;lt;vector&amp;gt; #include&amp;lt;stack&amp;gt; #define y0 abc111qqz #define y1 hust111qqz #define yn hez111qqz #define j1 cute111qqz #define tm crazy111qqz #define lr dying111qqz using namespace std; #define REP(i, n) for (int i=0;i&amp;lt;int(n);++i) typedef long long LL; typedef unsigned long long ULL; const int inf = 0x7fffffff; const int N=3E4+3; LL c[N]; LL n,m,qur; LL ref[N]; LL pre[N]; LL ori[N]; struct Q { LL val,id; }q[N]; struct S { LL x,y; LL id,ans; }s[100005]; bool cmp( Q a,Q b) { if (a.</description></item><item><title>hdu 3584 Cube （三维树状数组，更新区间，查询单点）</title><link>https://111qqz.com/2015/08/hdu3584/</link><pubDate>Fri, 07 Aug 2015 06:20:00 +0000</pubDate><guid>https://111qqz.com/2015/08/hdu3584/</guid><description>
三维树状数组
容斥那里注意一下。
多组数据因为忘记清空c数组而wa了1次，细心！
/************************************************************************* &amp;gt; File Name: code/hdu/3584.cpp &amp;gt; Author: 111qqz &amp;gt; Email: rkz2013@126.com &amp;gt; Created Time: 2015年08月07日 星期五 14时01分53秒 ************************************************************************/ #include&amp;lt;iostream&amp;gt; #include&amp;lt;iomanip&amp;gt; #include&amp;lt;cstdio&amp;gt; #include&amp;lt;algorithm&amp;gt; #include&amp;lt;cmath&amp;gt; #include&amp;lt;cstring&amp;gt; #include&amp;lt;string&amp;gt; #include&amp;lt;map&amp;gt; #include&amp;lt;set&amp;gt; #include&amp;lt;queue&amp;gt; #include&amp;lt;vector&amp;gt; #include&amp;lt;stack&amp;gt; #define y0 abc111qqz #define y1 hust111qqz #define yn hez111qqz #define j1 cute111qqz #define tm crazy111qqz #define lr dying111qqz using namespace std; #define REP(i, n) for (int i=0;i&amp;lt;int(n);++i) typedef long long LL; typedef unsigned long long ULL; const int inf = 0x7fffffff; const int N=1E2+5; int c[N][N][N]; int n,m; int x1,y1,z1,x2,y2,z2; int lowbit( int x) { return x&amp;amp;(-x); } void update ( int x,int y,int z,int delta) { for ( int i = x; i &amp;lt;= n ; i = i + lowbit(i)) { for ( int j = y ; j &amp;lt;= n ; j = j + lowbit(j)) { for ( int k = z ; k &amp;lt;= n ; k = k + lowbit(k)) { c[i][j][k] += delta; } } } } int sum (int x,int y,int z) { int res = 0; for ( int i = x; i &amp;gt;= 1 ; i -= lowbit(i)) { for ( int j = y ; j &amp;gt;= 1 ; j -= lowbit(j)) { for ( int k = z ; k &amp;gt;= 1 ; k -= lowbit(k)) { res = res + c[i][j][k]; } } } return res; } int main() { int op; while (scanf(&amp;quot;%d %d&amp;quot;,&amp;amp;n,&amp;amp;m)!</description></item><item><title>poj 2155- Matrix (树状数组，二维，更新区间，查询单点)</title><link>https://111qqz.com/2015/08/poj2155/</link><pubDate>Thu, 06 Aug 2015 18:41:00 +0000</pubDate><guid>https://111qqz.com/2015/08/poj2155/</guid><description>
1
和上一道类似，也是更新区间，查询单点。
用到了容斥原理。
/************************************************************************* &amp;gt; File Name: code/poj/2155.cpp &amp;gt; Author: 111qqz &amp;gt; Email: rkz2013@126.com &amp;gt; Created Time: 2015年08月07日 星期五 00时42分38秒 ************************************************************************/ #include&amp;lt;iostream&amp;gt; #include&amp;lt;iomanip&amp;gt; #include&amp;lt;cstdio&amp;gt; #include&amp;lt;algorithm&amp;gt; #include&amp;lt;cmath&amp;gt; #include&amp;lt;cstring&amp;gt; #include&amp;lt;string&amp;gt; #include&amp;lt;map&amp;gt; #include&amp;lt;set&amp;gt; #include&amp;lt;queue&amp;gt; #include&amp;lt;vector&amp;gt; #include&amp;lt;stack&amp;gt; #define y0 abc111qqz #define y1 hust111qqz #define yn hez111qqz #define j1 cute111qqz #define tm crazy111qqz #define lr dying111qqz using namespace std; #define REP(i, n) for (int i=0;i&amp;lt;int(n);++i) typedef long long LL; typedef unsigned long long ULL; const int inf = 0x7fffffff; const int N=1E3+7; int c[N][N]; int n,m,x1,x2,y1,y2,x,y,t; int lowbit ( int x) { return x&amp;amp;(-x); } void update ( int x,int y ,int delta) { for ( int i = x ; i &amp;lt;= n ; i = i + lowbit(i)) { for ( int j = y; j &amp;lt;= n ; j = j + lowbit(j)) { c[i][j] = c[i][j] + delta; } } } int sum ( int x,int y) { int res = 0; for ( int i = x; i &amp;gt;= 1 ; i = i - lowbit (i)) { for ( int j = y ; j &amp;gt;= 1 ; j = j - lowbit (j)) { res = res + c[i][j]; } } return res; } int main() { int T; cin&amp;gt;&amp;gt;T; while (T--) { memset(c,0,sizeof(c)); scanf(&amp;quot;%d %d&amp;quot;,&amp;amp;n,&amp;amp;t); for ( int i = 1; i &amp;lt;= t; i ++ ) { char cmd; cin&amp;gt;&amp;gt;cmd; if (cmd=='C') { scanf(&amp;quot;%d %d %d %d&amp;quot;,&amp;amp;x1,&amp;amp;y1,&amp;amp;x2,&amp;amp;y2); // cout&amp;lt;&amp;lt;&amp;quot;*******&amp;quot;&amp;lt;&amp;lt;c[2][1]&amp;lt;&amp;lt;&amp;quot; &amp;quot;&amp;lt;&amp;lt;c[2][2]&amp;lt;&amp;lt;endl; update (x1,y1,1); update (x2+1,y1,1); update (x1,y2+1,1); update (x2+1,y2+1,1); // cout&amp;lt;&amp;lt;&amp;quot;*******&amp;quot;&amp;lt;&amp;lt;c[2][1]&amp;lt;&amp;lt;&amp;quot; &amp;quot;&amp;lt;&amp;lt;c[2][2]&amp;lt;&amp;lt;endl; } else { scanf(&amp;quot;%d %d&amp;quot;,&amp;amp;x,&amp;amp;y); int tmp; // cout&amp;lt;&amp;lt;&amp;quot;sum(x)(y):&amp;quot;&amp;lt;&amp;lt;sum(x,y)&amp;lt;&amp;lt;endl; // cout&amp;lt;&amp;lt;&amp;quot;sum(x-1,y-1):&amp;quot;&amp;lt;&amp;lt;sum(x-1,y-1)&amp;lt;&amp;lt;endl; // cout&amp;lt;&amp;lt;&amp;quot;sum(x-1,y):&amp;quot;&amp;lt;&amp;lt;sum(x-1,y)&amp;lt;&amp;lt;endl; // cout&amp;lt;&amp;lt;&amp;quot;sum(x,y-1):&amp;quot;&amp;lt;&amp;lt;sum(x,y-1)&amp;lt;&amp;lt;endl; tmp =sum(x,y)+sum(x-1,y-1)-sum(x-1,y)-sum(x,y-1); // cout&amp;lt;&amp;lt;&amp;quot;tmp:&amp;quot;&amp;lt;&amp;lt;tmp&amp;lt;&amp;lt;endl; if (sum(x,y)%2==0) cout&amp;lt;&amp;lt;0&amp;lt;&amp;lt;endl; else cout&amp;lt;&amp;lt;1&amp;lt;&amp;lt;endl; } // cout&amp;lt;&amp;lt;&amp;quot;*****************&amp;quot;&amp;lt;&amp;lt;endl; // for ( int ii = 1 ; ii &amp;lt;= n ; ii++) // { // for ( int jj = 1 ; jj &amp;lt;= n ; jj++ ) // { // cout&amp;lt;&amp;lt;c[ii][jj]&amp;lt;&amp;lt;&amp;quot; &amp;quot;; // } // cout&amp;lt;&amp;lt;endl; // } // cout&amp;lt;&amp;lt;&amp;quot;*************************&amp;quot;&amp;lt;&amp;lt;endl; // } cout&amp;lt;&amp;lt;endl; } return 0; }</description></item><item><title>hdu 1556Color the ball （树状数组，更新区间，查询单点）</title><link>https://111qqz.com/2015/08/hdu1556/</link><pubDate>Thu, 06 Aug 2015 18:33:00 +0000</pubDate><guid>https://111qqz.com/2015/08/hdu1556/</guid><description>
这道题和之前做的树状数组略有不同。
以前的都是更新单点，查询区间，这次反了过来。
做法差不多。
如果更新区间【x,y】增加１
那么只要 update (x,1),update (y+1,-1)
问单点的时候，sum(i)就是i点的值，而不是1..i的和。
可以看做告诉公路收费口的比喻，update (x,1)相当于入口
update (y+1,-1)相当于出口。
而sum(i)就相当于被几个告诉公路穿过，或者说i点属于几个高速公路，所以是求和
还记得noip2012的时候在tyvj上遇到了一道线段数的题，被＠Ocean　海洋兄用了一个高速公路的神奇比喻解法A掉了。
现在回想，原来是用了树状数组。
/************************************************************************* &amp;gt; File Name: code/hdu/1556.cpp &amp;gt; Author: 111qqz &amp;gt; Email: rkz2013@126.com &amp;gt; Created Time: 2015年08月07日 星期五 01时56分51秒 ************************************************************************/ #include&amp;lt;iostream&amp;gt; #include&amp;lt;iomanip&amp;gt; #include&amp;lt;cstdio&amp;gt; #include&amp;lt;algorithm&amp;gt; #include&amp;lt;cmath&amp;gt; #include&amp;lt;cstring&amp;gt; #include&amp;lt;string&amp;gt; #include&amp;lt;map&amp;gt; #include&amp;lt;set&amp;gt; #include&amp;lt;queue&amp;gt; #include&amp;lt;vector&amp;gt; #include&amp;lt;stack&amp;gt; #define y0 abc111qqz #define y1 hust111qqz #define yn hez111qqz #define j1 cute111qqz #define tm crazy111qqz #define lr dying111qqz using namespace std; #define REP(i, n) for (int i=0;i&amp;lt;int(n);++i) typedef long long LL; typedef unsigned long long ULL; const int inf = 0x7fffffff; const int N=1E6+7; int n; int c[N]; int lowbit( int x) { return x&amp;amp;(-x); } void update ( int x,int delta) { for ( int i = x; i &amp;lt;= N ; i = i + lowbit (i)) { c[i] = c[i] + delta; } } int sum ( int x) { int res = 0; for ( int i = x ; i &amp;gt;= 1 ; i = i - lowbit (i)) { res = res + c[i]; } return res; } int main() { while (scanf(&amp;quot;%d&amp;quot;,&amp;amp;n)!</description></item><item><title>sgu 180 - Inversions （离散化+树状数组）</title><link>https://111qqz.com/2015/08/sgu180/</link><pubDate>Thu, 06 Aug 2015 09:09:00 +0000</pubDate><guid>https://111qqz.com/2015/08/sgu180/</guid><description>
Inversions **Time Limit:**250MS **Memory Limit:**4096KB 64bit IO Format:%I64d &amp;amp; %I64u
Submit Status
Description
180. Inversions time limit per test: 0.25 sec.
memory limit per test: 4096 KB
input: standard
output: standard
There are N integers (1&amp;lt;=N&amp;lt;=65537) A1, A2,.. AN (0&amp;lt;=Ai&amp;lt;=10^9). You need to find amount of such pairs (i, j) that 1&amp;lt;=iA[j].
Input
The first line of the input contains the number N. The second line contains N numbers A1.</description></item><item><title>poj 2299 Ultra-QuickSort （树状数组＋离散化）</title><link>https://111qqz.com/2015/08/poj2299/</link><pubDate>Tue, 04 Aug 2015 13:13:00 +0000</pubDate><guid>https://111qqz.com/2015/08/poj2299/</guid><description>
这道题可以总结的地方不少。
１：对于一组乱序数列，每次只能交换相邻元素，达到有序交换的次数就是原数列中你逆序对的个数。
　cf上好像总喜欢出这个题。。。我印象中就出现三次了。。。。。
２：原始数组a[i]和树状数组的t[i]的对应问题（？？？存在疑问。。。应该只是这道题，而不是一般规律！）
　这道题n是５０００００，如果直接开数组是可以开得下的，不需要离散化。**但是树状数组的下标对应的是原始数组的值！**也就是t[i]的下表最大可能为９９９，９９９，９９９　！　显然存不下，需要离散化。
**３：学习了离散化的又一种写法。 **
/************************************************************************* &amp;gt; File Name: code/poj/2299.cpp &amp;gt; Author: 111qqz &amp;gt; Email: rkz2013@126.com &amp;gt; Created Time: 2015年08月04日 星期二 12时27分32秒 ************************************************************************/ #include&amp;lt;iostream&amp;gt; #include&amp;lt;iomanip&amp;gt; #include&amp;lt;cstdio&amp;gt; #include&amp;lt;algorithm&amp;gt; #include&amp;lt;cmath&amp;gt; #include&amp;lt;cstring&amp;gt; #include&amp;lt;string&amp;gt; #include&amp;lt;map&amp;gt; #include&amp;lt;set&amp;gt; #include&amp;lt;queue&amp;gt; #include&amp;lt;vector&amp;gt; #include&amp;lt;stack&amp;gt; #define y0 abc111qqz #define y1 hust111qqz #define yn hez111qqz #define j1 cute111qqz #define tm crazy111qqz #define lr dying111qqz using namespace std; #define REP(i, n) for (int i=0;i&amp;lt;int(n);++i) typedef long long LL; typedef unsigned long long ULL; const int inf = 0x7fffffff; const int N=5E5+7; int n; int t[N]; int ref[N]; struct Q { int val,id; }q[N]; bool cmp(Q a,Q b) { if (a.</description></item><item><title>poj 2481 Cows(树状数组||线段树)</title><link>https://111qqz.com/2015/08/poj2481/</link><pubDate>Mon, 03 Aug 2015 19:32:00 +0000</pubDate><guid>https://111qqz.com/2015/08/poj2481/</guid><description>
poj 2481 题目链接
题意：给定n个区间，问对于每个区间，有多少个区间真包含该区间（真包含的意思是说，两个区间不能完全重合）
思路：
下面是一年前用树状数组过掉的时候写的题解： 和 star那道题差不多。 需要注意的是star那道题读入的时候已经排好了序，而这道题没有排序
由于答案是按照下表输出，排序的时候下标会被打乱，所以要存一下下表到结构体里。
另一个区别是，star那道题星星不会重复，就是说一个位置不会有多颗星星。
而这道题却可能，而且题目中说，如果区间的长度差为0（就是后面的那个不等式），那么不计数。
因为区间下标可能为0，但是树状数组的下表必须从1开始，所以下表要+1，但是由于下表可能有所重复，所以 不能用++,而是用+1
不然会增加多次（我就是这么w a了两次。。。）
树状数组ac代码：
/************************************************************************* &amp;gt; File Name: code/poj/2481.cpp &amp;gt; Author: 111qqz &amp;gt; Email: rkz2013@126.com &amp;gt; Created Time: 2015年08月04日 星期二 02时06分05秒 ************************************************************************/ #include&amp;lt;iostream&amp;gt; #include&amp;lt;iomanip&amp;gt; #include&amp;lt;cstdio&amp;gt; #include&amp;lt;algorithm&amp;gt; #include&amp;lt;cmath&amp;gt; #include&amp;lt;cstring&amp;gt; #include&amp;lt;string&amp;gt; #include&amp;lt;map&amp;gt; #include&amp;lt;set&amp;gt; #include&amp;lt;queue&amp;gt; #include&amp;lt;vector&amp;gt; #include&amp;lt;stack&amp;gt; #define y0 abc111qqz #define y1 hust111qqz #define yn hez111qqz #define j1 cute111qqz #define tm crazy111qqz #define lr dying111qqz using namespace std; #define REP(i, n) for (int i=0;i&amp;lt;int(n);++i) typedef long long LL; typedef unsigned long long ULL; const int inf = 0x7fffffff; const int N=1E5+7; int n; int a[N],t[N]; struct Q { int s,e,id; }q[N]; bool cmp (Q a,Q b) { if (a.</description></item><item><title>poj 2352 Stars （树状数组||线段树）</title><link>https://111qqz.com/2015/08/poj2352/</link><pubDate>Mon, 03 Aug 2015 17:29:00 +0000</pubDate><guid>https://111qqz.com/2015/08/poj2352/</guid><description>
poj 2352题目链接
题意：给出n个星星的位置，一个星星的level定义为其左下角（不严格）星星的数量。
要求统计0到n-1 level的星星各有多少个。
下面是一年前写的树状数组的题解：
依然想不通，智商是硬伤，绝望的想哭，真的想哭。 更新于2015年08月04日01:47:18：
好像有点明白了.....详情看注释
树状数组ac代码：
/************************************************************************* &amp;gt; File Name: code/poj/2352.cpp &amp;gt; Author: 111qqz &amp;gt; Email: rkz2013@126.com &amp;gt; Created Time: 2015年08月04日 星期二 00时33分52秒 ************************************************************************/ #include&amp;lt;iostream&amp;gt; #include&amp;lt;iomanip&amp;gt; #include&amp;lt;cstdio&amp;gt; #include&amp;lt;algorithm&amp;gt; #include&amp;lt;cmath&amp;gt; #include&amp;lt;cstring&amp;gt; #include&amp;lt;string&amp;gt; #include&amp;lt;map&amp;gt; #include&amp;lt;set&amp;gt; #include&amp;lt;queue&amp;gt; #include&amp;lt;vector&amp;gt; #include&amp;lt;stack&amp;gt; #define y0 abc111qqz #define y1 hust111qqz #define yn hez111qqz #define j1 cute111qqz #define tm crazy111qqz #define lr dying111qqz using namespace std; #define REP(i, n) for (int i=0;i&amp;lt;int(n);++i) typedef long long LL; typedef unsigned long long ULL; const int inf = 0x7fffffff; const int N=4E4+7; int a[N]; int t[N]; int x,y; int n; int lowbit (int x) { return x&amp;amp;(-x); } void update(int x,int c) { int i; for ( int i = x ; i &amp;lt;= 32001 ; i = i + lowbit(i)) { t[i] = t[i] + c; } } int sum( int x) { int i; int res = 0; for ( int i = x ; i &amp;gt;= 1 ; i = i-lowbit(i)) { res = res + t[i]; } // cout&amp;lt;&amp;lt;&amp;quot;x:&amp;quot;&amp;lt;&amp;lt;x&amp;lt;&amp;lt;&amp;quot; res:&amp;quot;&amp;lt;&amp;lt;res&amp;lt;&amp;lt;endl; return res; } int main() { scanf(&amp;quot;%d&amp;quot;,&amp;amp;n); for ( int i = 0 ; i &amp;lt; n ; i ++ ) { scanf(&amp;quot;%d %d&amp;quot;,&amp;amp;x,&amp;amp;y); a[sum(++x)]++; // ++x是因为坐标是从0 开始，而树状数组的下标一定是从1开始，不然会TLE // sum(++x)是求 ++x 的level // // update(x,1); //向上更新，对于每一个比x大的位置，由于x的存在，那些位置的点的level都会增加1 //比如对于星3，因为星1的读入，我向上更新了星2,星3,星4,星5，这时候他们的level都是1 //之后读入星2，更新了星3和星5，星3的level是2，星5的level也是2，之后由于星4，星5的level又加1，为5.</description></item></channel></rss>