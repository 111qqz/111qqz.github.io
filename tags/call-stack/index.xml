<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>call stack on 111qqz的小窝</title>
    <link>https://111qqz.com/tags/call-stack/</link>
    <description>Recent content in call stack on 111qqz的小窝</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 31 Jan 2019 12:12:22 +0000</lastBuildDate>
    
	<atom:link href="https://111qqz.com/tags/call-stack/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>x86 calling conventions</title>
      <link>https://111qqz.com/2019/01/x86-calling-conventions/</link>
      <pubDate>Thu, 31 Jan 2019 12:12:22 +0000</pubDate>
      
      <guid>https://111qqz.com/2019/01/x86-calling-conventions/</guid>
      <description>x86的调用约定主要说的是这几件事: * The order in which atomic (scalar) parameters, or individual parts of a complex parameter, are allocated * How parameters are passed (pushed on the stack, placed in registers, or a mix of both) * Which registers the called function must preserve for the caller (also known as: callee-saved registers or non-volatile</description>
    </item>
    
    <item>
      <title>x86 calling conventions</title>
      <link>https://111qqz.com/2019/01/x86-calling-conventions/</link>
      <pubDate>Thu, 31 Jan 2019 12:12:22 +0000</pubDate>
      
      <guid>https://111qqz.com/2019/01/x86-calling-conventions/</guid>
      <description>x86的调用约定主要说的是这几件事: * The order in which atomic (scalar) parameters, or individual parts of a complex parameter, are allocated * How parameters are passed (pushed on the stack, placed in registers, or a mix of both) * Which registers the called function must preserve for the caller (also known as: callee-saved registers or non-volatile</description>
    </item>
    
  </channel>
</rss>