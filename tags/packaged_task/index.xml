<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>packaged_task on 111qqz的小窝</title><link>https://111qqz.com/tags/packaged_task/</link><description>Recent content in packaged_task on 111qqz的小窝</description><generator>Hugo -- gohugo.io</generator><language>en</language><copyright>Copyright © 2012-2022 all rights reserved.</copyright><lastBuildDate>Sun, 30 Sep 2018 06:49:27 +0000</lastBuildDate><atom:link href="https://111qqz.com/tags/packaged_task/index.xml" rel="self" type="application/rss+xml"/><item><title>[c++11] std::async std::packaged_task std::promise and std::future notes</title><link>https://111qqz.com/2018/09/c11-async-packaged-ask-promise-future-notes/</link><pubDate>Sun, 30 Sep 2018 06:49:27 +0000</pubDate><guid>https://111qqz.com/2018/09/c11-async-packaged-ask-promise-future-notes/</guid><description>
把std::async,std::packaged_task,std::promise三个放在一起来说,是因为他们都可以返回一个std::future对象.简单来说,当某个线程需要等待一个特定的一次性事件(one-off event),它可以用一个&amp;quot;future&amp;quot;来表示这个事件.
std::async 有的时候可能你需要做一个花费事件比较长的计算,但是计算结果不是立刻需要.这个时候就可以用一个新的线程来做这个计算.这里比较关键的问题是如何将在新线程进行计算的结果传回到当前线程,因为std::thread并没有提供一个类似的机制.
这个时候就需要std::async登场了.
1 2 #include &amp;lt;future&amp;gt;3 #include &amp;lt;iostream&amp;gt;4 int find_the_answer_to_ltuae(); 5 void do_other_stuff(); 6 int main() 7 { 8 std::future&amp;lt;int&amp;gt; the_answer=std::async(find_the_answer_to_ltuae); 9 do_other_stuff(); 10 std::cout&amp;lt;&amp;lt;&amp;#34;The answer is &amp;#34;&amp;lt;&amp;lt;the_answer.get()&amp;lt;&amp;lt;std::endl; 11 } 当然也可以与向std::thread包装的thread function中传参数一样,向std::async中传参数,如下:
1 2 #include &amp;lt;string&amp;gt;3 #include &amp;lt;future&amp;gt;4 struct X 5 { 6 void foo(int,std::string const&amp;amp;); 7 std::string bar(std::string const&amp;amp;); 8 }; 9 X x; 10 auto f1=std::async(&amp;amp;X::foo,&amp;amp;x,42,&amp;#34;hello&amp;#34;); // 调用p-&amp;gt;foo(42, &amp;#34;hello&amp;#34;)，p是指向x的指针 11 auto f2=std::async(&amp;amp;X::bar,x,&amp;#34;goodbye&amp;#34;); // 调用tmpx.bar(&amp;#34;goodbye&amp;#34;)， tmpx是x的拷贝副本 12 struct Y 13 { 14 double operator()(double); 15 }; 16 Y y; 17 auto f3=std::async(Y(),3.</description></item></channel></rss>