<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>康托展开 on 111qqz的小窝</title><link>https://111qqz.com/tags/%E5%BA%B7%E6%89%98%E5%B1%95%E5%BC%80/</link><description>Recent content in 康托展开 on 111qqz的小窝</description><generator>Hugo -- gohugo.io</generator><language>en</language><copyright>Copyright © 2012-2022 all rights reserved.</copyright><lastBuildDate>Wed, 14 Sep 2016 07:05:21 +0000</lastBuildDate><atom:link href="https://111qqz.com/tags/%E5%BA%B7%E6%89%98%E5%B1%95%E5%BC%80/index.xml" rel="self" type="application/rss+xml"/><item><title>codeforces 501 D Misha and Permutations Summation (康托展开+康托逆展开+factorial_number_system+线段树×2)</title><link>https://111qqz.com/2016/09/codeforces-501-d-misha-and-permutations-summation-factorial_number_systemx2/</link><pubDate>Wed, 14 Sep 2016 07:05:21 +0000</pubDate><guid>https://111qqz.com/2016/09/codeforces-501-d-misha-and-permutations-summation-factorial_number_systemx2/</guid><description>
题目链接
题意：给出两个排列，定义ord(p)为排列p的顺序（字典顺从小到大），定义perm(x)为顺序为x的排列，现在要求 1 ≤ n ≤ 200 000
思路：首先去学了一下康托展开和逆展开。。。其实就是对于这种排列之类的问题。。。的一个比较省空间的hash函数。。。？
康托展开资料
然后由于n非常大。。康托展开中要查找当前位置后面有多少个比当前位置小的。。。
然而这复杂是n2。。。肯定gg。。。
因此里面那层我们用一课线段树维护。。。复杂度nlgn
在康托逆展开的过程中。。。我们要查询之前没有出现过的第k个元素。。。。
因为n很大这里也需要线段树来维护。。。
所以再建一棵线段树。。。某位置表示初始时刻是否为空，初始都为1，表示都没有出现。思想类似于poj 2828 poj 2828解题报告
然后还是由于n很大。。。在康托展开中的阶乘部分。。。完全存不下。。。
直接用高精度应该也能做？
不过比较推荐的做法是： The Factorial Number System wiki_Factorial number system
是一种和阶乘相关的进制表示法。
大概就是不同位置上的权值，不像一般的k进制数，是k^0,k^1,k^2....
而是0!,1!,2!。。。
这种表示合法的正确性基于：
1*1! + 2*2! + 3*3! + ... + k*k! = (k+1)! - 1 具体参见上面两个链接。
因为我们可以把所有康托展开都用 Factorial number system来表示。
/* *********************************************** Author :111qqz Created Time :Tue 13 Sep 2016 04:33:55 PM CST File Name :code/cf/problem/501D.cpp ************************************************ */ #include &amp;lt;cstdio&amp;gt; #include &amp;lt;cstring&amp;gt; #include &amp;lt;iostream&amp;gt; #include &amp;lt;algorithm&amp;gt; #include &amp;lt;vector&amp;gt; #include &amp;lt;queue&amp;gt; #include &amp;lt;set&amp;gt; #include &amp;lt;map&amp;gt; #include &amp;lt;string&amp;gt; #include &amp;lt;cmath&amp;gt; #include &amp;lt;cstdlib&amp;gt; #include &amp;lt;ctime&amp;gt; #define fst first #define sec second #define lson l,m,rt&amp;lt;&amp;lt;1 #define rson m+1,r,rt&amp;lt;&amp;lt;1|1 #define ms(a,x) memset(a,x,sizeof(a)) typedef long long LL; #define pi pair &amp;lt; int ,int &amp;gt; #define MP make_pair using namespace std; const double eps = 1E-8; const int dx4[4]={1,0,0,-1}; const int dy4[4]={0,-1,1,0}; const int inf = 0x3f3f3f3f; const int N=2E5+7; int n ; int tree[N&amp;lt;&amp;lt;2]; int fac[N]; int A[N],B[N]; int ans[N]; void PushUp(int rt) { tree[rt] = tree[rt&amp;lt;&amp;lt;1] + tree[rt&amp;lt;&amp;lt;1|1]; } void update(int p,int l,int r,int rt) { if (l==r) { tree[rt]++; return; } int m = (l+r)&amp;gt;&amp;gt;1; if (p&amp;lt;=m) update(p,lson); else update(p,rson); PushUp(rt); } int query(int L,int R,int l,int r,int rt) { if (L&amp;lt;=l&amp;amp;&amp;amp;r&amp;lt;=R) return tree[rt]; int m = (l+r)&amp;gt;&amp;gt;1; int ret = 0 ; if (L&amp;lt;=m) { int res = query(L,R,lson); ret +=res; } if (R&amp;gt;=m+1) { int res = query(L,R,rson); ret +=res; } return ret; } void Contor(int A[])//https://en.</description></item><item><title>康托展开和康托逆展开</title><link>https://111qqz.com/2016/09/</link><pubDate>Tue, 13 Sep 2016 05:14:51 +0000</pubDate><guid>https://111qqz.com/2016/09/</guid><description>
感觉就是为了记录排列。。。重复之类的。。。用到的一个hash函数。。。？
维基百科
讲解</description></item></channel></rss>