<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>枚举子集 on 111qqz的小窝</title><link>http://example.org/tags/%E6%9E%9A%E4%B8%BE%E5%AD%90%E9%9B%86/</link><description>Recent content in 枚举子集 on 111qqz的小窝</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Thu, 13 Apr 2017 07:55:09 +0000</lastBuildDate><atom:link href="http://example.org/tags/%E6%9E%9A%E4%B8%BE%E5%AD%90%E9%9B%86/index.xml" rel="self" type="application/rss+xml"/><item><title>leetcode 216. Combination Sum III Add to List (枚举子集，限定集合大小，和为定值）</title><link>http://example.org/2017/04/leetcode-216-combination-sum-iii-add-to-list/</link><pubDate>Thu, 13 Apr 2017 07:55:09 +0000</pubDate><guid>http://example.org/2017/04/leetcode-216-combination-sum-iii-add-to-list/</guid><description>Find all possible combinations of k numbers that add up to a number n, given that only numbers from 1 to 9 can be used and each combination should be a unique set of numbers.
题意：1..9个数，从中选择k个，和为n，要求输出所有满足题意的集合。
思路：枚举子集，根据sum和集合元素个数剪枝即可。
/* *********************************************** Author :111qqz Created Time :2017年04月13日 星期四 15时44分56秒 File Name :216.cpp ************************************************ */ class Solution { public: set&amp;lt;vector&amp;lt;int&amp;gt; &amp;gt;se; vector&amp;lt;vector&amp;lt;int&amp;gt; &amp;gt;res; int B[1005]; void get_subset(int n,int *B,int cur,int cnt,int k,int sum,int tar) { if (cur==n) { if (cnt!</description></item><item><title>leetcode 77. Combinations (枚举子集，限定集合大小)</title><link>http://example.org/2017/04/leetcode-77-combinations/</link><pubDate>Thu, 13 Apr 2017 07:43:43 +0000</pubDate><guid>http://example.org/2017/04/leetcode-77-combinations/</guid><description>Given two integers n and k, return all possible combinations of k numbers out of 1 &amp;hellip; n.
思路：就是枚举子集，根据集合的大小剪枝。。。最后只要集合大小为k的集合
/* *********************************************** Author :111qqz Created Time :2017年04月13日 星期四 15时25分37秒 File Name :77.cpp ************************************************ */ class Solution { public: set&amp;lt;vector&amp;lt;int&amp;gt; &amp;gt;se; int B[1005]; vector&amp;lt;vector&amp;lt;int&amp;gt; &amp;gt;res; void get_subset(int n,int *B,int cur,int cnt,int k) { if (cur==n) { vector&amp;lt;int&amp;gt;tmp; for ( int i = 0 ; i &amp;lt; n ; i++) if (B[i]) tmp.push_back(i+1); if (tmp.</description></item><item><title>leetcode 40. Combination Sum II (枚举子集，和为定值)</title><link>http://example.org/2017/04/leetcode-40-combination-sum-ii/</link><pubDate>Wed, 12 Apr 2017 16:23:29 +0000</pubDate><guid>http://example.org/2017/04/leetcode-40-combination-sum-ii/</guid><description>* Total Accepted: **106670** * Total Submissions: **329718** * Difficulty: **Medium** * Contributor: **LeetCode** Given a collection of candidate numbers (C) and a target number (T), find all unique combinations in C where the candidate numbers sums to T.
Each number in C may only be used once in the combination.
Note:
* All numbers (including target) will be positive integers. * The solution set must not contain duplicate combinations.</description></item><item><title>leetcode 90. Subsets II (枚举子集)</title><link>http://example.org/2017/04/leetcode%2090-subsets-ii/</link><pubDate>Wed, 05 Apr 2017 10:45:02 +0000</pubDate><guid>http://example.org/2017/04/leetcode%2090-subsets-ii/</guid><description>Given a collection of integers that might contain duplicates, nums, return all possible subsets.
Note: The solution set must not contain duplicate subsets.
For example, If nums = [1,2,2], a solution is:
[ [2], [1], [1,2,2], [2,2], [1,2], [] ] 思路：
复习（？）一下 枚举子集的三种写法
（还有种更飘逸的&amp;hellip;先不写了orz
这道题我用位向量法A的。。
/* *********************************************** Author :111qqz Created Time :2017年04月05日 星期三 17时15分34秒 File Name :90.cpp ************************************************ */ class Solution { public: set&amp;lt;vector&amp;lt;int&amp;gt; &amp;gt;se; int B[1005]; vector &amp;lt;vector&amp;lt;int&amp;gt; &amp;gt;res; void get_subset(int n,int *B,int cur,vector&amp;lt;int&amp;gt;&amp;amp; nums) { // cout&amp;lt;&amp;lt;&amp;quot;cur:&amp;quot;&amp;lt;&amp;lt;cur&amp;lt;&amp;lt;endl; if (cur==n) //from 0 { vector&amp;lt;int&amp;gt;tmp; for ( int i = 0 ; i &amp;lt; n ; i++) if (B[i]) tmp.</description></item></channel></rss>