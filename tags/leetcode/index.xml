<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>leetcode on 111qqz的小窝</title><link>https://111qqz.com/tags/leetcode/</link><description>Recent content in leetcode on 111qqz的小窝</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><copyright>Copyright © 2012-2022 all rights reserved.</copyright><lastBuildDate>Fri, 14 Apr 2017 12:25:16 +0000</lastBuildDate><atom:link href="https://111qqz.com/tags/leetcode/index.xml" rel="self" type="application/rss+xml"/><item><title>leetcode162. Find Peak Element (O(lgn)复杂度寻找峰值)</title><link>https://111qqz.com/2017/04/leetcode-162/</link><pubDate>Fri, 14 Apr 2017 12:25:16 +0000</pubDate><guid>https://111qqz.com/2017/04/leetcode-162/</guid><description>
A peak element is an element that is greater than its neighbors.
Given an input array where num[i] ≠ num[i+1], find a peak element and return its index.
The array may contain multiple peaks, in that case return the index to any one of the peaks is fine.
You may imagine that num[-1] = num[n] = -∞.
For example, in array [1, 2, 3, 1], 3 is a peak element and your function should return the index number 2.</description></item><item><title>leetcode 152. Maximum Product Subarray (最大连续子序列乘积，dp)</title><link>https://111qqz.com/2017/04/leetcode-152-maximum-product-subarray/</link><pubDate>Fri, 14 Apr 2017 11:33:30 +0000</pubDate><guid>https://111qqz.com/2017/04/leetcode-152-maximum-product-subarray/</guid><description>
Find the contiguous subarray within an array (containing at least one number) which has the largest product.
For example, given the array [2,3,-2,4], the contiguous subarray [2,3] has the largest product = 6.
思路：由于有正，有负，还有0.。。所以比最大子串之和要复杂一些。。。
dp[i].max表示到当前位置的最大乘积。
dp[i].min表示到当前位置的最小乘积。
dp[i].max = max{dp[i-1].maxa[i],dp[i-1].mina[i],a[i]};
dp[i].min同理
边界dp[i].max = dp[i].min = a[0]
/* *********************************************** Author :111qqz Created Time :2017年04月14日 星期五 18时57分13秒 File Name :152.cpp ************************************************ */ class Solution { public: //dp //dp[i]表示当前的最大乘积。 //用了滚动数组优化空间/ int maxProduct(vector&amp;lt;int&amp;gt;&amp;amp; nums) { int siz = nums.</description></item><item><title>leetcode 228. Summary Ranges</title><link>https://111qqz.com/2017/04/leetcode-228/</link><pubDate>Fri, 14 Apr 2017 10:51:39 +0000</pubDate><guid>https://111qqz.com/2017/04/leetcode-228/</guid><description>
Given a sorted integer array without duplicates, return the summary of its ranges.
For example, given [0,1,2,4,5,7], return [&amp;quot;0-&amp;gt;2&amp;quot;,&amp;quot;4-&amp;gt;5&amp;quot;,&amp;quot;7&amp;quot;].
题意：把连续的数连续表示
思路：模拟。注意有负数，注意有-2147483648这种数据。
本来还想着，可能是leetcode加数据的审核机制太松，导致被人加了奇怪的数据。。。
结果发现出题人和加数据的人是一个人啊？
不给数据范围，加这种奇怪的数据很有意思？ 分分钟卡掉你的标程啊？
感觉像吃了苍蝇一样恶心。。一句话，出题人傻逼
/* *********************************************** Author :111qqz Created Time :2017年04月14日 星期五 16时26分01秒 File Name :228.cpp ************************************************ */ class Solution { public: string int2st(long long x) { if (x==0) return &amp;quot;0&amp;quot;; string ret = &amp;quot;&amp;quot;; int val; //md还有负数 long long sign = 1; if (x&amp;lt;0) sign = -1; x*=sign; while (x) { val = x % 10; ret = ret + char(val+'0'); x/=10; } if (sign==-1) ret +=&amp;quot;-&amp;quot;; reverse(ret.</description></item><item><title>leetcode 209. Minimum Size Subarray Sum (尺取法)</title><link>https://111qqz.com/2017/04/leetcode-209-minimum-size-subarray-sum/</link><pubDate>Thu, 13 Apr 2017 13:50:02 +0000</pubDate><guid>https://111qqz.com/2017/04/leetcode-209-minimum-size-subarray-sum/</guid><description>
Given an array of n positive integers and a positive integer s, find the minimal length of a contiguous subarray of which the sum ≥ s. If there isn't one, return 0 instead.
For example, given the array [2,3,1,2,4,3] and s = 7, the subarray [4,3] has the minimal length under the problem constraint
思路：尺取即可。。好久没写，竟然调了半天。。。
/* *********************************************** Author :111qqz Created Time :2017年04月13日 星期四 20时48分00秒 File Name :209.cpp ************************************************ */ class Solution { public: int ruler(vector&amp;lt;int&amp;gt;nums,int tar,int n) { int head = 0; int tail = 0; int sum = 0 ; int res = 0x3f3f3f3f; while (tail&amp;lt;n&amp;amp;&amp;amp;head&amp;lt;=tail) { sum = sum + nums[tail]; if (sum&amp;gt;=tar) { res = min(res,tail-head+1); while (sum&amp;gt;=tar&amp;amp;&amp;amp;head&amp;lt;tail) { sum-=nums[head]; head++; } if (sum&amp;gt;=tar) { res = min(res,tail-head+1); } else { head--; sum+=nums[head]; res = min(res,tail-head+1); } } tail++; } return res==0x3f3f3f3f?</description></item><item><title>leetcode 229. Majority Element II （O(1)空间找出现次数大于n/3的元素）</title><link>https://111qqz.com/2017/04/leetcode-229-majority-element-ii/</link><pubDate>Thu, 13 Apr 2017 12:41:33 +0000</pubDate><guid>https://111qqz.com/2017/04/leetcode-229-majority-element-ii/</guid><description>
Given an integer array of size n, find all elements that appear more than ⌊ n/3 ⌋ times. The algorithm should run in linear time and in O(1) space.
题意：给你n个数，要求找出出现此处大于n/3的。。。
思路：之前做过一个找出n个数出现此处大于n/2的题目，思想是“非吾族类，其心必异”。。
这道题类似。。。容易知道题目要求的数最多有2个，最少有0个。。。
由于最多两个“族类”，在更新的时候，要判断是不是友军的人...毕竟朋友妻不可欺嘛（什么鬼
最后记得扫一遍，check一下，检查出现此处是否满足题意。
/* *********************************************** Author :111qqz Created Time :2017年04月13日 星期四 20时05分53秒 File Name :229.cpp ************************************************ */ class Solution { public: //出现次数大于int(n/3)的元素，最少有0个，最多有两个 vector&amp;lt;int&amp;gt; majorityElement(vector&amp;lt;int&amp;gt;&amp;amp; nums) { vector&amp;lt;int&amp;gt;res; int n = nums.size(); if (n==0) return res; int cnt1,cnt2,v1,v2; cnt1 = cnt2 = 0; v1 = v2 = -1; for ( int i = 0 ; i &amp;lt; n ; i++) { int x = nums[i]; // printf(&amp;quot;i:%d nums[i]:%d v1:%d cnt1:%d v2:%d cnt2:%d\n&amp;quot;,i,nums[i],v1,cnt1,v2,cnt2); if (cnt1==0&amp;amp;&amp;amp;v2!</description></item><item><title>leetcode 75. Sort Colors</title><link>https://111qqz.com/2017/04/leetcode-75-sort-colors/</link><pubDate>Thu, 13 Apr 2017 12:02:02 +0000</pubDate><guid>https://111qqz.com/2017/04/leetcode-75-sort-colors/</guid><description>
Given an array with n objects colored red, white or blue, sort them so that objects of the same color are adjacent, with the colors in the order red, white and blue.
Here, we will use the integers 0, 1, and 2 to represent the color red, white, and blue respectively.
题意：一个数组，由0,1,2组成，现在要求升序排列
思路：无脑做法就是计数排序，扫两遍，时间复杂度O(n)，空间复杂度O(1)
如果只扫一遍呢？
一个容易想到的思路是两个指针：
需要注意 的是，交换2后要再次遍历到当前位置，或者说，只有当不交换2的时候，才执行cur++
/* *********************************************** Author :111qqz Created Time :2017年04月13日 星期四 18时24分25秒 File Name :75.cpp ************************************************ */ class Solution { public: //思路：把0往前仍，把2往后仍 void pr(vector&amp;lt;int&amp;gt;&amp;amp; nums) { int siz = nums.</description></item><item><title>leetcode 11. Container With Most Water (two pointer)</title><link>https://111qqz.com/2017/04/leetcode-11-container-with-most-water-two-pointer/</link><pubDate>Thu, 13 Apr 2017 10:13:01 +0000</pubDate><guid>https://111qqz.com/2017/04/leetcode-11-container-with-most-water-two-pointer/</guid><description>
Given n non-negative integers a1, a2, ..., an, where each represents a point at coordinate (i, ai). n vertical lines are drawn such that the two endpoints of line i is at (i, ai) and (i, 0). Find two lines, which together with x-axis forms a container, such that the container contains the most water.
Note: You may not slant the container and n is at least 2.
题意：n条竖直的线段 (i,0)-&amp;gt;(i,a[i]),从中选2条，和x轴共同组成一个开口的容器，问容器的最大面积。</description></item><item><title>leetcode 16. 3Sum Closest (k-sum问题，two pointer)</title><link>https://111qqz.com/2017/04/leetcode-16-3sum-closest/</link><pubDate>Thu, 13 Apr 2017 09:45:45 +0000</pubDate><guid>https://111qqz.com/2017/04/leetcode-16-3sum-closest/</guid><description>
Given an array S of n integers, find three integers in S such that the sum is closest to a given number, target. Return the sum of the three integers. You may assume that each input would have exactly one solution.
思路： 排序，然后two pointer,复杂度 O(n^2)
/* *********************************************** Author :111qqz Created Time :2017年04月13日 星期四 16时24分28秒 File Name :16.cpp ************************************************ */ class Solution { public: int n; int threeSumClosest(vector&amp;lt;int&amp;gt;&amp;amp; nums, int target) { n = nums.</description></item><item><title>leetcode 18. 4Sum (k-sum问题，two pointer)</title><link>https://111qqz.com/2017/04/leetcode-18-4sum/</link><pubDate>Thu, 13 Apr 2017 09:34:15 +0000</pubDate><guid>https://111qqz.com/2017/04/leetcode-18-4sum/</guid><description>
Given an array S of n integers, are there elements a, b, c, and d in S such that a + b + c + d = target? Find all unique quadruplets in the array which gives the sum of target.
Note: The solution set must not contain duplicate quadruplets.
思路： O(n^2)枚举两个元素，变成2-sum问题，总体复杂度O(n^3)
hash的解法以后补
/* *********************************************** Author :111qqz Created Time :2017年04月13日 星期四 17时24分54秒 File Name :18.cpp ************************************************ */ class Solution { public: vector&amp;lt;vector&amp;lt;int&amp;gt; &amp;gt;res; set&amp;lt;vector&amp;lt;int&amp;gt; &amp;gt;se; int n; vector&amp;lt;vector&amp;lt;int&amp;gt;&amp;gt; fourSum(vector&amp;lt;int&amp;gt;&amp;amp; nums, int target) { n = nums.</description></item><item><title>leetcode 15. 3Sum (k-sum问题，two pointer)</title><link>https://111qqz.com/2017/04/leetcode-15-3sum/</link><pubDate>Thu, 13 Apr 2017 08:21:52 +0000</pubDate><guid>https://111qqz.com/2017/04/leetcode-15-3sum/</guid><description>
Given an array S of n integers, are there elements a, b, c in S such that a + b + c = 0? Find all unique triplets in the array which gives the sum of zero.
Note: The solution set must not contain duplicate triplets.
思路：排序O(nlgn)，然后枚举一个元素O(n),对于每个元素，在剩下的区间中 two pointer O(n)
整体复杂度 O(n^2)。
hash的解法以后补。
/* *********************************************** Author :111qqz Created Time :2017年04月13日 星期四 16时07分00秒 File Name :15.cpp ************************************************ */ class Solution { public: set&amp;lt;vector&amp;lt;int&amp;gt; &amp;gt;se; vector&amp;lt;vector&amp;lt;int&amp;gt; &amp;gt;res; vector&amp;lt;vector&amp;lt;int&amp;gt;&amp;gt; threeSum(vector&amp;lt;int&amp;gt;&amp;amp; nums) { sort(nums.</description></item><item><title>leetcode 216. Combination Sum III Add to List (枚举子集，限定集合大小，和为定值）</title><link>https://111qqz.com/2017/04/leetcode-216-combination-sum-iii-add-to-list/</link><pubDate>Thu, 13 Apr 2017 07:55:09 +0000</pubDate><guid>https://111qqz.com/2017/04/leetcode-216-combination-sum-iii-add-to-list/</guid><description>
Find all possible combinations of k numbers that add up to a number n, given that only numbers from 1 to 9 can be used and each combination should be a unique set of numbers.
题意：1..9个数，从中选择k个，和为n，要求输出所有满足题意的集合。
思路：枚举子集，根据sum和集合元素个数剪枝即可。
/* *********************************************** Author :111qqz Created Time :2017年04月13日 星期四 15时44分56秒 File Name :216.cpp ************************************************ */ class Solution { public: set&amp;lt;vector&amp;lt;int&amp;gt; &amp;gt;se; vector&amp;lt;vector&amp;lt;int&amp;gt; &amp;gt;res; int B[1005]; void get_subset(int n,int *B,int cur,int cnt,int k,int sum,int tar) { if (cur==n) { if (cnt!</description></item><item><title>leetcode 60. Permutation Sequence (求第k个排列)</title><link>https://111qqz.com/2017/04/leetcode-60-permutation-sequence/</link><pubDate>Thu, 13 Apr 2017 07:24:41 +0000</pubDate><guid>https://111qqz.com/2017/04/leetcode-60-permutation-sequence/</guid><description>
The set [1,2,3,…,_n_] contains a total of n! unique permutations.
By listing and labeling all of the permutations in order, We get the following sequence (ie, for n = 3):
1. `&amp;quot;123&amp;quot;` 2. `&amp;quot;132&amp;quot;` 3. `&amp;quot;213&amp;quot;` 4. `&amp;quot;231&amp;quot;` 5. `&amp;quot;312&amp;quot;` 6. `&amp;quot;321&amp;quot;` Given n and k, return the _k_th permutation sequence.
Note: Given n will be between 1 and 9 inclusive.
思路：还是根据leetcode 31 解题报告 中的算法搞一下就好了。。
/* *********************************************** Author :111qqz Created Time :2017年04月13日 星期四 15时17分19秒 File Name :60.</description></item><item><title>leetcode 47. Permutations II (生成全排列，有重复元素)</title><link>https://111qqz.com/2017/04/leetcode-47-permutations-ii/</link><pubDate>Thu, 13 Apr 2017 07:14:03 +0000</pubDate><guid>https://111qqz.com/2017/04/leetcode-47-permutations-ii/</guid><description>
Given a collection of numbers that might contain duplicates, return all possible unique permutations.__
思路：和leet code 46 类似，最后用set去个重即可。。
/* *********************************************** Author :111qqz Created Time :2017年04月13日 星期四 15时00分48秒 File Name :47.cpp ************************************************ */ class Solution { public: void solve( vector&amp;lt;int&amp;gt;&amp;amp;nums) { int n = nums.size(); if (n==0) return; int k = -1; for ( int i = n-2 ; i &amp;gt;= 0 ; i--) { if (nums[i]&amp;lt;nums[i+1]) { k = i; break; } } if (k==-1) { reverse(nums.</description></item><item><title>leetcode 46. Permutations (生成全排列，无重复元素)</title><link>https://111qqz.com/2017/04/leetcode-46-permutations/</link><pubDate>Thu, 13 Apr 2017 06:59:43 +0000</pubDate><guid>https://111qqz.com/2017/04/leetcode-46-permutations/</guid><description>
Given a collection of distinct numbers, return all possible permutations.
思路：调用n-1次 leetcode 31 解题报告 中提到的算法即可。。。
/* *********************************************** Author :111qqz Created Time :2017年04月13日 星期四 14时49分34秒 File Name :46.cpp ************************************************ */ class Solution { public: void solve(vector&amp;lt;int&amp;gt; &amp;amp;nums) { int n = nums.size(); if (n==0) return; int k = -1; for ( int i = n-2 ; i &amp;gt;= 0 ; i--) { if (nums[i]&amp;lt;nums[i+1]) { k = i ; break; } } if (k==-1) { reverse(nums.</description></item><item><title>leetcode 31. Next Permutation (in-place 生成下一个全排列)</title><link>https://111qqz.com/2017/04/leetcode-31-next-permutation-in-place/</link><pubDate>Thu, 13 Apr 2017 06:47:55 +0000</pubDate><guid>https://111qqz.com/2017/04/leetcode-31-next-permutation-in-place/</guid><description>
Implement next permutation, which rearranges numbers into the lexicographically next greater permutation of numbers.
If such arrangement is not possible, it must rearrange it as the lowest possible order (ie, sorted in ascending order).
The replacement must be in-place, do not allocate extra memory.
Here are some examples. Inputs are in the left-hand column and its corresponding outputs are in the right-hand column. 1,2,3 → 1,3,2 3,2,1 → 1,2,3 1,1,5 → 1,5,1</description></item><item><title>leetcode 33. Search in Rotated Sorted Array (无重复数的旋转数组找定值)</title><link>https://111qqz.com/2017/04/leetcode-33-search-in-rotated-sorted-array/</link><pubDate>Thu, 13 Apr 2017 06:29:37 +0000</pubDate><guid>https://111qqz.com/2017/04/leetcode-33-search-in-rotated-sorted-array/</guid><description>
Suppose an array sorted in ascending order is rotated at some pivot unknown to you beforehand.
(i.e., 0 1 2 4 5 6 7 might become 4 5 6 7 0 1 2).
You are given a target value to search. If found in the array return its index, otherwise return -1.
You may assume no duplicate exists in the array.
思路：找规律。。。二分。。。
0 1 2 3 4 5 6 1 2 3 4 5 6 0 2 3 4 5 6 0 1 3 4 5 6 0 1 2 4 5 6 0 1 2 3 5 6 0 1 2 3 4 6 0 1 2 3 4 5 观察发现。。。a[mid]&amp;lt;a[r]的时候，后半段有序;</description></item><item><title>leetcode 34. Search for a Range (二分，找到一段值为tar的区间)</title><link>https://111qqz.com/2017/04/leetcode-34-search-for-a-range/</link><pubDate>Thu, 13 Apr 2017 05:34:45 +0000</pubDate><guid>https://111qqz.com/2017/04/leetcode-34-search-for-a-range/</guid><description>
Given an array of integers sorted in ascending order, find the starting and ending position of a given target value.
Your algorithm's runtime complexity must be in the order of O(log n).
If the target is not found in the array, return [-1, -1].
For example, Given [5, 7, 7, 8, 8, 10] and target value 8, return [3, 4].
思路：二分。。。
我好像根本不会二分啊？？？
二分查找
/* *********************************************** Author :111qqz Created Time :2017年04月13日 星期四 10时49分02秒 File Name :34.</description></item><item><title>leetcode 39. Combination Sum (dfs，求所有的组合，和为定值，每个数可以重复用)</title><link>https://111qqz.com/2017/04/leetcode-39-combination-sum/</link><pubDate>Thu, 13 Apr 2017 02:47:49 +0000</pubDate><guid>https://111qqz.com/2017/04/leetcode-39-combination-sum/</guid><description>
Given a set of candidate numbers (C) (without duplicates) and a target number (T), find all unique combinations in C where the candidate numbers sums to T.
The same repeated number may be chosen from C unlimited number of times.
Note:
* All numbers (including target) will be positive integers. * The solution set must not contain duplicate combinations. 题意：给n个数，求所有的组合，和为定值，每个数可以重复用)
思路：。。。。一开始用顺着枚举子集的思路。。。发现。。并不好搞。。。？还不如直接dfs...
/* *********************************************** Author :111qqz Created Time :2017年04月13日 星期四 00时06分12秒 File Name :39.</description></item><item><title>leetcode 40. Combination Sum II (枚举子集，和为定值)</title><link>https://111qqz.com/2017/04/leetcode-40-combination-sum-ii/</link><pubDate>Wed, 12 Apr 2017 16:23:29 +0000</pubDate><guid>https://111qqz.com/2017/04/leetcode-40-combination-sum-ii/</guid><description>
* Total Accepted: **106670** * Total Submissions: **329718** * Difficulty: **Medium** * Contributor: **LeetCode** Given a collection of candidate numbers (C) and a target number (T), find all unique combinations in C where the candidate numbers sums to T.
Each number in C may only be used once in the combination.
Note:
* All numbers (including target) will be positive integers. * The solution set must not contain duplicate combinations.</description></item><item><title>leetcode 495. Teemo Attacking</title><link>https://111qqz.com/2017/04/leetcode-495-teemo-attacking/</link><pubDate>Wed, 12 Apr 2017 16:00:57 +0000</pubDate><guid>https://111qqz.com/2017/04/leetcode-495-teemo-attacking/</guid><description>
In LLP world, there is a hero called Teemo and his attacking can make his enemy Ashe be in poisoned condition. Now, given the Teemo's attacking ascending time series towards Ashe and the poisoning time duration per Teemo's attacking, you need to output the total time that Ashe is in poisoned condition.
You may assume that Teemo attacks at the very beginning of a specific time point, and makes Ashe be in poisoned condition immediately.</description></item><item><title>leetcode 442. Find All Duplicates in an Array（找出出现两次的元素）</title><link>https://111qqz.com/2017/04/leetcode-442-find-all-duplicates-in-an-array/</link><pubDate>Wed, 12 Apr 2017 15:21:23 +0000</pubDate><guid>https://111qqz.com/2017/04/leetcode-442-find-all-duplicates-in-an-array/</guid><description>
Given an array of integers, 1 ≤ a[i] ≤ n (n = size of array), some elements appear twice and others appear once.
Find all the elements that appear twice in this array.
Could you do it without extra space and in O(n) runtime?
思路：还是一个映射，如果某个位置要映射的时候已经为负了，就说明之前映射过该位置，那么该位置对应的元素就是出现了两个的元素。
和leetcode 448是一对题目。
/* *********************************************** Author :111qqz Created Time :2017年04月12日 星期三 21时49分11秒 File Name :442.cpp ************************************************ */ class Solution { public: vector&amp;lt;int&amp;gt; findDuplicates(vector&amp;lt;int&amp;gt;&amp;amp; nums) { vector&amp;lt;int&amp;gt;res; int n = nums.</description></item><item><title>leetcode 48. Rotate Image (旋转方阵(in place))</title><link>https://111qqz.com/2017/04/leetcode-48-rotate-image/</link><pubDate>Wed, 12 Apr 2017 13:22:33 +0000</pubDate><guid>https://111qqz.com/2017/04/leetcode-48-rotate-image/</guid><description>
You are given an n x n 2D matrix representing an image.
Rotate the image by 90 degrees (clockwise).
Follow up: Could you do this in-place?
题意：给一个n*n的方阵，要求顺时针旋转90度。
思路：(x,y)-&amp;gt;(y,n-1-x);
要求in-place的做法的话，其实是若干长度为4的环，保护一个节点，然后顺次做就好了。
然后对于那些标记已经做过选旋转的问题，实际上没有必要进行标记。
对于偶数，只需要处理 左上角hf * hf个,奇数只需要处理左上角hf*(hf-1)个。
其中hf = (n+1)/2
1A
1 2 3 (0,0) -&amp;gt;(0,2) 4 5 6 7 8 9 7 4 1 8 5 2 9 6 3 0 1 2 3 0 1 2 3 4 (0,0)-&amp;gt;(0,3) (0,1)-&amp;gt;(1,3) (0,2)-&amp;gt;(2,3) (0,3)-&amp;gt;(3,3) 1 5 6 7 8 (1,1)-&amp;gt;(1,2) (1,2)-&amp;gt;(2,2) (2,2)-&amp;gt;(2,1) 2 9 A B C (1,0)-&amp;gt;(0,2) (2,0)-&amp;gt;(0,1) 3 D E F G //只搞四分之一角落 0 1 2 3 0 D 9 5 1 1 E A 6 2 2 F B 7 3 3 G C 8 4 1 2 3 4 3 1 4 2 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 /* *********************************************** Author :111qqz Created Time :2017年04月12日 星期三 19时56分40秒 File Name :48.</description></item><item><title>leetcode 54. Spiral Matrix (矩阵蛇形取数)</title><link>https://111qqz.com/2017/04/leetcode-54-spiral-matrix/</link><pubDate>Tue, 11 Apr 2017 12:07:54 +0000</pubDate><guid>https://111qqz.com/2017/04/leetcode-54-spiral-matrix/</guid><description>
Given a matrix of m x n elements (m rows, n columns), return all elements of the matrix in spiral order.
思路：。。。再次让我回想起高一的暑假。。。。
/* *********************************************** Author :111qqz Created Time :2017年04月11日 星期二 19时42分05秒 File Name :54.cpp ************************************************ */ class Solution { public: int n,m; //0右，1下，2左，3上 int cal( int &amp;amp;x,int &amp;amp;y,int dir,vector&amp;lt;vector&amp;lt;bool&amp;gt; &amp;gt; &amp;amp; vis) { if (dir==0) { if (y&amp;lt;=n-2&amp;amp;&amp;amp;!vis[x][y+1]) y++; else { dir++; x++; } return dir; } if (dir==1) { if (x&amp;lt;=m-2&amp;amp;&amp;amp;!</description></item><item><title>leetcode 55. Jump Game (dp)</title><link>https://111qqz.com/2017/04/leetcode-55-jump-game-dp/</link><pubDate>Tue, 11 Apr 2017 11:39:15 +0000</pubDate><guid>https://111qqz.com/2017/04/leetcode-55-jump-game-dp/</guid><description>
Given a collection of intervals, merge all overlapping intervals.
For example, Given [1,3],[2,6],[8,10],[15,18], return [1,6],[8,10],[15,18].
思路:dp[i]表示能否到达位置i...无脑dp即可。。。
/* *********************************************** Author :111qqz Created Time :2017年04月11日 星期二 19时33分51秒 File Name :55.cpp ************************************************ */ class Solution { public: bool canJump(vector&amp;lt;int&amp;gt;&amp;amp; nums) { int n = nums.size(); if (n==0) return false; vector&amp;lt;int&amp;gt;dp(n,false); dp[0] = true; for ( int i = 0 ; i &amp;lt; n ; i++) { if (dp[i]) { int r = min(i+nums[i],n-1); for ( int j = i+1 ; j &amp;lt;=r ; j++) dp[j] = true; } } return dp[n-1]; } };</description></item><item><title>leetcode 56. Merge Intervals (模拟，求相交区间)</title><link>https://111qqz.com/2017/04/leetcode-56-merge-intervals/</link><pubDate>Tue, 11 Apr 2017 11:30:32 +0000</pubDate><guid>https://111qqz.com/2017/04/leetcode-56-merge-intervals/</guid><description>
Given a collection of intervals, merge all overlapping intervals.
For example, Given [1,3],[2,6],[8,10],[15,18], return [1,6],[8,10],[15,18].
思路：扫一遍即可。。
/* *********************************************** Author :111qqz Created Time :2017年04月11日 星期二 19时15分30秒 File Name :56.cpp ************************************************ */ /** * Definition for an interval. * struct Interval { * int start; * int end; * Interval() : start(0), end(0) {} * Interval(int s, int e) : start(s), end(e) {} * }; */ class Solution { public: int n; static bool cmp(Interval A,Interval B) { return A.</description></item><item><title>leetocde 59. Spiral Matrix II (模拟)</title><link>https://111qqz.com/2017/04/59-spiral-matrix-ii/</link><pubDate>Tue, 11 Apr 2017 11:07:52 +0000</pubDate><guid>https://111qqz.com/2017/04/59-spiral-matrix-ii/</guid><description>
Given an integer n, generate a square matrix filled with elements from 1 to _n_2 in spiral order.
思路：仿佛回到高一的那个暑假。。。
/* *********************************************** Author :111qqz Created Time :2017年04月11日 星期二 18时52分15秒 File Name :59.cpp ************************************************ */ class Solution { public: int ok (int dir, int &amp;amp;x,int &amp;amp;y,int n,vector&amp;lt;vector&amp;lt;int&amp;gt; &amp;gt;&amp;amp;res) // 0右，1下，2左，3上 { if (dir==0) { if (y&amp;lt;=n-2&amp;amp;&amp;amp;res[x][y+1]==0) y++; else { dir++; x++; } return dir; } if (dir==1) { if (x&amp;lt;=n-2&amp;amp;&amp;amp;res[x+1][y]==0) x++; else { dir++; y--; } return dir; } if (dir==2) { if (y&amp;gt;=1&amp;amp;&amp;amp;res[x][y-1]==0) y--; else { dir++; x--; } return dir; } if (dir==3) { if (x&amp;gt;=1&amp;amp;&amp;amp;res[x-1][y]==0) x--; else { dir = 0 ; y++; } return dir; } } vector&amp;lt;vector&amp;lt;int&amp;gt;&amp;gt; generateMatrix(int n) { vector&amp;lt;vector&amp;lt;int&amp;gt; &amp;gt;res(n,vector&amp;lt;int&amp;gt;(n,0)); int dir = 0; int x,y; x = y = 0 ; for ( int i = 0 ; i &amp;lt; n*n ; i++) { res[x][y] = i+1; // printf(&amp;quot; x:%d y: %d\n&amp;quot;,x,y); dir = ok (dir,x,y,n,res); } return res; } };</description></item><item><title>leetocde 63. Unique Paths II</title><link>https://111qqz.com/2017/04/63-unique-paths-ii/</link><pubDate>Tue, 11 Apr 2017 10:50:57 +0000</pubDate><guid>https://111qqz.com/2017/04/63-unique-paths-ii/</guid><description>
Follow up for &amp;quot;Unique Paths&amp;quot;:
Now consider if some obstacles are added to the grids. How many unique paths would there be?
An obstacle and empty space is marked as 1 and 0 respectively in the grid.
For example,
There is one obstacle in the middle of a 3x3 grid as illustrated below.
[ [0,0,0], [0,1,0], [0,0,0] ] The total number of unique paths is 2.
题意：从左上到右下的方案数，有些点不能走。
思路：简单dp...1A
/* *********************************************** Author :111qqz Created Time :2017年04月11日 星期二 18时37分47秒 File Name :63.</description></item><item><title>leetcode 64. Minimum Path Sum (二维dp)</title><link>https://111qqz.com/2017/04/leetcode-64-minimum-path-sum/</link><pubDate>Mon, 10 Apr 2017 02:35:20 +0000</pubDate><guid>https://111qqz.com/2017/04/leetcode-64-minimum-path-sum/</guid><description>
Given a m x n grid filled with non-negative numbers, find a path from top left to bottom right which minimizes the sum of all numbers along its path.
Note: You can only move either down or right at any point in time.
数字三角形。。。。从坐上到右下问最短路径。。每次只能向下或者向右。。。
wa了一次。。。是因为边界值赋值成了0.。。求最短路径显然因为赋值成inf才对orz..果然傻了。。
简单的dp我们简单的A.
顺便吐槽一下。。(100,100)的答案会溢出int...然而答案就是负的。。。就没人check一下吗，，，
/* *********************************************** Author :111qqz Created Time :2017年04月10日 星期一 10时11分26秒 File Name :64.cpp ************************************************ */ class Solution { public: int minPathSum(vector&amp;lt;vector&amp;lt;int&amp;gt;&amp;gt;&amp;amp; grid) { int n = grid.</description></item><item><title>leetcode 73. Set Matrix Zeroes (矩阵置0，乱搞)</title><link>https://111qqz.com/2017/04/leetcode-73-set-matrix-zeroes/</link><pubDate>Mon, 10 Apr 2017 01:16:43 +0000</pubDate><guid>https://111qqz.com/2017/04/leetcode-73-set-matrix-zeroes/</guid><description>
Given a m x n matrix, if an element is 0, set its entire row and column to 0. Do it in place.
click to show follow up.
**Follow up:**Did you use extra space? A straight forward solution using O(m__n) space is probably a bad idea. A simple improvement uses O(m + n) space, but still not the best solution. Could you devise a constant space solution?
直接放常数空间的做法。
这道题面hypereal的时候遇到过，基本思路就是用已经确定是0的位置来存储其他行和列的信息。
三点注意：</description></item><item><title>leetcode 238. Product of Array Except Self (乱搞)</title><link>https://111qqz.com/2017/04/leetcode-238-product-of-array-except-self/</link><pubDate>Sun, 09 Apr 2017 11:50:05 +0000</pubDate><guid>https://111qqz.com/2017/04/leetcode-238-product-of-array-except-self/</guid><description>
Given an array of n integers where n &amp;gt; 1, nums, return an array output such that output[i] is equal to the product of all the elements of nums except nums[i].
Solve it without division and in O(n).
For example, given [1,2,3,4], return [24,12,8,6].
Follow up: Could you solve it with constant space complexity? (Note: The output array does not count as extra space for the purpose of space complexity analysis.</description></item><item><title>leetcode 79. Word Search (dfs)</title><link>https://111qqz.com/2017/04/leetcode-79-word-search-dfs/</link><pubDate>Fri, 07 Apr 2017 06:59:26 +0000</pubDate><guid>https://111qqz.com/2017/04/leetcode-79-word-search-dfs/</guid><description>
Given a 2D board and a word, find if the word exists in the grid.
The word can be constructed from letters of sequentially adjacent cell, where &amp;quot;adjacent&amp;quot; cells are those horizontally or vertically neighboring. The same letter cell may not be used more than once.
思路：dfs即可。记得要回溯一下...
/* *********************************************** Author :111qqz Created Time :2017年04月07日 星期五 14时32分54秒 File Name :79.cpp ************************************************ */ class Solution { public: int n,m; const int dx4[4]={1,-1,0,0}; const int dy4[4]={0,0,-1,1}; bool vis[1005][1005]; int len; bool yes( int x,int y) { if (x&amp;gt;=0&amp;amp;&amp;amp;x&amp;lt;=n-1&amp;amp;&amp;amp;y&amp;gt;=0&amp;amp;&amp;amp;y&amp;lt;=m-1) return true; return false; } bool dfs( int x,int y,int cur,vector&amp;lt;vector&amp;lt;char&amp;gt; &amp;gt; &amp;amp; maze,string &amp;amp; st) { // printf(&amp;quot;x:%d y:%d cur : %d\n&amp;quot;,x,y,cur); if (cur&amp;gt;=len) return true; for ( int i = 0 ; i &amp;lt; 4 ; i++) { int nx = x + dx4[i]; int ny = y + dy4[i]; if (!</description></item><item><title>leetcode 80 Remove Duplicates from Sorted Array II （有序数组去除重复元素）</title><link>https://111qqz.com/2017/04/leetcode-80-remove-duplicates-from-sorted-array-ii/</link><pubDate>Wed, 05 Apr 2017 13:36:44 +0000</pubDate><guid>https://111qqz.com/2017/04/leetcode-80-remove-duplicates-from-sorted-array-ii/</guid><description>
Follow up for &amp;quot;Remove Duplicates&amp;quot;: What if duplicates are allowed at most twice?
For example, Given sorted array nums = [1,1,1,2,2,3],
Your function should return length = 5, with the first five elements of nums being 1, 1, 2, 2 and 3. It doesn't matter what you leave beyond the new length.
Subscribe to see which companies asked this question.
题意：一个有序数组，每个元素最多出现两次，如果大于两次，把多的去掉，返回去掉后的数组长度len，以及要求数组前len是去掉那些元素之后的元素。//语死早。。看原题好了。。
思路：排序了还不是随便搞？ 没要求空间再开一个标记空间。。。O(1)空间的话。。就乱搞一下？
/* *********************************************** Author :111qqz Created Time :2017年04月05日 星期三 21时25分48秒 File Name :80.</description></item><item><title>leetcode 81. Search in Rotated Sorted Array II (有重复元素的旋转数组找给定值)</title><link>https://111qqz.com/2017/04/leetcode-81-search-in-rotated-sorted-array-ii/</link><pubDate>Wed, 05 Apr 2017 13:17:51 +0000</pubDate><guid>https://111qqz.com/2017/04/leetcode-81-search-in-rotated-sorted-array-ii/</guid><description>
Suppose an array sorted in ascending order is rotated at some pivot unknown to you beforehand.
(i.e., 0 1 2 4 5 6 7 might become 4 5 6 7 0 1 2).
Write a function to determine if a given target is in the array.
The array may contain duplicates.
好像阿里一面的时候问过。。。
思路：肯定是二分。。。不过由于有重复元素。。。所以很恶心。。。
总的思路是。。。当发现重复元素。。并且该重复元素不是target的时候。。。缩小范围。。。
/* *********************************************** Author :111qqz Created Time :2017年04月05日 星期三 20时26分25秒 File Name :81.cpp ************************************************ */ class Solution { public: bool search(vector&amp;lt;int&amp;gt;&amp;amp; nums, int target) { int siz = nums.</description></item><item><title>leetcode 289. Game of Life (模拟)</title><link>https://111qqz.com/2017/04/leetcode-289-game-of-life/</link><pubDate>Wed, 05 Apr 2017 12:03:28 +0000</pubDate><guid>https://111qqz.com/2017/04/leetcode-289-game-of-life/</guid><description>
According to the Wikipedia's article: &amp;quot;The Game of Life, also known simply as Life, is a cellular automaton devised by the British mathematician John Horton Conway in 1970.&amp;quot;
Given a board with m by n cells, each cell has an initial state live (1) or dead (0). Each cell interacts with its eight neighbors (horizontal, vertical, diagonal) using the following four rules (taken from the above Wikipedia article):
1. Any live cell with fewer than two live neighbors dies, as if caused by under-population.</description></item><item><title>leetcode 90. Subsets II (枚举子集)</title><link>https://111qqz.com/2017/04/leetcode%2090-subsets-ii/</link><pubDate>Wed, 05 Apr 2017 10:45:02 +0000</pubDate><guid>https://111qqz.com/2017/04/leetcode%2090-subsets-ii/</guid><description>
Given a collection of integers that might contain duplicates, nums, return all possible subsets.
Note: The solution set must not contain duplicate subsets.
For example, If nums = [1,2,2], a solution is:
[ [2], [1], [1,2,2], [2,2], [1,2], [] ] 思路：
复习（？）一下 枚举子集的三种写法
（还有种更飘逸的...先不写了orz
这道题我用位向量法A的。。
/* *********************************************** Author :111qqz Created Time :2017年04月05日 星期三 17时15分34秒 File Name :90.cpp ************************************************ */ class Solution { public: set&amp;lt;vector&amp;lt;int&amp;gt; &amp;gt;se; int B[1005]; vector &amp;lt;vector&amp;lt;int&amp;gt; &amp;gt;res; void get_subset(int n,int *B,int cur,vector&amp;lt;int&amp;gt;&amp;amp; nums) { // cout&amp;lt;&amp;lt;&amp;quot;cur:&amp;quot;&amp;lt;&amp;lt;cur&amp;lt;&amp;lt;endl; if (cur==n) //from 0 { vector&amp;lt;int&amp;gt;tmp; for ( int i = 0 ; i &amp;lt; n ; i++) if (B[i]) tmp.</description></item><item><title>leetcode 287. Find the Duplicate Number (floyd判圈算法找重复元素)</title><link>https://111qqz.com/2017/04/leetcode-287-find-the-duplicate-number-floyd/</link><pubDate>Wed, 05 Apr 2017 07:31:49 +0000</pubDate><guid>https://111qqz.com/2017/04/leetcode-287-find-the-duplicate-number-floyd/</guid><description>
Given an array nums containing n + 1 integers where each integer is between 1 and n (inclusive), prove that at least one duplicate number must exist. Assume that there is only one duplicate number, find the duplicate one.
Note:
1. You **must not** modify the array (assume the array is read only). 2. You must use only constant, _O_(1) extra space. 3. Your runtime complexity should be less than `O(n2)`.</description></item><item><title>leetcode 532. K-diff Pairs in an Array （找差为k的数对）</title><link>https://111qqz.com/2017/04/leetcode-532-k-diff-pairs-in-an-array/</link><pubDate>Wed, 05 Apr 2017 06:53:02 +0000</pubDate><guid>https://111qqz.com/2017/04/leetcode-532-k-diff-pairs-in-an-array/</guid><description>
Given an array of integers and an integer k, you need to find the number of unique k-diff pairs in the array. Here a k-diff pair is defined as an integer pair (i, j), where i and j are both numbers in the array and their absolute difference is k.
Example 1:
Input: [3, 1, 4, 1, 5], k = 2 Output: 2 Explanation: There are two 2-diff pairs in the array, (1, 3) and (3, 5).</description></item><item><title>leetcode 448. Find All Numbers Disappeared in an Array(寻找所有消失的元素）</title><link>https://111qqz.com/2017/04/leetcode-448-find-all-numbers-disappeared-in-an-array/</link><pubDate>Wed, 05 Apr 2017 06:19:06 +0000</pubDate><guid>https://111qqz.com/2017/04/leetcode-448-find-all-numbers-disappeared-in-an-array/</guid><description>
Given an array of integers where 1 ≤ a[i] ≤ n (n = size of array), some elements appear twice and others appear once.
Find all the elements of [1, n] inclusive that do not appear in this array.
Could you do it without extra space and in O(n) runtime? You may assume the returned list does not count as extra space.
Example:
Input: [4,3,2,7,8,2,3,1] Output: [5,6] 思路：由于元素大小有限制，是在1..n之间。
这个信息有两个作用。一个是元素都是正数，一个是元素大小（绝对值意义上的）有限。</description></item></channel></rss>