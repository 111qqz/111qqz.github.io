<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>modern cpp on 111qqz的小窝</title><link>https://111qqz.com/tags/modern-cpp/</link><description>Recent content in modern cpp on 111qqz的小窝</description><generator>Hugo -- gohugo.io</generator><language>en</language><copyright>Copyright © 2012-2022 all rights reserved.</copyright><lastBuildDate>Sat, 05 Mar 2022 16:33:25 +0800</lastBuildDate><atom:link href="https://111qqz.com/tags/modern-cpp/index.xml" rel="self" type="application/rss+xml"/><item><title>[施工中] std::shared_ptr 学习笔记</title><link>https://111qqz.com/2022/03/std-shared-ptr-notes/</link><pubDate>Sat, 05 Mar 2022 16:33:25 +0800</pubDate><guid>https://111qqz.com/2022/03/std-shared-ptr-notes/</guid><description>
概述 std::shared_ptr是智能指针的一种，在modern c++中被广泛使用（甚至滥用)
虽然天天使用，但是有些细节还不是100%清楚，因此来整理一下 为了方便表述，下文只写shared_ptr,不在写std的namespace.
组成 shared_ptr的实现中，成员通常由两部分组成。一个是所涵盖对象的指针，一个是control block 的指针
control block Tip 最重要的是，control block是 dynamically-allocated 的
(校招的时候某次面试，让我手写shared_ptr的实现，当时被多个object如何共享引用计数卡住了。。主要就是没意识到control block是单独allocate的，shared_ptr的实现中只是保留一个指针)
control block中通常包含五部分
either a pointer to the managed object or the managed object itself; the deleter (type-erased); the allocator (type-erased); the number of shared_ptrs that own the managed object; the number of weak_ptrs that refer to the managed object. 这里面有几点值得强调：
两个引用计数都是atomic的。 weak_ptr是为了解决循环引用 type-erased是什么？ 后面会介绍 线程安全 shared_ptr的线程安全性快成c++面试的top10经典八股文了
Tip 简单说，shared_ptr&amp;lt;T&amp;gt;的引用计数的实现是线程安全的(通常是两个atomic变量)，但是对于T的操作不是线程安全的*</description></item><item><title>[c++17] std::any 笔记</title><link>https://111qqz.com/2022/03/std-any-notes/</link><pubDate>Sat, 05 Mar 2022 16:02:36 +0800</pubDate><guid>https://111qqz.com/2022/03/std-any-notes/</guid><description>
背景 一种很常见的背景是，需要表示未知类型的数据。 比如可能是用户提供的数据，比如是一个Cache的实现，value想支持任意类型的数据
对于这种场景，c语言的出身的开发者通常会使用void*来实现
1struct day { 2 // ...things... 3 void* user_data; 4}; 5 6struct month { 7 std::vector&amp;lt;day&amp;gt; days; 8 void* user_data; 9}; 10 了解cpp11的开发者可能会使用std::shared_ptr&amp;lt;void&amp;gt; 来实现
1struct day { 2 // ...things... 3 std::shared_ptr&amp;lt;void&amp;gt; user_data; 4}; 5 6struct month { 7 std::vector&amp;lt;day&amp;gt; days; 8 std::shared_ptr&amp;lt;void&amp;gt; user_data; 9}; 10 那么有没有更好的实现办法呢？是有的，c++17中提供了std::any
std::any含义 The class any describes a type-safe container for single values of any copy constructible type. Tip 重点是提供了类型安全。</description></item><item><title>[c++11] std::async std::packaged_task std::promise and std::future notes</title><link>https://111qqz.com/2018/09/c11-async-packaged-ask-promise-future-notes/</link><pubDate>Sun, 30 Sep 2018 06:49:27 +0000</pubDate><guid>https://111qqz.com/2018/09/c11-async-packaged-ask-promise-future-notes/</guid><description>
把std::async,std::packaged_task,std::promise三个放在一起来说,是因为他们都可以返回一个std::future对象.简单来说,当某个线程需要等待一个特定的一次性事件(one-off event),它可以用一个&amp;quot;future&amp;quot;来表示这个事件.
std::async 有的时候可能你需要做一个花费事件比较长的计算,但是计算结果不是立刻需要.这个时候就可以用一个新的线程来做这个计算.这里比较关键的问题是如何将在新线程进行计算的结果传回到当前线程,因为std::thread并没有提供一个类似的机制.
这个时候就需要std::async登场了.
1 2 #include &amp;lt;future&amp;gt;3 #include &amp;lt;iostream&amp;gt;4 int find_the_answer_to_ltuae(); 5 void do_other_stuff(); 6 int main() 7 { 8 std::future&amp;lt;int&amp;gt; the_answer=std::async(find_the_answer_to_ltuae); 9 do_other_stuff(); 10 std::cout&amp;lt;&amp;lt;&amp;#34;The answer is &amp;#34;&amp;lt;&amp;lt;the_answer.get()&amp;lt;&amp;lt;std::endl; 11 } 当然也可以与向std::thread包装的thread function中传参数一样,向std::async中传参数,如下:
1 2 #include &amp;lt;string&amp;gt;3 #include &amp;lt;future&amp;gt;4 struct X 5 { 6 void foo(int,std::string const&amp;amp;); 7 std::string bar(std::string const&amp;amp;); 8 }; 9 X x; 10 auto f1=std::async(&amp;amp;X::foo,&amp;amp;x,42,&amp;#34;hello&amp;#34;); // 调用p-&amp;gt;foo(42, &amp;#34;hello&amp;#34;)，p是指向x的指针 11 auto f2=std::async(&amp;amp;X::bar,x,&amp;#34;goodbye&amp;#34;); // 调用tmpx.bar(&amp;#34;goodbye&amp;#34;)， tmpx是x的拷贝副本 12 struct Y 13 { 14 double operator()(double); 15 }; 16 Y y; 17 auto f3=std::async(Y(),3.</description></item><item><title>[C++11]std::condition_variable notes</title><link>https://111qqz.com/2018/09/condition_variable-notes/</link><pubDate>Sun, 23 Sep 2018 08:42:33 +0000</pubDate><guid>https://111qqz.com/2018/09/condition_variable-notes/</guid><description>
condition_variable 类是同步原语，能用于阻塞一个线程，或同时阻塞多个线程，直至另一线程修改共享变量（条件）并通知 condition_variable 。 用人话来说,condition_variable，也就是条件变量，是线程间通信的一种方式。
线程之间在很多时候需要通信，比如经典的生产者消费者问题
一个比较naive的方案是，用mutex来保护一个flag,然后另一线程不停得check这个flag的状态是否改变。以及在这个方案上的改进:让另一个线程check之后，可以先睡一段时间。
但是这两种方法都不够好。第一种不好的原因当然是不停得check，肯定会耗费大量的资源。而第二种，由于没办法准确估计要休眠的时间，因此不够实际。
这个时候我们可以考虑使用条件变量。
条件变量是可以用在如下场景: 一个或者多个线程在等某个条件的成立，而这个条件由另外的线程所控制。当该条件成立时，控制该条件的线程会主动通知这些线程，将这些线程唤醒。
如下是一个最简单的例子:
1 std::mutex mut; 2 std::queue&amp;lt;data_chunk&amp;gt; data_queue; // 1 3 std::condition_variable data_cond; 4 5 void data_preparation_thread() 6 { 7 while(more_data_to_prepare()) 8 { 9 data_chunk const data=prepare_data(); 10 std::lock_guard&amp;lt;std::mutex&amp;gt; lk(mut); 11 data_queue.push(data); // 2 12 data_cond.notify_one(); // 3 13 } 14 } 15 16 void data_processing_thread() 17 { 18 while(true) 19 { 20 std::unique_lock&amp;lt;std::mutex&amp;gt; lk(mut); // 4 21 data_cond.wait( 22 lk,[]{return !</description></item><item><title>std::call_once &amp;&amp; std::once_flag notes</title><link>https://111qqz.com/2018/09/stdcall_once-stdonce_flag-notes/</link><pubDate>Thu, 20 Sep 2018 12:47:46 +0000</pubDate><guid>https://111qqz.com/2018/09/stdcall_once-stdonce_flag-notes/</guid><description>
多线程保护数据时，一种较为特殊的情况是只需要保护资源的初始化。
资源初始化一般遵循&amp;quot;lazy initialization&amp;quot;的原则，也就是在用到该资源最近的地方再初始化。
比较容易想到的办法是用std::mutex，将资源初始化的地方锁起来，如下:
1 std::shared_ptr&amp;lt;some_resource&amp;gt; resource_ptr; 2 std::mutex resource_mutex; 3 void foo() 4 { 5 std::unique_lock&amp;lt;std::mutex&amp;gt; lk(resource_mutex); 6 if(!resource_ptr) 7 { 8 resource_ptr.reset(new some_resource); 9 } 10 lk.unlock(); 11 resource_ptr-&amp;gt;do_something(); 12 } 13 这确实是一个办法。但是初始化时如果需要耗费比较多的时间，当有比较多的线程时，一个线程初始化时，其他线程会耗时间在不必要的等待上。
在c++11以后，我们可以使用std::once_flag和std::call_once来解决资源初始化时加锁的问题。比起显示调用std::mutex的好处是，资源消耗更少。
下面是两个例子:
1 std::shared_ptr&amp;lt;some_resource&amp;gt; resource_ptr; 2 std::once_flag resource_flag; 3 b 4 void init_resource() 5 { 6 resource_ptr.reset(new some_resource); 7 } 8 void foo() 9 { 10 std::call_once(resource_flag,init_resource); 11 resource_ptr-&amp;gt;do_something(); 12 } 13 14 15 16 17 class X 18 { 19 private: 20 connection_info connection_details; 21 connection_handle connection; 22 std::once_flag connection_init_flag; 23 void open_connection() 24 { 25 connection=connection_manager.</description></item><item><title>[c++11 ]std::move 右值引用 转移语义 完美转发 notes</title><link>https://111qqz.com/2018/09/c11-stdmove-notes/</link><pubDate>Sun, 09 Sep 2018 13:01:45 +0000</pubDate><guid>https://111qqz.com/2018/09/c11-stdmove-notes/</guid><description>
起因是在看&amp;lt;CplusplusConcurrencyInAction_PracticalMultithreading&amp;gt;，里面讲到转移一个std::thread的ownership提到了std::move.
之前[C++11 ] std::ref&amp;amp;&amp;amp;std::reference_wrapper notes 提到的情况是在我们想要用引用的时候却进行了拷贝，得到不符合期望的结果。现在的情况是，有些object或许是不支持拷贝构造的。比如std::unique_str,std::ifstream，这个时候如果我们需要传参数进去，就可以使用std::move来实现。比如下面这个例子:
1 2 void process_big_object(std::unique_ptr&amp;lt;big_object&amp;gt;); 3 std::unique_ptr&amp;lt;big_object&amp;gt; p(new big_object); 4 p-&amp;gt;prepare_data(42); 5 std::thread t(process_big_object,std::move(p)); 6 当然这只是使用std::move的一种情形，即传递不允许拷贝构造的object作为参数。
另外，std::move可以更有效率地传递资源。内容之后补orz
实际上std::move()的作用是传进去一个object,返回这个object的右值引用（rvalue reference）
首先区分左值和右值，这其实是一个c语言中就有的概念（作为区分，右值引用是C++11中新引入的概念）
一般来说，右值是不能被取地址的值。在C++11之前，右值是不能被引用的。
语法上为了区分C++11之前的引用（也就是左值引用&amp;amp;）,右值引用的符号为&amp;amp;&amp;amp;
1 void process_value(int&amp;amp; i) { 2 std::cout &amp;lt;&amp;lt; &amp;#34;LValue processed: &amp;#34; &amp;lt;&amp;lt; i &amp;lt;&amp;lt; std::endl; 3 } 4 5 void process_value(int&amp;amp;&amp;amp; i) { 6 std::cout &amp;lt;&amp;lt; &amp;#34;RValue processed: &amp;#34; &amp;lt;&amp;lt; i &amp;lt;&amp;lt; std::endl; 7 } 8 9 int main() { 10 int a = 0; 11 process_value(a); 12 process_value(1); 13 } 14 LValue processed: 0 15 RValue processed: 1 那么为什么要引入“右值引用”这个概念？ 主要有两个目的：完美转发(Perfect Forwarding)和转移语义(Move Sementics)</description></item><item><title>[C++11 ] std::ref&amp;&amp;std::reference_wrapper notes</title><link>https://111qqz.com/2018/09/reference_wrapper-notes/</link><pubDate>Sun, 09 Sep 2018 11:28:53 +0000</pubDate><guid>https://111qqz.com/2018/09/reference_wrapper-notes/</guid><description>
起因是在看《CplusplusConcurrencyInAction_PracticalMultithreading》的时候，里面讲到初始化std::thread的时候，如果thread funtion的参数列表中有引用，需要传入std::ref才可以得到符合预期的结果。
查阅发现std::ref是用来生成std::reference_wrapper。 按照 cppreference 上的话来说
`std::reference_wrapper` 是包装引用于可复制、可赋值对象的类模板。它常用作将容器存储入无法正常保有引用的标准容器（类似 [std::vector](https://zh.cppreference.com/w/cpp/container/vector) ）的机制。 用人话来说，就是有的时候一些地方（比如STL容器中传值，又比如std::bind）会默认使用复制，这可能与我们想使用引用的期望不符。
具体见下面的几个例子：
1 2 #include &amp;lt;functional&amp;gt;3 #include &amp;lt;iostream&amp;gt;4 5 void f(int&amp;amp; n1, int&amp;amp; n2, const int&amp;amp; n3) 6 { 7 std::cout &amp;lt;&amp;lt; &amp;#34;In function: &amp;#34; &amp;lt;&amp;lt; n1 &amp;lt;&amp;lt; &amp;#39; &amp;#39; &amp;lt;&amp;lt; n2 &amp;lt;&amp;lt; &amp;#39; &amp;#39; &amp;lt;&amp;lt; n3 &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;; 8 ++n1; // increments the copy of n1 stored in the function object 9 ++n2; // increments the main()&amp;#39;s n2 10 // ++n3; // compile error 11 } 12 13 int main() 14 { 15 int n1 = 1, n2 = 2, n3 = 3; 16 std::function&amp;lt;void()&amp;gt; bound_f = std::bind(f, n1, std::ref(n2), std::cref(n3)); 17 n1 = 10; 18 n2 = 11; 19 n3 = 12; 20 std::cout &amp;lt;&amp;lt; &amp;#34;Before function: &amp;#34; &amp;lt;&amp;lt; n1 &amp;lt;&amp;lt; &amp;#39; &amp;#39; &amp;lt;&amp;lt; n2 &amp;lt;&amp;lt; &amp;#39; &amp;#39; &amp;lt;&amp;lt; n3 &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;; 21 bound_f(); 22 std::cout &amp;lt;&amp;lt; &amp;#34;After function: &amp;#34; &amp;lt;&amp;lt; n1 &amp;lt;&amp;lt; &amp;#39; &amp;#39; &amp;lt;&amp;lt; n2 &amp;lt;&amp;lt; &amp;#39; &amp;#39; &amp;lt;&amp;lt; n3 &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;; 23 } Before function: 10 11 12 In function: 1 11 12 After function: 10 12 12 我们发现直接传进去的参数n1的值没有改变，而使用std::ref传进去的值的结果符合预期。</description></item><item><title>[C++11] promise &amp;&amp; future leanrning notes</title><link>https://111qqz.com/2018/08/promise-future-notes/</link><pubDate>Thu, 23 Aug 2018 02:45:53 +0000</pubDate><guid>https://111qqz.com/2018/08/promise-future-notes/</guid><description>
用人话就是，主线程传给附属线程一个promise Object,然后主线程想要获取附属线程set给promise Object的值（也就是该线程返回的某个结果），需要通过主线程中的promise object 得到对应的future object(每个promise 对应一个 future),然后调用future 的get方法。如果附属线程没有执行作为参数传入的promise的set方法去返回结果，那么程序就会block住。
1 /* *********************************************** 2Author :111qqz 3mail: renkuanze@sensetime.com 4Created Time :2018年08月23日 星期四 10时37分07秒 5File Name :future_sample.cpp 6************************************************ */ 7 8 #include &amp;lt;iostream&amp;gt;9 #include &amp;lt;thread&amp;gt;10 #include &amp;lt;future&amp;gt;11 12 void initiazer(std::promise&amp;lt;int&amp;gt; * promObj) 13 { 14 //std::cout&amp;lt;&amp;lt;&amp;#34;Inside Thread&amp;#34;&amp;lt;&amp;lt;std::endl; 15 for ( int i = 1 ; i &amp;lt;= 2000000000 ; i++); 16 //promObj-&amp;gt;set_value(35); 17 } 18 19 int main() 20 { 21 std::promise&amp;lt;int&amp;gt; promiseObj; 22 std::future&amp;lt;int&amp;gt; futureObj = promiseObj.</description></item><item><title>c++11 function 与bind 学习笔记</title><link>https://111qqz.com/2018/07/cpp11-function-bind-notes/</link><pubDate>Thu, 19 Jul 2018 10:46:26 +0000</pubDate><guid>https://111qqz.com/2018/07/cpp11-function-bind-notes/</guid><description>
C++11 std::function 是一种通用、多态的函数封装,它的实例可以对任何可 以调用的目标实体进行存储、复制和调用操作
见下面的例子
1 /* *********************************************** 2Author :111qqz 3mail: renkuanze@sensetime.com 4Created Time :2018年07月19日 星期四 17时41分00秒 5File Name :bind.cpp 6************************************************ */ 7 #include &amp;lt;functional&amp;gt;8 #include &amp;lt;iostream&amp;gt;9 using namespace std; 10 float foo( int x,int y,int z){return x+y+z+1.;} 11 int main() 12 { 13 function&amp;lt;int(int,int)&amp;gt;func = foo; 14 int y = 10; 15 function&amp;lt;int(int)&amp;gt;fun = [&amp;amp;]( int value)-&amp;gt;int 16 { 17 return 1+value+y; 18 }; 19 cout&amp;lt;&amp;lt;func(15,4,9)&amp;lt;&amp;lt;endl; 20 cout&amp;lt;&amp;lt;fun(8)&amp;lt;&amp;lt;endl; 21 return 0; 22 } 23 std::bind 则是用来绑定函数调用的参数的,它解决的需求是我们有时候可 能并不一定能够一次性获得调用某个函数的全部参数,通过这个函数,我们可以将 部分调用参数提前绑定到函数身上成为一个新的对象,然后在参数齐全后,完成调 用</description></item><item><title>C++ 记录代码运行时间</title><link>https://111qqz.com/2018/07/Record-code-run-time-with-cpp/</link><pubDate>Tue, 10 Jul 2018 02:26:50 +0000</pubDate><guid>https://111qqz.com/2018/07/Record-code-run-time-with-cpp/</guid><description>
以前用的办法太老土啦
看到一个since C++11的方法，我觉得比较优雅
1 #include &amp;lt;iostream&amp;gt;2 #include &amp;lt;chrono&amp;gt;3 //#include &amp;lt;ratio&amp;gt; 4 #include &amp;lt;thread&amp;gt;5 6 void f() 7 { 8 std::this_thread::sleep_for(std::chrono::seconds(1)); 9 } 10 11 int main() 12 { 13 auto t1 = std::chrono::high_resolution_clock::now(); 14 f(); 15 auto t2 = std::chrono::high_resolution_clock::now(); 16 17 // floating-point duration: no duration_cast needed 18 std::chrono::duration&amp;lt;double, std::milli&amp;gt; fp_ms = t2 - t1; 19 20 // integral duration: requires duration_cast 21 auto int_ms = std::chrono::duration_cast&amp;lt;std::chrono::milliseconds&amp;gt;(t2 - t1); 22 23 // converting integral duration to integral duration of shorter divisible time unit: 24 // no duration_cast needed 25 std::chrono::duration&amp;lt;long, std::micro&amp;gt; int_usec = int_ms; 26 27 std::cout &amp;lt;&amp;lt; &amp;#34;f() took &amp;#34; &amp;lt;&amp;lt; fp_ms.</description></item></channel></rss>