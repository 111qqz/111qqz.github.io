<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>csapp on 111qqz的小窝</title><link>https://111qqz.com/tags/csapp/</link><description>Recent content in csapp on 111qqz的小窝</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><copyright>Copyright © 2012-2022 all rights reserved.</copyright><lastBuildDate>Sat, 26 Jun 2021 18:18:52 +0800</lastBuildDate><atom:link href="https://111qqz.com/tags/csapp/index.xml" rel="self" type="application/rss+xml"/><item><title>[施工完成] CSAPP shell lab</title><link>https://111qqz.com/2021/06/csapp-shelllab/</link><pubDate>Sat, 26 Jun 2021 18:18:52 +0800</pubDate><guid>https://111qqz.com/2021/06/csapp-shelllab/</guid><description>
背景 动手实现一个简单的Lab，主要依赖于课本第八章的内容 感觉主要是05比较难。。发现执行的顺序不太对。。原因是SIGCHLD里面waitpid参数没写对。。 后面的就相对简单了 累计大概花了10个小时的样子
实现细节 built-in comamnd built-in command 指的是shell自身的命令，因此只有少数几个，比如pwd.在上使用which pwd的时候，会提示&amp;quot;pwd: shell built-in command&amp;quot;
测试文件的构成 以trace04.txt举例
1# 2# trace04.txt - Run a background job. 3# 4/bin/echo -e tsh&amp;gt; ./myspin 1 \046 5./myspin 1 &amp;amp; 这是两条测试命令。。第一条是调用了 &amp;quot;/bin/echo -e&amp;quot;来执行，而且这条命令是一个fg job, \046 是'&amp;amp;'的ascii，这是输出字符串的一部分。
子进程中的log打印不正确 有些执行路径的log没有打印出来 可以调用flush(stdout) 确保打印
在执行fg job的时候，会等待上一个未结束的bg job执行 这是因为waitpid中的option写了默认的0，没有传入正确的option导致的
SIGCHLD的实现 感觉这个函数是整个Lab的难点
注意这里除了要对正常结束的process处理以外，也要处理因为其他原因导致的进程退出 可以根据下图的内容来判断是因为哪种原因进程结束的 Image not found a.warning-link { color: inherit !important; font-weight: inherit !important; text-decoration: underline !important; border-bottom: none !</description></item><item><title>[施工完成] CSAPP Malloc lab</title><link>https://111qqz.com/2021/04/csapp-malloclab/</link><pubDate>Sun, 14 Mar 2021 16:05:42 +0800</pubDate><guid>https://111qqz.com/2021/04/csapp-malloclab/</guid><description>
背景 动手实现一个memory allocator,体会core到爆炸的乐趣(不是
trace file 结构分析 trace file 是对allocator的输入的描述，可以从mdriver.c中的
1static trace_t *read_trace(char *tracedir, char *filename); 看到Parse的逻辑，从而得到trace file的结构。
1 fscanf(tracefile, &amp;#34;%d&amp;#34;, &amp;amp;(trace-&amp;gt;sugg_heapsize)); /* not used */ 2 fscanf(tracefile, &amp;#34;%d&amp;#34;, &amp;amp;(trace-&amp;gt;num_ids)); 3 // 似乎只有num_ops用到了。。 4 fscanf(tracefile, &amp;#34;%d&amp;#34;, &amp;amp;(trace-&amp;gt;num_ops)); 5 fscanf(tracefile, &amp;#34;%d&amp;#34;, &amp;amp;(trace-&amp;gt;weight)); /* not used */ trace file起始位置的4个数的含义，其中第二个和第三个比较重要。 num_ids表示一共有多少个不同的内存块(对应后续的指令可以显示指定操作哪个内存块，从而确保allocator对malloc和free的顺序没有任何依赖的保证)，num_ops表示操作数，也就是malloc(对应'a'),realloc(对应'r'),free(对应'f')三种操作的个数。
1 while (fscanf(tracefile, &amp;#34;%s&amp;#34;, type) != EOF) { 2 switch (type[0]) { 3 case &amp;#39;a&amp;#39;: 4 fscanf(tracefile, &amp;#34;%u %u&amp;#34;, &amp;amp;index, &amp;amp;size); 5 trace-&amp;gt;ops[op_index].type = ALLOC; 6 trace-&amp;gt;ops[op_index].</description></item><item><title>[施工完成] CSAPP Cachelab</title><link>https://111qqz.com/2020/12/csapp-cache-lab/</link><pubDate>Sat, 26 Dec 2020 16:40:42 +0800</pubDate><guid>https://111qqz.com/2020/12/csapp-cache-lab/</guid><description>
背景 CSAPP:3e 的配套实验 地址 分成了两个部分，第一部分是模拟一下cache的miss,hit,evict的规则。第二部分是优化一个矩阵的转置，使得miss尽可能少。
PART A 给了一个标程csim-ref,要求实现一个程序，输出与该标程一致。
写的时候太心急了。。导致没看完作业要求就开始写了。。 然后就纠结了好久。。如果要访问的地址超过了一个block line的边界该怎么办。。
然而实际上题目里已经把这种情况排除了。。
For this this lab, you should assume that memory accesses are aligned properly, such that a single memory access never crosses block boundaries. By making this assumption, you can ignore the request sizes in the valgrind traces
这样的话。。就没什么难度了。。 LRU的替换策略用纯c去撸hashmap+list有点烦。。。干脆就写了暴力的实现。。反正是模拟题(x
1 2#include &amp;lt;getopt.h&amp;gt;3#include &amp;lt;stdbool.h&amp;gt;4#include &amp;lt;stdio.h&amp;gt;5#include &amp;lt;stdlib.h&amp;gt;6#include &amp;lt;string.h&amp;gt;7#include &amp;lt;unistd.h&amp;gt;8 9#include &amp;#34;cachelab.h&amp;#34;10 11const unsigned int address_space_size = 64; 12// https://stackoverflow.</description></item><item><title>【施工完成】CSAPP archlab</title><link>https://111qqz.com/2020/02/csapp-archlab/</link><pubDate>Wed, 26 Feb 2020 22:54:33 +0800</pubDate><guid>https://111qqz.com/2020/02/csapp-archlab/</guid><description>
背景 CSAPP:3e第四章配套的实验。 第四章是讲处理器架构的，章节的重点是实现一个六阶段流水线。
lab的内容也是，需要实现一个Y86-64的流水线，并进行性能调优。
准备工作 材料里面sim.tar解压之后，有可能是没办法编译通过的。 原因是tk（a windowing toolkit ）在8.5版本的时候废弃了某个接口，与8.6版本不兼容。
因此需要安装tk 8.5或者更低的版本。 在archlinux/manjaro下可以通过aur安装tk85.
use tk&amp;lt;=8.5,8.6 or above will not compile Modify the corresponding header file in seq/ssim.c and pipe/psim.c (assmue tk8.5 header file is located in /usr/local/tk8.5) 1 2#ifdef HAS_GUI 3#include &amp;lt;tk8.5/tk.h&amp;gt; // #include &amp;lt;tk/tk.h&amp;gt;4#endif /* HAS_GUI */5 6 7 modify Makefile in sim 1 2 3 4# Comment this out if you don&amp;#39;t have Tcl/Tk on your system 5 6GUIMODE=-DHAS_GUI 7 8# Modify the following line so that gcc can find the libtcl.</description></item><item><title>【施工完成】CSAPP attacklab</title><link>https://111qqz.com/2020/02/csapp-attacklab/</link><pubDate>Sat, 15 Feb 2020 23:24:23 +0800</pubDate><guid>https://111qqz.com/2020/02/csapp-attacklab/</guid><description>
背景 CSAPP 处理器那章快看完了，猛然发现竟然还有个attacklab.. 之前以为每一章只有一个lab
这个lab是教大家如何找到程序的漏洞并实施攻击。 知道如何实施攻击，才能更好地写出安全的代码。
包含5个phase
前三个没有什么保护措施,栈地址是固定的,可以注入可执行代码,比较容易. 后两个加了随机栈地址以及栈上地址不可执行的保护措施,需要用Return-oriented_programming 的方式搞定.
phase 1 第一个比较简单，利用buffer overflow 来将函数的返回地址，替换成一个已知函数的地址，达到执行特定函数的目的。
回忆一下函数调用的机器代码实现，需要先把函数的返回地址压栈，然后开辟栈空间，做些有的没的，做完之后析构开辟的栈空间，并把之前压入栈中的地址赋值给%ip(或者叫PC)，作为下一条指定的地址。函数的返回地址通常就是函数后面第一条指令的地址。
可以参考如下两张图。
Image not found a.warning-link { color: inherit !important; font-weight: inherit !important; text-decoration: underline !important; border-bottom: none !important; } 网站链接: /2020/02/csapp-attacklab/https://i.loli.net/2020/02/15/EB8zbtqpFKUAPH4.png
链接到文件: /content/post/公开课/https://i.loli.net/2020/02/15/EB8zbtqpFKUAPH4.png
使用 Page Bundles: true
Image not found a.warning-link { color: inherit !important; font-weight: inherit !important; text-decoration: underline !important; border-bottom: none !important; } 网站链接: /2020/02/csapp-attacklab/https://i.loli.net/2020/02/15/gBSsAm5NJrVWheo.jpg</description></item><item><title>【施工完成】CSAPP bomb lab</title><link>https://111qqz.com/2020/02/csapp-bomblab/</link><pubDate>Sat, 01 Feb 2020 19:36:23 +0800</pubDate><guid>https://111qqz.com/2020/02/csapp-bomblab/</guid><description>
背景 疫情肆虐,在家百无聊赖,于是开始拆炸弹. 炸弹分为6个阶段,每个阶段必须输入一个特定的字符串,否则炸弹就会爆炸. 提供给我们的是一个.c文件和一个linux可执行文件bomb
1 2/*************************************************************************** 3* Dr. Evil&amp;#39;s Insidious Bomb, Version 1.1 4* Copyright 2011, Dr. Evil Incorporated. All rights reserved. 5* 6* LICENSE: 7* 8* Dr. Evil Incorporated (the PERPETRATOR) hereby grants you (the 9* VICTIM) explicit permission to use this bomb (the BOMB). This is a 10* time limited license, which expires on the death of the VICTIM. 11* The PERPETRATOR takes no responsibility for damage, frustration, 12* insanity, bug-eyes, carpal-tunnel syndrome, loss of sleep, or other 13* harm to the VICTIM.</description></item><item><title>【施工完成】CSAPP data lab</title><link>https://111qqz.com/2019/02/csapp-data-lab/</link><pubDate>Thu, 28 Feb 2019 14:06:42 +0000</pubDate><guid>https://111qqz.com/2019/02/csapp-data-lab/</guid><description>
CSAPP第二章的内容以前组成原理基本都学过...所以就简单翻了翻。
对应的lab是用位运算实现各种有的没的...
题目基本都很tricky...
除了用到一些常规的位运算性质，还用到了一些奇怪的条件:
* ~0x7FFFFFFF = 0x7FFFFFFF + 1 * 0xFFFFFFFF +1 = 0x00000000 * 0 == ~0+1
唯一让我觉得比较有趣的是how many bits这道题
题目要求是给一个32-bit signed int,问最少用多少位能得到它的补码表示。
考虑正数，显然，高位的连续的多个0是不必要的，只需要一个符号位的0即可。
那么对于负数，**高位的连续的多个1也是不必要的。 **原因是，-2^k + 2^(k-1) = -2^(k-1),也就是说，去掉两个连续的1中高位的那个，数值没有改变。
我们可以将正数和负数统一来看，都是找到最高位的0和1的交界。
这可以通过和相邻的位置求异或，找到最高位的1的方式来实现。
接下来就是如何找一个数的最高位的1的位置了。
方法是构造一个单调的函数f,假设最高位位置为a,那么f((a,32))=0,f([0,a])=1.
然后在函数f上二分。
全部问题的代码如下,思路写在注释里了。还有3个涉及浮点数的问题之后补。
/* * bitXor - x^y using only ~ and &amp;amp; * Example: bitXor(4, 5) = 1 * Legal ops: ~ &amp;amp; * Max ops: 14 * Rating: 1 */ /* 0 0 -&amp;gt; 0 0 1 -&amp;gt; 1 1 0 - &amp;gt; 1 1 1 - &amp;gt; 0 */ // ~(~a &amp;amp; ~b)&amp;amp;~(a&amp;amp;b) int bitXor(int x, int y) { int ans = ~(~x &amp;amp; ~y)&amp;amp;(~(x&amp;amp;y)); // printf(&amp;quot;%d\n&amp;quot;,ans); return ans; } /* * tmin - return minimum two's complement integer * Legal ops: !</description></item></channel></rss>