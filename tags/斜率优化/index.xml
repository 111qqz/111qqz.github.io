<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>斜率优化 on 111qqz的小窝</title><link>https://111qqz.com/tags/%E6%96%9C%E7%8E%87%E4%BC%98%E5%8C%96/</link><description>Recent content in 斜率优化 on 111qqz的小窝</description><generator>Hugo -- gohugo.io</generator><language>en</language><copyright>Copyright © 2012-2022 all rights reserved.</copyright><lastBuildDate>Sun, 25 Sep 2016 16:10:49 +0000</lastBuildDate><atom:link href="https://111qqz.com/tags/%E6%96%9C%E7%8E%87%E4%BC%98%E5%8C%96/index.xml" rel="self" type="application/rss+xml"/><item><title>codeforces 455 E. Function (斜率优化，线段树套凸包)</title><link>https://111qqz.com/2016/09/cf455e/</link><pubDate>Sun, 25 Sep 2016 16:10:49 +0000</pubDate><guid>https://111qqz.com/2016/09/cf455e/</guid><description>
题目链接 题意：已知 f(1, j) = a[j] f[i][j] = min (f[i-1][j],f[i-1][j-1]) 然后给出 n n≤1E5​​ 个数（a[i] a​i​​≤1E4​​)，给出 m组查询（m&amp;lt;=1E5），每组两个数 x,y 问 f(x,y) 是多少。
参考题解：茶姐的回答（下标好像搞错了，领会意思即可
官方题解
以及前置技能点是：斜率优化+线段树
思路：考虑一排数a[1]到a[n]，原问题可以转化成从a[y]走x-1步，每一步原地不动或者向左移动一个格子后的总的代价。
Function is calculated as follows: , k__i — how many times we visited the i th element of the array a.
这个式子感觉不是很明确。。。。
窝来解释一下。。。l=y-x+1是可能走到的最左边的点。。。。
终点在【L,Y】区间内都是合法的。。。。
然后考虑代价最小的情况。。。
一定是在最小的格子上尽可能多得停留，在其他格子上只停留一次。。。
对于终点为l的情况，走到y要花费y-l步,一共要走x-1步，那么多出来x-1-(y-l)步，这些步停留在最小的点上是最优的，最小的点上之前停留了一次，现在再多停留x-1-(y-l)次，也就是停留了x-(y-l)次。
那么，另一个结论是，区间[l,y]中，当a[l]为最小的时候才是最优的。。。
为什么呢？
假设a[k] (k&amp;gt;l)是最小，那么以a[k]为终点的情况一定比以a[l]为终点的情况优秀（因为多走了【l,k-1】之间的点。。。走这些点比停留在a[k]的代价大）
因此对于l是终点的情况，一定在a[l]是最小值的时候是最优的。
此时代价为：
sum[y] - sum[l] + a[l]·(x - (y - l))
我们变形得到：
sum[y] - sum[l] + a[l]·(x - (y - l)) = sum[y] - sum[l] + a[l]·(x - y + l) = sum[y] - sum[l] + a[l]·l + a[l]·(x - y) = sum[y] + (a[l]·(x - y) + a[l]·l - sum[l])</description></item><item><title>hdu 3507 Print Article (斜率优化dp)</title><link>https://111qqz.com/2016/09/hdu3507/</link><pubDate>Sat, 24 Sep 2016 16:10:18 +0000</pubDate><guid>https://111qqz.com/2016/09/hdu3507/</guid><description>
题目链接
题意：n个数，分成若干段，每段的代价为 ，求最小代价。
思路：dp。
状态方程很显然个鬼。。。
dp[i] 表示处理完前面i个数的最小代价。
dp[0] = 0 ;
dp[i] = min(dp[j]+(sum[i]-sum[j])^2) ( 0&amp;lt;j &amp;lt;i),sum[i]为a[i]的前缀和。
这复杂度是n^2的。。。然而n最大5E5.....boom....
斜率优化登场！
这篇博客讲得非常好
我们假设k两边移项一下，得到：(dp[j]+num[j]^2-(dp[k]+num[k]^2))/(2*(num[j]-num[k]))&amp;lt;sum[i]。我们把dp[j]-num[j]^2看做是yj，把2*num[j]看成是xj。
那么不就是yj-yk/xj-xk&amp;lt;sum[i]么？ 左边是不是斜率的表示？
那么yj-yk/xj-xk&amp;lt;sum[i]说明了什么呢？ 我们前面是不是假设j的决策比k的决策要好才得到这个表示的？ 如果是的话，那么就说明g[j,k]=yj-jk/xj-xk&amp;lt;sum[i]代表这j的决策比k的决策要更优。
关键的来了：现在从左到右，还是设k&amp;lt;j&amp;lt;i，如果g[i,j]&amp;lt;g[j,k]，那么j点便永远不可能成为最优解，可以直接将它踢出我们的最优解集。为什么呢？
我们假设g[i,j]&amp;lt;sum[i]，那么就是说i点要比j点优，排除j点。
如果g[i,j]&amp;gt;=sum[i]，那么j点此时是比i点要更优，但是同时g[j,k]&amp;gt;g[i,j]&amp;gt;sum[i]。这说明还有k点会比j点更优，同样排除j点。
排除多余的点，这便是一种优化！
接下来看看如何找最优解。
设k&amp;lt;j&amp;lt;i。
由于我们排除了g[i,j]&amp;lt;g[j,k]的情况，所以整个有效点集呈现一种上凸性质，即k j的斜率要大于j i的斜率。
这样，从左到右，斜率之间就是单调递减的了。当我们的最优解取得在j点的时候，那么k点不可能再取得比j点更优的解了，于是k点也可以排除。换句话说，j点之前的点全部不可能再比j点更优了，可以全部从解集中排除。
于是对于这题我们对于斜率优化做法可以总结如下：
1，用一个单调队列来维护解集。
2，假设队列中从头到尾已经有元素a b c。那么当d要入队的时候，我们维护队列的上凸性质，即如果g[d,c]&amp;lt;g[c,b]，那么就将c点删除。直到找到g[d,x]&amp;gt;=g[x,y]为止，并将d点加入在该位置中。
3，求解时候，从队头开始，如果已有元素a b c，当i点要求解时，如果g[b,a]&amp;lt;sum[i]，那么说明b点比a点更优，a点可以排除，于是a出队。最后dp[i]=getDp(q[head])。
代码：
/* *********************************************** Author :111qqz Created Time :Sat 24 Sep 2016 02:16:33 PM CST File Name :code/hdu/3507.cpp ************************************************ */ #include &amp;lt;cstdio&amp;gt; #include &amp;lt;cstring&amp;gt; #include &amp;lt;iostream&amp;gt; #include &amp;lt;algorithm&amp;gt; #include &amp;lt;vector&amp;gt; #include &amp;lt;queue&amp;gt; #include &amp;lt;set&amp;gt; #include &amp;lt;map&amp;gt; #include &amp;lt;string&amp;gt; #include &amp;lt;cmath&amp;gt; #include &amp;lt;cstdlib&amp;gt; #include &amp;lt;ctime&amp;gt; #define fst first #define sec second #define lson l,m,rt&amp;lt;&amp;lt;1 #define rson m+1,r,rt&amp;lt;&amp;lt;1|1 #define ms(a,x) memset(a,x,sizeof(a)) typedef long long LL; #define pi pair &amp;lt; int ,int &amp;gt; #define MP make_pair using namespace std; const double eps = 1E-8; const int dx4[4]={1,0,0,-1}; const int dy4[4]={0,-1,1,0}; const int inf = 0x3f3f3f3f; const int N=5E5+7; int a[N],sum[N]; int dp[N]; int n,m; int q[N]; int head,tail; int calDp( int i,int j) { return dp[j] + m + ( sum[i] - sum[j] ) * ( sum[i] - sum[j] ); } int calUp(int j,int k) { return dp[j] + sum[j] * sum[j] - (dp[k] + sum[k] * sum[k]); } int calDown(int j,int k) { return 2*(sum[j] - sum[k]); } int main() { #ifndef ONLINE_JUDGE freopen(&amp;quot;code/in.</description></item><item><title>斜率优化学习笔记</title><link>https://111qqz.com/2016/09/</link><pubDate>Sat, 24 Sep 2016 15:38:00 +0000</pubDate><guid>https://111qqz.com/2016/09/</guid><description>
浅谈数形结合思想在信息学竞赛中的应用
参考博客
这个东西英文好像叫做：convex hull trick
Convex_hull_trick_wiki codeforces convex hull trick
简单说说我的理解：斜率优化是一种数形结合的思想。。。
对于一个dp的若干状态。。。有些状态是不会对答案有贡献的。。。这些我们就可以不考虑。。。
简单地说。。。如果把状态的下标和状态对应成二维平面的点。。。
凸起来的点一定不会影响答案。。。
具体证明参考论文。。。。。
也就是维护一个&amp;quot;下凸折线&amp;quot;
具体维护的办法是用单调队列来维护。。。
感觉还是挺简单的。。。。</description></item></channel></rss>