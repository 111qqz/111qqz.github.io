<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>斜率优化 on 111qqz的小窝</title><link>https://111qqz.com/tags/%E6%96%9C%E7%8E%87%E4%BC%98%E5%8C%96/</link><description>Recent content in 斜率优化 on 111qqz的小窝</description><generator>Hugo -- gohugo.io</generator><language>en</language><copyright>Copyright © 2012-2022 all rights reserved.</copyright><lastBuildDate>Sun, 25 Sep 2016 16:10:49 +0000</lastBuildDate><atom:link href="https://111qqz.com/tags/%E6%96%9C%E7%8E%87%E4%BC%98%E5%8C%96/index.xml" rel="self" type="application/rss+xml"/><item><title>codeforces 455 E. Function (斜率优化，线段树套凸包)</title><link>https://111qqz.com/2016/09/cf455e/</link><pubDate>Sun, 25 Sep 2016 16:10:49 +0000</pubDate><guid>https://111qqz.com/2016/09/cf455e/</guid><description>
题目链接 题意：已知 f(1, j) = a[j] f[i][j] = min (f[i-1][j],f[i-1][j-1]) 然后给出 n n≤1E5​​ 个数（a[i] a​i​​≤1E4​​)，给出 m组查询（m&amp;lt;=1E5），每组两个数 x,y 问 f(x,y) 是多少。
参考题解：茶姐的回答（下标好像搞错了，领会意思即可
官方题解
以及前置技能点是：斜率优化+线段树
思路：考虑一排数a[1]到a[n]，原问题可以转化成从a[y]走x-1步，每一步原地不动或者向左移动一个格子后的总的代价。
Function is calculated as follows: Image not found a.warning-link { color: inherit !important; font-weight: inherit !important; text-decoration: underline !important; border-bottom: none !important; } Web path: /2016/09/cf455e/http://codeforces.com/predownloaded/ff/64/ff6494b0e158a72527729ef1681f014ba09928a2.png
Disk path: /content/post/ACM-ICPC/http://codeforces.com/predownloaded/ff/64/ff6494b0e158a72527729ef1681f014ba09928a2.png
Using Page Bundles: true
, k__i — how many times we visited the i th element of the array a.</description></item><item><title>hdu 3507 Print Article (斜率优化dp)</title><link>https://111qqz.com/2016/09/hdu3507/</link><pubDate>Sat, 24 Sep 2016 16:10:18 +0000</pubDate><guid>https://111qqz.com/2016/09/hdu3507/</guid><description>
题目链接
题意：n个数，分成若干段，每段的代价为 Image not found a.warning-link { color: inherit !important; font-weight: inherit !important; text-decoration: underline !important; border-bottom: none !important; } Web path: /2016/09/hdu3507/http://acm.hdu.edu.cn/data/images/3507-1.jpg
Disk path: /content/post/ACM-ICPC/http://acm.hdu.edu.cn/data/images/3507-1.jpg
Using Page Bundles: true
，求最小代价。
思路：dp。
状态方程很显然个鬼。。。
dp[i] 表示处理完前面i个数的最小代价。
dp[0] = 0 ;
dp[i] = min(dp[j]+(sum[i]-sum[j])^2) ( 0&amp;lt;j &amp;lt;i),sum[i]为a[i]的前缀和。
这复杂度是n^2的。。。然而n最大5E5.....boom....
斜率优化登场！
这篇博客讲得非常好
我们假设k两边移项一下，得到：(dp[j]+num[j]^2-(dp[k]+num[k]^2))/(2*(num[j]-num[k]))&amp;lt;sum[i]。我们把dp[j]-num[j]^2看做是yj，把2*num[j]看成是xj。
那么不就是yj-yk/xj-xk&amp;lt;sum[i]么？ 左边是不是斜率的表示？
那么yj-yk/xj-xk&amp;lt;sum[i]说明了什么呢？ 我们前面是不是假设j的决策比k的决策要好才得到这个表示的？ 如果是的话，那么就说明g[j,k]=yj-jk/xj-xk&amp;lt;sum[i]代表这j的决策比k的决策要更优。
关键的来了：现在从左到右，还是设k&amp;lt;j&amp;lt;i，如果g[i,j]&amp;lt;g[j,k]，那么j点便永远不可能成为最优解，可以直接将它踢出我们的最优解集。为什么呢？
我们假设g[i,j]&amp;lt;sum[i]，那么就是说i点要比j点优，排除j点。
如果g[i,j]&amp;gt;=sum[i]，那么j点此时是比i点要更优，但是同时g[j,k]&amp;gt;g[i,j]&amp;gt;sum[i]。这说明还有k点会比j点更优，同样排除j点。
排除多余的点，这便是一种优化！
接下来看看如何找最优解。
设k&amp;lt;j&amp;lt;i。
由于我们排除了g[i,j]&amp;lt;g[j,k]的情况，所以整个有效点集呈现一种上凸性质，即k j的斜率要大于j i的斜率。
Image not found a.</description></item><item><title>斜率优化学习笔记</title><link>https://111qqz.com/2016/09/</link><pubDate>Sat, 24 Sep 2016 15:38:00 +0000</pubDate><guid>https://111qqz.com/2016/09/</guid><description>
浅谈数形结合思想在信息学竞赛中的应用
参考博客
这个东西英文好像叫做：convex hull trick
Convex_hull_trick_wiki codeforces convex hull trick
简单说说我的理解：斜率优化是一种数形结合的思想。。。
对于一个dp的若干状态。。。有些状态是不会对答案有贡献的。。。这些我们就可以不考虑。。。
简单地说。。。如果把状态的下标和状态对应成二维平面的点。。。
凸起来的点一定不会影响答案。。。
具体证明参考论文。。。。。
也就是维护一个&amp;quot;下凸折线&amp;quot;
具体维护的办法是用单调队列来维护。。。
感觉还是挺简单的。。。。</description></item></channel></rss>