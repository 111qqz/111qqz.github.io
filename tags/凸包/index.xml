<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>凸包 on 111qqz的小窝</title><link>https://111qqz.com/tags/%E5%87%B8%E5%8C%85/</link><description>Recent content in 凸包 on 111qqz的小窝</description><generator>Hugo -- gohugo.io</generator><language>en</language><copyright>Copyright © 2012-2022 all rights reserved.</copyright><lastBuildDate>Sun, 25 Sep 2016 16:10:49 +0000</lastBuildDate><atom:link href="https://111qqz.com/tags/%E5%87%B8%E5%8C%85/index.xml" rel="self" type="application/rss+xml"/><item><title>codeforces 455 E. Function (斜率优化，线段树套凸包)</title><link>https://111qqz.com/2016/09/cf455e/</link><pubDate>Sun, 25 Sep 2016 16:10:49 +0000</pubDate><guid>https://111qqz.com/2016/09/cf455e/</guid><description>
题目链接 题意：已知 f(1, j) = a[j] f[i][j] = min (f[i-1][j],f[i-1][j-1]) 然后给出 n n≤1E5​​ 个数（a[i] a​i​​≤1E4​​)，给出 m组查询（m&amp;lt;=1E5），每组两个数 x,y 问 f(x,y) 是多少。
参考题解：茶姐的回答（下标好像搞错了，领会意思即可
官方题解
以及前置技能点是：斜率优化+线段树
思路：考虑一排数a[1]到a[n]，原问题可以转化成从a[y]走x-1步，每一步原地不动或者向左移动一个格子后的总的代价。
Function is calculated as follows: , k__i — how many times we visited the i th element of the array a.
这个式子感觉不是很明确。。。。
窝来解释一下。。。l=y-x+1是可能走到的最左边的点。。。。
终点在【L,Y】区间内都是合法的。。。。
然后考虑代价最小的情况。。。
一定是在最小的格子上尽可能多得停留，在其他格子上只停留一次。。。
对于终点为l的情况，走到y要花费y-l步,一共要走x-1步，那么多出来x-1-(y-l)步，这些步停留在最小的点上是最优的，最小的点上之前停留了一次，现在再多停留x-1-(y-l)次，也就是停留了x-(y-l)次。
那么，另一个结论是，区间[l,y]中，当a[l]为最小的时候才是最优的。。。
为什么呢？
假设a[k] (k&amp;gt;l)是最小，那么以a[k]为终点的情况一定比以a[l]为终点的情况优秀（因为多走了【l,k-1】之间的点。。。走这些点比停留在a[k]的代价大）
因此对于l是终点的情况，一定在a[l]是最小值的时候是最优的。
此时代价为：
sum[y] - sum[l] + a[l]·(x - (y - l))
我们变形得到：
sum[y] - sum[l] + a[l]·(x - (y - l)) = sum[y] - sum[l] + a[l]·(x - y + l) = sum[y] - sum[l] + a[l]·l + a[l]·(x - y) = sum[y] + (a[l]·(x - y) + a[l]·l - sum[l])</description></item></channel></rss>