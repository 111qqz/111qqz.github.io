<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>qt on 111qqz的小窝</title><link>http://example.org/tags/qt/</link><description>Recent content in qt on 111qqz的小窝</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Sun, 04 Jun 2017 17:14:39 +0000</lastBuildDate><atom:link href="http://example.org/tags/qt/index.xml" rel="self" type="application/rss+xml"/><item><title>qt 5.x　初探　(5)　</title><link>http://example.org/2017/06/qt-5-notes-5/</link><pubDate>Sun, 04 Jun 2017 17:14:39 +0000</pubDate><guid>http://example.org/2017/06/qt-5-notes-5/</guid><description>qt_5.9_ui_doc
还是比直接写代码方便点。。。所以不妨学习一个！
以及。。。qt在2017年6月１号发布了5.9。。。所以之前是5.8。。。现在变成5.9了。。。
遇到了修改了ui文件却没有生效的问题。。。
解决办法：
到项目目录下去执行：uic mainwindow.ui &amp;gt; ui_mainwindow.h 时间测试的qt方法。。。
头文件#include &amp;lt;QTime&amp;gt; QTime time; time.start(); // do something qDebug()&amp;lt;&amp;lt;time.elapsed()&amp;lt;&amp;lt;&amp;quot;ms&amp;quot;; （注意单位。。。</description></item><item><title>qt 5.x初探　（４）　qt 在win下打包成exe</title><link>http://example.org/2017/06/qt-5-notes-4/</link><pubDate>Sun, 04 Jun 2017 12:54:51 +0000</pubDate><guid>http://example.org/2017/06/qt-5-notes-4/</guid><description>des的基本搞定了。。。打包。。。
在linux下打包成exe。。。。实在是。。没什么好办法的样子。。。
嘛。转念一想。老师说是打包成可执行文件。。。没说一定是exe啊。。。
然后也许我就零分了呢2333
des1.0
好了。。我又跑到windows下装了个qt&amp;hellip;安装包2.3G,记得要安装编译器&amp;hellip;
装好以后。。。开始打包。。。
注意区分：
Qt Widgets Application 和 Qt Quick Application
我的是后者。。。打包方式略有不同。。。
下面引用了详细步骤。。我来说下简略步骤好了。。。
* 将creator选到release的部署模式。。然后编译。。。 * 将exe文件单独拷贝出来，放到一个文件夹。。。 * **运行qt的命令行（不是系统的命令行！)** * **在qt的命令行中运行windeployqt helloqml.exe --qmldir C:\Qt\Qt5.4.0\5.4\mingw491_32\qml（其中qmldir后面换为qml的真实路径）** 顺便吐槽这工具有点智障。。。文件夹选项不显示后缀名就找不到helloqml　也是有毒。。。
集成开发环境 QtCreator 目前生成图形界面程序 exe 大致可以分为两类： Qt Widgets Application 和 Qt Quick Application。 下面分别介绍这两类exe 的发布方式。
1、Qt Widgets Application可执行程序发布方式 首先用 QtCreator 新建一个 Qt Widgets Application 项目，直接用默认的 QMainWindow 程序就可以了，项目名字假定是 hellomw。 然后以 Release 方式编译生成 exe 程序： 生成的程序运行正常之后，找到项目的生成目录，比如 项目源码路径： C:\QtPros\hellomw
它的项目生成目录是 C:\QtPros\build-hellomw-Desktop_Qt_5_4_0_MinGW_32bit-Release
进入这个文件夹，在进入它的子文件夹 release 里面，找到 hellomw.</description></item><item><title>qt 5.x初探 （3）</title><link>http://example.org/2017/05/qt-5-notes-3/</link><pubDate>Thu, 18 May 2017 12:47:20 +0000</pubDate><guid>http://example.org/2017/05/qt-5-notes-3/</guid><description>update3：
终于知道了正确的学习姿势&amp;hellip;
用百度把要用的东西大概描述出来，然后总能找到一个是你要的。。。
然后再去搜关键词。。。
嗯。。百度还是很有用的啊2333
qt5.8_doc_Line Edits Example
所以现在要把之前写成dialog的几个改回Line edit
update2:
老师说要把输入框中的东西随时选中复制出来check&amp;hellip;
QLabel默认好像不具有这种属性啊？
稍微查了下。。。
查到了一个叫setTextInteractionFlags的属性
以及连根拔出了。。
qt5.8 QGraphicsTextItem Class
找到了解决办法。。。
openFileNameLabel = new QLabel; openFileNameLabel-&amp;gt;setFrameStyle(frameStyle); openFileNameLabel-&amp;gt;setTextInteractionFlags(Qt::TextSelectableByMouse); //添加可选中可复制的交互属性。。。 记得要
#include &amp;lt;QGraphicsTextItem&amp;gt; update1:
扶起。。。QFile读中文路径文件毫无问题。。。
换成了cpp的 ifstream就一直报错。。。
由于我还改了其他部分。。。所以。。。
查了好久才发现是ifstream的锅。。。。
把des放了进去。。。
本来加密和解密想就用一个函数用参数调节的。。。
不过看了半天也没太懂。。。这种connnet怎么写。。。
不过对connect的理解更深了一些。。。
信号和槽果然是qt的精髓。。。看起来还算不那么无聊。。。
放一些关于信号和槽的资料好了。。。
信号与槽机制
ibm_qt的信号与槽机制
qt的信号槽
然后目前的进度是。。。
des放了进去。。。加密基本没啥问题。。。
但是有个小问题。。。
对于加密过程。。。我是用了一个全局的QString QTextSt来传递信息。。。
对于打开文件。。。过程是file-&amp;gt;QString
加密后得到密文文件。。过程是QString -&amp;gt; file
但是解密过程。。。。完全反过来了啊。。。？
在思考怎么写在一起能够不违和。。。。。</description></item><item><title>qt 5.x 学习笔记　(2)</title><link>http://example.org/2017/05/qt-5-notes-2/</link><pubDate>Tue, 16 May 2017 03:14:19 +0000</pubDate><guid>http://example.org/2017/05/qt-5-notes-2/</guid><description>先来放一波过程中用到的资料和官方文档好了。
basic layout_qt5.8
QBoxLayout Class_qt5.8
QString Class 5.8
QChar Class qt 5.8
Standard Dialogs Example qt 5.8
更新的部分还是放在最前面好了。。。
convert from QString to char *的时候有个坑。。。
举个栗子。。。。
int main(int argc, char **argv) { QApplication app(argc, argv); QString str1 = &amp;quot;Test&amp;quot;; QByteArray ba = str1.toLatin1(); const char *c_str2 = ba.data(); printf(&amp;quot;str2: %s&amp;quot;, c_str2); return app.exec(); } 目前基本框架出来了。。。
可以打开一个文件。。加密。。保存。。。
加密算法部分暂时用倒序输出代替。。。
界面布局还没搞。。。一些提示之类的还没搞。。。。。。。。
接下来要做的。。。大概就是把des写进去了。。。
放一波代码好了。。。
/**************************************************************************** ** ** Copyright (C) 2016 The Qt Company Ltd. ** Contact: https://www.</description></item><item><title>qt 5.x　初探(1)</title><link>http://example.org/2017/05/qt-5-notes-1/</link><pubDate>Sun, 14 May 2017 12:21:56 +0000</pubDate><guid>http://example.org/2017/05/qt-5-notes-1/</guid><description>嘛。。为了系统安全课来学一波qt&amp;hellip;
现在算是写出了一个可以打开文件，保存文件的记事本。。。
接下来要搞定的事情是。。。如何写一个自定义的事件。。。比如计算个开方之类的。。。
放一波代码好了。。。
#include &amp;lt;QAction&amp;gt; #include &amp;lt;QMenuBar&amp;gt; #include &amp;lt;QMessageBox&amp;gt; #include &amp;lt;QStatusBar&amp;gt; #include &amp;lt;QToolBar&amp;gt; #include &amp;lt;QDebug&amp;gt; #include &amp;lt;QTextEdit&amp;gt; #include &amp;lt;QFileDialog&amp;gt; #include &amp;quot;mainwindow.h&amp;quot; MainWindow::MainWindow(QWidget *parent) : QMainWindow(parent) { openAction = new QAction(QIcon(&amp;quot;:/images/file-open&amp;quot;), tr(&amp;quot;&amp;amp;Open...&amp;quot;), this); openAction-&amp;gt;setShortcuts(QKeySequence::Open); openAction-&amp;gt;setStatusTip(tr(&amp;quot;Open an existing file&amp;quot;)); saveAction = new QAction(QIcon(&amp;quot;:/images/file-open&amp;quot;), tr(&amp;quot;&amp;amp;Save...&amp;quot;), this); saveAction-&amp;gt;setShortcuts(QKeySequence::Save); saveAction-&amp;gt;setStatusTip(tr(&amp;quot;Save a new file&amp;quot;)); QMenu *file = menuBar()-&amp;gt;addMenu(tr(&amp;quot;&amp;amp;File&amp;quot;)); file-&amp;gt;addAction(openAction); file-&amp;gt;addAction(saveAction); QToolBar *toolBar = addToolBar(tr(&amp;quot;&amp;amp;File&amp;quot;)); toolBar-&amp;gt;addAction(openAction); toolBar-&amp;gt;addAction(saveAction); textEdit = new QTextEdit(this); setCentralWidget(textEdit); connect(openAction, &amp;amp;QAction::triggered, this, &amp;amp;MainWindow::openFile); connect(saveAction, &amp;amp;QAction::triggered, this, &amp;amp;MainWindow::saveFile); } MainWindow::~MainWindow() { } void MainWindow::openFile() { QString path = QFileDialog::getOpenFileName(this, tr(&amp;quot;Open File&amp;quot;), &amp;quot;.</description></item></channel></rss>