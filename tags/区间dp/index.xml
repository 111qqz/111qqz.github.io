<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>区间dp on Clarity</title><link>https://111qqz.com/tags/%E5%8C%BA%E9%97%B4dp/</link><description>Recent content in 区间dp on Clarity</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><copyright>Copyright © 2008–2018, Steve Francia and the Hugo Authors; all rights reserved.</copyright><lastBuildDate>Sat, 12 Nov 2016 12:39:25 +0000</lastBuildDate><atom:link href="https://111qqz.com/tags/%E5%8C%BA%E9%97%B4dp/index.xml" rel="self" type="application/rss+xml"/><item><title>[dp专题000]uva 10328 Coin Toss (java 大数+dp)（Unsolved）</title><link>https://111qqz.com/2016/11/uva10328/</link><pubDate>Sat, 12 Nov 2016 12:39:25 +0000</pubDate><guid>https://111qqz.com/2016/11/uva10328/</guid><description>
题目链接
题意：问长度为n，每个位置由且仅有‘H’和'T'组成的序列中，至少有连续k个‘H’出现的方案数。
思路：不会做，参考了题解 不过没有完全搞懂。
根据题解，正面考虑比较麻烦，所以反面考虑。[j]
dp[i][j]表示长度为i，前面最后连续的‘H’的个数不超过j个的方案数。
考虑转移方程为：
总的情况为：dp[i][j] = dp[i-1][j] * 2;
但是其中有多考虑的情况，就是第i位是'H'，且i位之前的最后j个位置都是'H'（即从i-j位到第i-1位都是‘H’，此时第i-j-1位必然是'T'）
有i个硬币时，如果i 如果i &amp;gt; j + 1，dp[ i ] [ j ] = dp [ i - 1 ] [ j ] * 2 - x（不满足条件的部分）
然后我们来考虑这个x怎么求，既然是不满足条件，那么肯定是第i的位置放了H，前面的都是H，从而这些连续的H大于j。那么就考虑dp[ i - 1 - j - 1 ]（中间这 j - 1 个（kk:疑似作者笔误。应该位j个）全为H，加上第i个H，就不满足条件了），所以：
dp [ i ] [ j ] = dp [ i - 1 ] [ j ] * 2 - dp [ i - j - 2 ] [ j ]（kk:仍然不是很懂这个式子.</description></item><item><title>hdu 3507 Print Article (斜率优化dp)</title><link>https://111qqz.com/2016/09/hdu3507/</link><pubDate>Sat, 24 Sep 2016 16:10:18 +0000</pubDate><guid>https://111qqz.com/2016/09/hdu3507/</guid><description>
题目链接
题意：n个数，分成若干段，每段的代价为 Image not found a.warning-link { color: inherit !important; font-weight: inherit !important; text-decoration: underline !important; border-bottom: none !important; } Web path: http://acm.hdu.edu.cn/data/images/3507-1.jpg
Disk path: /static/http://acm.hdu.edu.cn/data/images/3507-1.jpg
Using Page Bundles: false
，求最小代价。
思路：dp。
状态方程很显然个鬼。。。
dp[i] 表示处理完前面i个数的最小代价。
dp[0] = 0 ;
dp[i] = min(dp[j]+(sum[i]-sum[j])^2) ( 0&amp;lt;j &amp;lt;i),sum[i]为a[i]的前缀和。
这复杂度是n^2的。。。然而n最大5E5.....boom....
斜率优化登场！
这篇博客讲得非常好
我们假设k两边移项一下，得到：(dp[j]+num[j]^2-(dp[k]+num[k]^2))/(2*(num[j]-num[k]))&amp;lt;sum[i]。我们把dp[j]-num[j]^2看做是yj，把2*num[j]看成是xj。
那么不就是yj-yk/xj-xk&amp;lt;sum[i]么？ 左边是不是斜率的表示？
那么yj-yk/xj-xk&amp;lt;sum[i]说明了什么呢？ 我们前面是不是假设j的决策比k的决策要好才得到这个表示的？ 如果是的话，那么就说明g[j,k]=yj-jk/xj-xk&amp;lt;sum[i]代表这j的决策比k的决策要更优。
关键的来了：现在从左到右，还是设k&amp;lt;j&amp;lt;i，如果g[i,j]&amp;lt;g[j,k]，那么j点便永远不可能成为最优解，可以直接将它踢出我们的最优解集。为什么呢？
我们假设g[i,j]&amp;lt;sum[i]，那么就是说i点要比j点优，排除j点。
如果g[i,j]&amp;gt;=sum[i]，那么j点此时是比i点要更优，但是同时g[j,k]&amp;gt;g[i,j]&amp;gt;sum[i]。这说明还有k点会比j点更优，同样排除j点。
排除多余的点，这便是一种优化！
接下来看看如何找最优解。
设k&amp;lt;j&amp;lt;i。
由于我们排除了g[i,j]&amp;lt;g[j,k]的情况，所以整个有效点集呈现一种上凸性质，即k j的斜率要大于j i的斜率。
Image not found a.</description></item><item><title>hdu 4283 You Are the One (区间dp)</title><link>https://111qqz.com/2016/07/hdu-4283/</link><pubDate>Tue, 26 Jul 2016 07:38:44 +0000</pubDate><guid>https://111qqz.com/2016/07/hdu-4283/</guid><description>
hdu 4283题目链接
题意：有N个人按顺序排成一排上台表演，每个都有一个num[]值，若在他是第k个上场的人，则会有num[]*(k-1)的unhappiness。台下有一个黑屋（stack），对每一个人，可以选择让他先进屋子或者直接上台。现在让你找到一个最优方案使得所有人的unhappiness之和最小。
思路：
我想对了的： 无。状态设计就错了。。。转移方程也就不可能对。。。
错的一塌糊涂。。。嗯。。基础题。。完全不会2333
参考题解：参考博客1 参考博客2
/* *********************************************** Author :111qqz Created Time :2016年07月26日 星期二 15时03分41秒 File Name :code/hdu/4283.cpp ************************************************ */ #include &amp;lt;cstdio&amp;gt; #include &amp;lt;cstring&amp;gt; #include &amp;lt;iostream&amp;gt; #include &amp;lt;algorithm&amp;gt; #include &amp;lt;vector&amp;gt; #include &amp;lt;queue&amp;gt; #include &amp;lt;set&amp;gt; #include &amp;lt;map&amp;gt; #include &amp;lt;string&amp;gt; #include &amp;lt;cmath&amp;gt; #include &amp;lt;cstdlib&amp;gt; #include &amp;lt;ctime&amp;gt; #define fst first #define sec second #define lson l,m,rt&amp;lt;&amp;lt;1 #define rson m+1,r,rt&amp;lt;&amp;lt;1|1 #define ms(a,x) memset(a,x,sizeof(a)) typedef long long LL; #define pi pair &amp;lt; int ,int &amp;gt; #define MP make_pair using namespace std; const double eps = 1E-8; const int dx4[4]={1,0,0,-1}; const int dy4[4]={0,-1,1,0}; const int inf = 0x3f3f3f3f; const int N=105; int n; int a[N]; int sum[N]; int dp[N][N]; int main() { #ifndef ONLINE_JUDGE freopen(&amp;quot;code/in.</description></item><item><title>poj 3661 Running (区间dp)</title><link>https://111qqz.com/2016/07/poj-3661-running-dp/</link><pubDate>Mon, 25 Jul 2016 16:51:22 +0000</pubDate><guid>https://111qqz.com/2016/07/poj-3661-running-dp/</guid><description>
poj 3661题目链接
题意：锻炼，一共n分钟，每分钟可以选择跑步或者休息，第i分钟跑步可以跑d[i]米，并增加一点疲劳度，如果选择休息，那么每分钟减少1点疲劳值。一旦开始休息，必须休息到疲劳值为0才能再次开始跑步。疲劳值不能超过m.第n分钟的时候疲劳值必须为0，否则之后会感觉身体被掏空。问n分钟最远多多远。
思路：
我能想到的： * dp[i][j]表示第i分钟疲劳度为j的时候能跑的最远距离 * 初始化dp为0. * 最后的答案为dp[n][0] * 如果第i分钟跑步，转移方程为dp[i][j] = max(dp[i][j],dp[i-1][j-1]+d[i]); 我想错了的： * 休息的时候的转移方程应该是第i天刚好**休息好**时：dp[i][0]=max(dp[i-j][j],dp[i][0]) 而不是**开始休息**时 * 由于是第i天休息好时的状态，那么开始休息的时间是固定的（第i-j天），只进行一个转移，而不会影响中间的那些天 我想的不够好的： * 考虑到了可能最后几天为了疲劳度为0干脆就不跑，我的做法是取了所有的dp[i][0]的最大值。但是更好的做法似乎是dp[i][0] = dp[i-1][0]转移一下。 参考博客：参考博客
参考题解：
分析：先设dp[i][j]表示小明在i分钟，疲劳值为j时所能走的最远距离。 a)、先看dp[i][0]的情况，表示第i分钟时，疲劳值为0，考虑这个值由哪些情况得到，1、dp[i][0] = dp[i-1][0]，这个没有任何问题。2、dp[i][0] = dp[i-j][j]。表示i-j分钟时的疲劳值为j，然后一直休息j分钟把疲劳值降成0。
b)、现在考虑dp[i][j]的情况，它可以由dp[i-1][j-1] + Di得到，表示第i分钟选择走Di。因为要保证没有后效性，所以只有这一种情况可以转移。
/* *********************************************** Author :111qqz Created Time :2016年07月25日 星期一 23时42分26秒 File Name :code/poj/3661.cpp ************************************************ */ #include &amp;lt;cstdio&amp;gt; #include &amp;lt;cstring&amp;gt; #include &amp;lt;iostream&amp;gt; #include &amp;lt;algorithm&amp;gt; #include &amp;lt;vector&amp;gt; #include &amp;lt;queue&amp;gt; #include &amp;lt;set&amp;gt; #include &amp;lt;map&amp;gt; #include &amp;lt;string&amp;gt; #include &amp;lt;cmath&amp;gt; #include &amp;lt;cstdlib&amp;gt; #include &amp;lt;ctime&amp;gt; #define fst first #define sec second #define lson l,m,rt&amp;lt;&amp;lt;1 #define rson m+1,r,rt&amp;lt;&amp;lt;1|1 #define ms(a,x) memset(a,x,sizeof(a)) typedef long long LL; #define pi pair &amp;lt; int ,int &amp;gt; #define MP make_pair using namespace std; const double eps = 1E-8; const int dx4[4]={1,0,0,-1}; const int dy4[4]={0,-1,1,0}; const int inf = 0x3f3f3f3f; const int N=2E4+7; const int M=505; int n; int m; int d[N]; int dp[N][M]; int main() { #ifndef ONLINE_JUDGE freopen(&amp;quot;code/in.</description></item><item><title>poj 1651 Multiplication Puzzle (区间dp)</title><link>https://111qqz.com/2016/07/poj-1651/</link><pubDate>Mon, 25 Jul 2016 15:09:40 +0000</pubDate><guid>https://111qqz.com/2016/07/poj-1651/</guid><description>
poj 1651题目链接
题意：n个数，删掉a[i]的得分是a[i]*a[i-1]*a[i+1]，两个端点的不允许删。问删完n-2个数得到的最小分数是多少。
思路：能想到设计状态dp[i][j]表示区间[i,j]的最小分数。然后就没思路了。 T T
参考了几篇题解，思路大概是，枚举最后剩下的那个数。
**对于一个区间(l, r),如果最后删除的是k位置的数的话，将得到a[l]*a[k]*a[r]分，而要得到这个情况的前提是吧区间(l, k) 和(k, r)的中间数字删掉所以的转移方程是** **DP(l, r) = DP(l, k) + DP(k, r) + a[l]*a[k]*a[r];**
以及。。。初始化又想错了。。。
要注意。。初始化可能没办法一次完成。。。这道题的初始化就是分情况的。。。
对于区间长度不够的。。初始化为0.。
区间长度为3的。。初始化为a[i]*a[i+1]*a[i+2]。。
其他的初始化为正无穷。。
/* *********************************************** Author :111qqz Created Time :2016年07月25日 星期一 22时44分55秒 File Name :code/poj/1651.cpp ************************************************ */ #include &amp;lt;cstdio&amp;gt; #include &amp;lt;cstring&amp;gt; #include &amp;lt;iostream&amp;gt; #include &amp;lt;algorithm&amp;gt; #include &amp;lt;vector&amp;gt; #include &amp;lt;queue&amp;gt; #include &amp;lt;set&amp;gt; #include &amp;lt;map&amp;gt; #include &amp;lt;string&amp;gt; #include &amp;lt;cmath&amp;gt; #include &amp;lt;cstdlib&amp;gt; #include &amp;lt;ctime&amp;gt; #define fst first #define sec second #define lson l,m,rt&amp;lt;&amp;lt;1 #define rson m+1,r,rt&amp;lt;&amp;lt;1|1 #define ms(a,x) memset(a,x,sizeof(a)) typedef long long LL; #define pi pair &amp;lt; int ,int &amp;gt; #define MP make_pair using namespace std; const double eps = 1E-8; const int dx4[4]={1,0,0,-1}; const int dy4[4]={0,-1,1,0}; const int inf = 0x3f3f3f3f; const int N=105; int n; int a[N]; int dp[N][N]; int main() { #ifndef ONLINE_JUDGE freopen(&amp;quot;code/in.</description></item><item><title>poj 3280 Cheapest Palindrome (区间dp)</title><link>https://111qqz.com/2016/07/poj-3280/</link><pubDate>Mon, 25 Jul 2016 13:26:14 +0000</pubDate><guid>https://111qqz.com/2016/07/poj-3280/</guid><description>
poj 3280 题目链接
题意：一个字符串，给出添加一个字符或者删掉该字符的花费，问最小的话费使得字符串变成回文串。
思路：dp[i][j]表示区间[i,j]的字符串变成回文的最小花费。。。
这个可以想到。。dp[i][j] = dp[i+1][j-1] (a[i]==a[j])这个也可以想到。。。
增加和删除是等价的，所以取小的那个代价就行。。这个我也想到了。。
然后转移的地方没有特别明白。。。
和之前的找到一个划分的点k不同的是。。。
如果不等于。。
那么
, dp[i][j] = min(dp[i][j],dp[i+1][j]+cost[a[i]]); dp[i][j] = min(dp[i][j],dp[i][j-1]+cost[a[j]]); 这个方程可以理解。。。但是感觉自己想不出来 QAQ
以及。。我初始化写错了。。。
以为是求 最小值就初始化成了0x3f...
但是这样是错的。。。
具体见代码注释。。。
/* *********************************************** Author :111qqz Created Time :2016年07月25日 星期一 19时42分19秒 File Name :code/poj/3280.cpp ************************************************ */ #include &amp;lt;cstdio&amp;gt; #include &amp;lt;cstring&amp;gt; #include &amp;lt;iostream&amp;gt; #include &amp;lt;algorithm&amp;gt; #include &amp;lt;vector&amp;gt; #include &amp;lt;queue&amp;gt; #include &amp;lt;set&amp;gt; #include &amp;lt;map&amp;gt; #include &amp;lt;string&amp;gt; #include &amp;lt;cmath&amp;gt; #include &amp;lt;cstdlib&amp;gt; #include &amp;lt;ctime&amp;gt; #define fst first #define sec second #define lson l,m,rt&amp;lt;&amp;lt;1 #define rson m+1,r,rt&amp;lt;&amp;lt;1|1 #define ms(a,x) memset(a,x,sizeof(a)) typedef long long LL; #define pi pair &amp;lt; int ,int &amp;gt; #define MP make_pair using namespace std; const double eps = 1E-8; const int dx4[4]={1,0,0,-1}; const int dy4[4]={0,-1,1,0}; const int inf = 0x3f3f3f3f; const int N=2E3+7; char s[N]; int dp[N][N]; int n,len; int cost[N]; int a[N]; int main() { #ifndef ONLINE_JUDGE freopen(&amp;quot;code/in.</description></item><item><title>light oj 1422 - Halloween Costumes (区间dp)</title><link>https://111qqz.com/2016/07/light-oj-1422-halloween-costumes-dp/</link><pubDate>Mon, 25 Jul 2016 11:24:27 +0000</pubDate><guid>https://111qqz.com/2016/07/light-oj-1422-halloween-costumes-dp/</guid><description>
light oj 1422 题目链接
题意：
按顺序去参加舞会。每个舞会对衣服都有要求。可以连续穿好多件衣服。需要时候就脱下来，但是一旦脱下来，这件衣服就报废了。问最少需要几件衣服。
思路：没有思路。我连这题是dp都看不出来。。知道是dp也一点思路都没。。虽然这道题是道区间dp的入门题。。。但是不怕被鄙视。。我一点也没思路。。
参考了10多篇题解。。。终于懂了一点。。
参考博客1 参考博客2 参考博客3 参考博客4
**当a[i]和a[j]相等的时候 dp[i][j]=dp[i][j-1] 嗯，就这一个转移。然后就是区间dp的固定写法了。** 这句话让我恍然大悟。。。难道。。都是套路？
dp[i][j]表示的是[i,j]之间最少需要的衣服数量。
初始化dp[i][i] = 1，表示每天都换一件新衣服，显然不优。
a[i]==a[j]时，dp[i][j] = dp[i][j-1] ，表示第j天不用新换衣服，
然后枚举划分区间的点k,分成[i,k]和[k+1,j]两部分，取所有情况中最好的（这大概就是区间dp的套路？）
/* *********************************************** Author :111qqz Created Time :2016年07月25日 星期一 18时49分07秒 File Name :code/loj/1422.cpp ************************************************ */ #include &amp;lt;cstdio&amp;gt; #include &amp;lt;cstring&amp;gt; #include &amp;lt;iostream&amp;gt; #include &amp;lt;algorithm&amp;gt; #include &amp;lt;vector&amp;gt; #include &amp;lt;queue&amp;gt; #include &amp;lt;set&amp;gt; #include &amp;lt;map&amp;gt; #include &amp;lt;string&amp;gt; #include &amp;lt;cmath&amp;gt; #include &amp;lt;cstdlib&amp;gt; #include &amp;lt;ctime&amp;gt; #define fst first #define sec second #define lson l,m,rt&amp;lt;&amp;lt;1 #define rson m+1,r,rt&amp;lt;&amp;lt;1|1 #define ms(a,x) memset(a,x,sizeof(a)) typedef long long LL; #define pi pair &amp;lt; int ,int &amp;gt; #define MP make_pair using namespace std; const double eps = 1E-8; const int dx4[4]={1,0,0,-1}; const int dy4[4]={0,-1,1,0}; const int inf = 0x3f3f3f3f; const int N=105; int dp[N][N]; int a[N]; int n; int main() { #ifndef ONLINE_JUDGE freopen(&amp;quot;code/in.</description></item><item><title>poj 1141 Brackets Sequence (区间dp,括号匹配，记录路径)</title><link>https://111qqz.com/2016/07/poj-1141/</link><pubDate>Mon, 25 Jul 2016 08:29:03 +0000</pubDate><guid>https://111qqz.com/2016/07/poj-1141/</guid><description>
poj 1141题目链接
题意：给出一个括号序列，要求添加最少的括号，使得这个序列变成合法的括号匹配，输出最后的序列。
思路：区间dp。。。有了那么一点思路。。。我们可以用dp[i][j]表示区间[i,j]的序列最少需要添加几个符号使得匹配。。转移的话。。。和之前差不多。。dp[i][j] = dp[i+1][j-1] (s[i]与s[j])匹配。。。不匹配的话也是找中间某个点。。。初始化的话。。要变成最大值。。。比较没思路的是输出括号序列这部分。。。
参考了这篇题解：参考题解
记录路径的思路是。。。记录转移的点。。。
cut[i][j]表示的是区间[i,j]的最优值是由点cut[i][j]这里划分得到的。。。
cut[i][j]为-1表示区间[i,j]的最优值不是从中间分成两部分得到。。。
打印路径的时候。。。如果[i,j]的长度小于等于0.。直接return.
如果长度为1.。。直接输出。。。
如果长度大于1.。。。要分这段区间是否中间有划分两种情况。。具体见代码。。。
/* *********************************************** Author :111qqz Created Time :2016年07月25日 星期一 15时55分47秒 File Name :code/poj/1141.cpp ************************************************ */ #include &amp;lt;cstdio&amp;gt; #include &amp;lt;cstring&amp;gt; #include &amp;lt;iostream&amp;gt; #include &amp;lt;algorithm&amp;gt; #include &amp;lt;vector&amp;gt; #include &amp;lt;queue&amp;gt; #include &amp;lt;set&amp;gt; #include &amp;lt;map&amp;gt; #include &amp;lt;string&amp;gt; #include &amp;lt;cmath&amp;gt; #include &amp;lt;cstdlib&amp;gt; #include &amp;lt;ctime&amp;gt; #define fst first #define sec second #define lson l,m,rt&amp;lt;&amp;lt;1 #define rson m+1,r,rt&amp;lt;&amp;lt;1|1 #define ms(a,x) memset(a,x,sizeof(a)) typedef long long LL; #define pi pair &amp;lt; int ,int &amp;gt; #define MP make_pair using namespace std; const double eps = 1E-8; const int dx4[4]={1,0,0,-1}; const int dy4[4]={0,-1,1,0}; const int inf = 0x3f3f3f3f; char s[105]; int dp[105][105]; //dp[i][j]表示区间[i,j]最少需要添加多少字符达到匹配。 int cut[105][105] ; //记录一段区间是在哪里断开最优，是为了记录路径，打印括号 bool check(char a,char b) { if (a=='['&amp;amp;&amp;amp;b==']') return true; if (a=='('&amp;amp;&amp;amp;b==')') return true; return false; } void print(int i ,int j) { if (i&amp;gt;j) return ; if (i==j) { if (s[i]=='('||s[i]==')') printf(&amp;quot;()&amp;quot;); if (s[i]=='['||s[i]==']') printf(&amp;quot;[]&amp;quot;); return ; } if (cut[i][j]==-1) { printf(&amp;quot;%c&amp;quot;,s[i]); print(i+1,j-1); printf(&amp;quot;%c&amp;quot;,s[j]); } else { print(i,cut[i][j]); print(cut[i][j]+1,j); } } int main() { #ifndef ONLINE_JUDGE freopen(&amp;quot;code/in.</description></item><item><title>poj 2955 Brackets（区间dp....括号匹配。。。人生第一道区间dp）</title><link>https://111qqz.com/2016/07/poj2955/</link><pubDate>Mon, 25 Jul 2016 07:46:23 +0000</pubDate><guid>https://111qqz.com/2016/07/poj2955/</guid><description>
poj2955题目链接
题意：给出若干括号，问最大匹配数是多少。
思路：没有思路。我知道这是dp。。。然后其他就什么都不知道了。。。转移方程？ 完全没思路。。知道了转移方程。。。。嗯，还是不会。。。边界怎么写？状态怎么推？循环顺序? 循环次序？我一点思路都没有。。。。。
人生中第一道区间dp(这话我都说了不知道多少次了。。。每次都学不会。。。。sad)
我的dp水平和其他部分的水平还真是不匹配。。。
看了题解。。。自己写（抄）了一遍。。还是觉得好玄学。。。
细节见代码。
/* *********************************************** Author :111qqz Created Time :2016年07月25日 星期一 15时12分28秒 File Name :code/poj/2955.cpp ************************************************ */ #include &amp;lt;cstdio&amp;gt; #include &amp;lt;cstring&amp;gt; #include &amp;lt;iostream&amp;gt; #include &amp;lt;algorithm&amp;gt; #include &amp;lt;vector&amp;gt; #include &amp;lt;queue&amp;gt; #include &amp;lt;set&amp;gt; #include &amp;lt;map&amp;gt; #include &amp;lt;string&amp;gt; #include &amp;lt;cmath&amp;gt; #include &amp;lt;cstdlib&amp;gt; #include &amp;lt;ctime&amp;gt; #define fst first #define sec second #define lson l,m,rt&amp;lt;&amp;lt;1 #define rson m+1,r,rt&amp;lt;&amp;lt;1|1 #define ms(a,x) memset(a,x,sizeof(a)) typedef long long LL; #define pi pair &amp;lt; int ,int &amp;gt; #define MP make_pair using namespace std; const double eps = 1E-8; const int dx4[4]={1,0,0,-1}; const int dy4[4]={0,-1,1,0}; const int inf = 0x3f3f3f3f; const int N=105; char st[N]; int dp[N][N]; bool check(char a,char b) { //cout&amp;lt;&amp;lt;&amp;quot;a:&amp;quot;&amp;lt;&amp;lt;a&amp;lt;&amp;lt;&amp;quot; b:&amp;quot;&amp;lt;&amp;lt;b&amp;lt;&amp;lt;endl; if((a=='['&amp;amp;&amp;amp;b==']')||(a=='('&amp;amp;&amp;amp;b==')')) return true; return false; } int main() { #ifndef ONLINE_JUDGE freopen(&amp;quot;code/in.</description></item><item><title>BZOJ 1652: [Usaco2006 Feb]Treats for the Cows (区间dp)</title><link>https://111qqz.com/2016/04/bzoj-1652/</link><pubDate>Tue, 12 Apr 2016 02:37:28 +0000</pubDate><guid>https://111qqz.com/2016/04/bzoj-1652/</guid><description>
1652: [Usaco2006 Feb]Treats for the Cows Time Limit: 5 Sec Memory Limit: 64 MB Submit: 290 Solved: 226 [Submit][Status][Discuss]
Description FJ has purchased N (1 &amp;lt;= N &amp;lt;= 2000) yummy treats for the cows who get money for giving vast amounts of milk. FJ sells one treat per day and wants to maximize the money he receives over a given period time. The treats are interesting for many reasons: * The treats are numbered 1.</description></item><item><title>hdu 1160 FatMouse's Speed (最长上升子序列)</title><link>https://111qqz.com/2015/04/hdu1160/</link><pubDate>Mon, 06 Apr 2015 16:36:00 +0000</pubDate><guid>https://111qqz.com/2015/04/hdu1160/</guid><description>
FatMouse's Speed Time Limit: 2000/1000 MS (Java/Others) Memory Limit: 65536/32768 K (Java/Others)
Total Submission(s): 10172 Accepted Submission(s): 4521
Special Judge
Problem Description
FatMouse believes that the fatter a mouse is, the faster it runs. To disprove this, you want to take the data on a collection of mice and put as large a subset of this data as possible into a sequence so that the weights are increasing, but the speeds are decreasing.</description></item><item><title>hdu 1114 - Piggy-Bank (完全背包)</title><link>https://111qqz.com/2015/04/hdu1114/</link><pubDate>Sun, 05 Apr 2015 15:14:00 +0000</pubDate><guid>https://111qqz.com/2015/04/hdu1114/</guid><description>
F - Piggy-Bank
**Time Limit:**1000MS **Memory Limit:**32768KB 64bit IO Format:%I64d &amp;amp; %I64u
Submit Status
Description
Before ACM can do anything, a budget must be prepared and the necessary financial support obtained. The main income for this action comes from Irreversibly Bound Money (IBM). The idea behind is simple. Whenever some ACM member has any small money, he takes all the coins and throws them into a piggy-bank. You know that this process is irreversible, the coins cannot be removed without breaking the pig.</description></item><item><title>hdu 1087 - Super Jumping! Jumping! Jumping! (最长上升子序列)</title><link>https://111qqz.com/2015/04/hdu1087/</link><pubDate>Sun, 05 Apr 2015 14:12:00 +0000</pubDate><guid>https://111qqz.com/2015/04/hdu1087/</guid><description>
E - Super Jumping! Jumping! Jumping!
**Time Limit:**1000MS **Memory Limit:**32768KB 64bit IO Format:%I64d &amp;amp; %I64u
Submit Status
Description
Nowadays, a kind of chess game called &amp;quot;Super Jumping! Jumping! Jumping!&amp;quot; is very popular in HDU. Maybe you are a good boy, and know little about this game, so I introduce it to you now.
Image not found a.warning-link { color: inherit !important; font-weight: inherit !important; text-decoration: underline !important; border-bottom: none !</description></item></channel></rss>