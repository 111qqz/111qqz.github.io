<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>kd-tree on 111qqz的小窝</title><link>https://111qqz.com/tags/kd-tree/</link><description>Recent content in kd-tree on 111qqz的小窝</description><generator>Hugo -- gohugo.io</generator><language>en</language><copyright>Copyright © 2012-2022 all rights reserved.</copyright><lastBuildDate>Tue, 10 Oct 2017 06:58:32 +0000</lastBuildDate><atom:link href="https://111qqz.com/tags/kd-tree/index.xml" rel="self" type="application/rss+xml"/><item><title>BZOJ 2648: SJY摆棋子 (动态kd-tree,插入，曼哈顿距离,输入挂)</title><link>https://111qqz.com/2017/10/bzoj2648/</link><pubDate>Tue, 10 Oct 2017 06:58:32 +0000</pubDate><guid>https://111qqz.com/2017/10/bzoj2648/</guid><description>
Description 这天，SJY显得无聊。在家自己玩。在一个棋盘上，有N个黑色棋子。他每次要么放到棋盘上一个黑色棋子，要么放上一个白色棋子，如果是白色棋子，他会找出距离这个白色棋子最近的黑色棋子。此处的距离是 曼哈顿距离 即(|x1-x2|+|y1-y2|) 。现在给出N&amp;lt;=500000个初始棋子。和M&amp;lt;=500000个操作。对于每个白色棋子，输出距离这个白色棋子最近的黑色棋子的距离。同一个格子可能有多个棋子。
Input 第一行两个数 N M
以后M行，每行3个数 t x y
如果t=1 那么放下一个黑色棋子
如果t=2 那么放下一个白色棋子
Output 对于每个T=2 输出一个最小距离
Sample Input 2 3 1 1 2 3 2 1 2 1 3 3 2 4 2
Sample Output 1 2
其实就是BZOJ2716 的双倍经验题
写出来是因为，这道题要加输入挂才可以过orz
/* *********************************************** Author :111qqz Created Time :2017年10月10日 星期二 13时35分26秒 File Name :2716.cpp ************************************************ */ #include &amp;lt;cstdio&amp;gt; #include &amp;lt;cstring&amp;gt; #include &amp;lt;iostream&amp;gt; #include &amp;lt;algorithm&amp;gt; #include &amp;lt;vector&amp;gt; #include &amp;lt;queue&amp;gt; #include &amp;lt;set&amp;gt; #include &amp;lt;map&amp;gt; #include &amp;lt;string&amp;gt; #include &amp;lt;cmath&amp;gt; #include &amp;lt;cstdlib&amp;gt; #include &amp;lt;ctime&amp;gt; #define PB push_back #define fst first #define sec second #define lson l,m,rt&amp;lt;&amp;lt;1 #define rson m+1,r,rt&amp;lt;&amp;lt;1|1 #define ms(a,x) memset(a,x,sizeof(a)) typedef long long LL; #define pi pair &amp;lt; int ,int &amp;gt; #define MP make_pair using namespace std; const double eps = 1E-8; const int dx4[4]={1,0,0,-1}; const int dy4[4]={0,-1,1,0}; const int inf = 0x3f3f3f3f; const LL linf = 1LL&amp;lt;&amp;lt;60; const int N=5E5+7; int n,m; int idx,rt; LL ans; LL getLL() { LL k = 0, fh = 1; char c = getchar(); for(; c &amp;lt; '0' || c &amp;gt; '9'; c = getchar()) if (c == '-') fh = -1; for(; c &amp;gt;= '0' &amp;amp;&amp;amp; c &amp;lt;= '9'; c = getchar()) k = k * 10 + c - '0'; return k * fh; } struct KDT { LL coor[2]; LL mn[2],mx[2]; //需要维护四个方向的最值，是因为是曼哈顿距离。 int son[2]; bool operator &amp;lt; (const KDT &amp;amp;u)const{ return coor[idx]&amp;lt;u.</description></item><item><title>BZOJ 2716: [Violet 3]天使玩偶 (动态kd-tree,带插入，曼哈顿距离模板题)</title><link>https://111qqz.com/2017/10/bzoj2716/</link><pubDate>Tue, 10 Oct 2017 06:49:55 +0000</pubDate><guid>https://111qqz.com/2017/10/bzoj2716/</guid><description>
题目链接 Description Input Output 样例太长了，就不写了。
题意是说，现在有n个在二维平面，m个操作，2种类型，一种是加入一个点，另一种是对于一个定点，询问距离其最近的点的距离。
动态kd-tree的模板题，带插入操作。
插入其实就是直接暴力插的。
需要注意的是，这道题的距离度量是曼哈顿距离，略麻烦。
对于每个点，我们需要维护四个方向的极值。也就是kd-tree中某个节点所代表的空间，能管到的上下左右的最大（最小）坐标。
题解参考了iwtwiioi大爷的博客
代码风格参考了【bzoj 2716】[Violet 3]天使玩偶a 
/* *********************************************** Author :111qqz Created Time :2017年10月10日 星期二 13时35分26秒 File Name :2716.cpp ************************************************ */ #include &amp;lt;cstdio&amp;gt; #include &amp;lt;cstring&amp;gt; #include &amp;lt;iostream&amp;gt; #include &amp;lt;algorithm&amp;gt; #include &amp;lt;vector&amp;gt; #include &amp;lt;queue&amp;gt; #include &amp;lt;set&amp;gt; #include &amp;lt;map&amp;gt; #include &amp;lt;string&amp;gt; #include &amp;lt;cmath&amp;gt; #include &amp;lt;cstdlib&amp;gt; #include &amp;lt;ctime&amp;gt; #define PB push_back #define fst first #define sec second #define lson l,m,rt&amp;lt;&amp;lt;1 #define rson m+1,r,rt&amp;lt;&amp;lt;1|1 #define ms(a,x) memset(a,x,sizeof(a)) typedef long long LL; #define pi pair &amp;lt; int ,int &amp;gt; #define MP make_pair using namespace std; const double eps = 1E-8; const int dx4[4]={1,0,0,-1}; const int dy4[4]={0,-1,1,0}; const int inf = 0x3f3f3f3f; const LL linf = 1LL&amp;lt;&amp;lt;60; const int N=5E5+7; int n,m; int idx,rt; LL ans; struct KDT { LL coor[2]; LL mn[2],mx[2]; //需要维护四个方向的最值，是因为是曼哈顿距离。 int son[2]; bool operator &amp;lt; (const KDT &amp;amp;u)const{ return coor[idx]&amp;lt;u.</description></item><item><title>hdu 4347 The Closest M Points (kd-tree+优先队列，求M近邻)</title><link>https://111qqz.com/2017/10/hdu-4347/</link><pubDate>Mon, 09 Oct 2017 06:01:23 +0000</pubDate><guid>https://111qqz.com/2017/10/hdu-4347/</guid><description>
题目链接
题意： 给出若干个点，在给出一个定点，求距离该定点最近的m个点。
思路： 我们已经知道kd-tree可以得到最近邻，实际上M近邻，只需要维护一个size为M的优先队列就可以了。
需要注意，优先队列的元素一定要先定义小于关系orz
以及这次采用了轮盘转的策略划分维度，也就是按照深度，所有维度轮流作为split-method（实际用起来效果还是挺棒的orz
/* *********************************************** Author :111qqz Created Time :2017年10月08日 星期日 23时18分42秒 File Name :4347.cpp ************************************************ */ #include &amp;lt;cstdio&amp;gt; #include &amp;lt;cstring&amp;gt; #include &amp;lt;iostream&amp;gt; #include &amp;lt;algorithm&amp;gt; #include &amp;lt;vector&amp;gt; #include &amp;lt;queue&amp;gt; #include &amp;lt;set&amp;gt; #include &amp;lt;map&amp;gt; #include &amp;lt;string&amp;gt; #include &amp;lt;cmath&amp;gt; #include &amp;lt;cstdlib&amp;gt; #include &amp;lt;ctime&amp;gt; #define PB push_back #define fst first #define sec second #define lson l,m,rt&amp;lt;&amp;lt;1 #define rson m+1,r,rt&amp;lt;&amp;lt;1|1 #define ms(a,x) memset(a,x,sizeof(a)) typedef long long LL; #define pi pair &amp;lt; int ,int &amp;gt; #define MP make_pair using namespace std; const double eps = 1E-8; const int dx4[4]={1,0,0,-1}; const int dy4[4]={0,-1,1,0}; const int inf = 0x3f3f3f3f; const int N=5E4+7; const int M = 10; int n,m,k,t; int idx; struct Point { LL coor[M]; int id; void print() { for ( int i = 1 ; i &amp;lt;= k ; i++) printf(&amp;quot;%lld%c&amp;quot;,coor[i],i==k?</description></item><item><title>hdu 5992 Finding Hotels (kd-tree 裸题,查询)</title><link>https://111qqz.com/2017/10/hdu-5992/</link><pubDate>Sun, 08 Oct 2017 12:55:55 +0000</pubDate><guid>https://111qqz.com/2017/10/hdu-5992/</guid><description>
题目链接
题意： 有若干个(2E5)旅馆，分别给出旅馆的坐标和价格。有m个查询，每个查询给出一个人的位置(x0,y0),以及其能接受的最高价格。问在该人能接受的价格内，距离其最近的旅馆的坐标和价格是多少。
思路： kd-tree学习笔记
加了价格的限制其实无所谓，只要在更新的时候，先判一下价格就行了。
训练的时候不会kd-tree。。感觉有点可惜了。不然就6题了orz
/* *********************************************** Author :111qqz Created Time :2017年10月08日 星期日 18时43分38秒 File Name :5992.cpp ************************************************ */ #include &amp;lt;cstdio&amp;gt; #include &amp;lt;cstring&amp;gt; #include &amp;lt;iostream&amp;gt; #include &amp;lt;algorithm&amp;gt; #include &amp;lt;vector&amp;gt; #include &amp;lt;queue&amp;gt; #include &amp;lt;set&amp;gt; #include &amp;lt;map&amp;gt; #include &amp;lt;string&amp;gt; #include &amp;lt;cmath&amp;gt; #include &amp;lt;cstdlib&amp;gt; #include &amp;lt;ctime&amp;gt; #define PB push_back #define fst first #define sec second #define lson l,m,rt&amp;lt;&amp;lt;1 #define rson m+1,r,rt&amp;lt;&amp;lt;1|1 #define ms(a,x) memset(a,x,sizeof(a)) typedef long long LL; #define pi pair &amp;lt; int ,int &amp;gt; #define MP make_pair using namespace std; const double eps = 1E-8; const int dx4[4]={1,0,0,-1}; const int dy4[4]={0,-1,1,0}; const int inf = 0x3f3f3f3f; const int N=2E5+7; int n,m; struct Point { LL x,y; int c; int id; }p[N]; bool dv[N]; //划分方式 bool cmpx( const Point &amp;amp; p1, const Point &amp;amp;p2) { return p1.</description></item><item><title>hdu 2966 In case of failure （ kd-tree（只有查询） 模板题）</title><link>https://111qqz.com/2017/10/hdu-2966/</link><pubDate>Sun, 08 Oct 2017 11:53:35 +0000</pubDate><guid>https://111qqz.com/2017/10/hdu-2966/</guid><description>
题目链接：hdu2966 
题意： 给出二维平面上n(1E5)个点，问对于每个点，其他距离其最近的点的距离是多少。
思路： kd-tree 裸题。
kd-tree 学习笔记
/* *********************************************** Author :111qqz Created Time :2017年10月08日 星期日 18时43分38秒 File Name :2996.cpp ************************************************ */ #include &amp;lt;cstdio&amp;gt; #include &amp;lt;cstring&amp;gt; #include &amp;lt;iostream&amp;gt; #include &amp;lt;algorithm&amp;gt; #include &amp;lt;vector&amp;gt; #include &amp;lt;queue&amp;gt; #include &amp;lt;set&amp;gt; #include &amp;lt;map&amp;gt; #include &amp;lt;string&amp;gt; #include &amp;lt;cmath&amp;gt; #include &amp;lt;cstdlib&amp;gt; #include &amp;lt;ctime&amp;gt; #define PB push_back #define fst first #define sec second #define lson l,m,rt&amp;lt;&amp;lt;1 #define rson m+1,r,rt&amp;lt;&amp;lt;1|1 #define ms(a,x) memset(a,x,sizeof(a)) typedef long long LL; #define pi pair &amp;lt; int ,int &amp;gt; #define MP make_pair using namespace std; const double eps = 1E-8; const int dx4[4]={1,0,0,-1}; const int dy4[4]={0,-1,1,0}; const int inf = 0x3f3f3f3f; const int N=1E5+7; int n; struct Point { LL x,y; }p[N],p2[N]; //复制一份，因为nth_element的时候会把顺序打乱。 bool dv[N]; //划分方式 bool cmpx( const Point &amp;amp; p1, const Point &amp;amp;p2) { return p1.</description></item><item><title>kd tree 学习笔记</title><link>https://111qqz.com/2017/10/kd-tree-notes/</link><pubDate>Sun, 08 Oct 2017 11:46:46 +0000</pubDate><guid>https://111qqz.com/2017/10/kd-tree-notes/</guid><description>
老规矩，资料先行。
好久没学新算法了，有点忘记怎么学了orz
K-D tree 数据结构
hdu 2966 In case of failure　（k-d树　最近邻近点）
首先来看算法的提出。
现在二维平面上有n个点，知道这n个点的坐标，然后再添加一个点，问n个点中，距离新添加的点距离最近的点。
如果不做任何预处理，那么就是暴力枚举每个点，与该定点的距离。
如何优化呢？ 我们可以考虑把点域均等划分成若干个方块。
这样每次询问的时候只需要查询定点所在方格，以及定点相邻的8个方格中的点与该定点的距离即可。（除非这九个方格中没有点）
这种划分方法，对于随机数据大概是美滋滋，但是数据不会那么随机，因此划分也不能均等划 分。
这个时候， kd-tree 登场。k-d树（ **k-维树**的缩写）是在_k_维欧几里德空间组织点的数据结构
对于二维平面，kd-tree的思想是，提供一种平面的划分方法，使得对于任意输入数据，划分尽可能均匀。
**划分方法其实不唯一，常用的划分方法是，**对于k维中的每一维，按照方差最大的那一维划分。
（看到有些题解中，用该维度的极差（就是最大值-最小值）来作为度量，也就是按照极差最大的那一维度划分。）
(用方差的度量往往比较慢，看到根据二叉树的深度，交替维度也是一种常用做法 比如2016青岛 onsite)
下面是具体的划分过程。
 假设现在我们有平面上的点集 E ，其中有 5 个二维平面上的点 ： （1,4）（5,8） （4,2） （7,9） （10，11）
 它们在平面上的分布如图：
   首先，我们对区间 [ 1 , 5 ] 建树：
 先计算区间中所有点在第一维（也就是 x 坐标）上的方差：</description></item></channel></rss>