<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>01背包 on 111qqz's blog</title><link>https://111qqz.com/tags/01%E8%83%8C%E5%8C%85/</link><description>Recent content in 01背包 on 111qqz's blog</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><copyright>Copyright © 2012-2022 all rights reserved.</copyright><lastBuildDate>Wed, 16 Nov 2016 07:28:33 +0000</lastBuildDate><atom:link href="https://111qqz.com/tags/01%E8%83%8C%E5%8C%85/index.xml" rel="self" type="application/rss+xml"/><item><title>(dp专题006)hdu 2602 Bone Collector（01背包）</title><link>https://111qqz.com/2016/11/hdu2602/</link><pubDate>Wed, 16 Nov 2016 07:28:33 +0000</pubDate><guid>https://111qqz.com/2016/11/hdu2602/</guid><description>
题目链接
题意:容量为V的背包，n个骨头，给出价值和体积，问最多能装多少价值的背包。
思路：01背包裸体。
/* *********************************************** Author :111qqz Created Time :2016年11月16日 星期三 15时14分36秒 File Name :code/hdu/2602.cpp ************************************************ */ #include &amp;lt;cstdio&amp;gt; #include &amp;lt;cstring&amp;gt; #include &amp;lt;iostream&amp;gt; #include &amp;lt;algorithm&amp;gt; #include &amp;lt;vector&amp;gt; #include &amp;lt;queue&amp;gt; #include &amp;lt;set&amp;gt; #include &amp;lt;map&amp;gt; #include &amp;lt;string&amp;gt; #include &amp;lt;cmath&amp;gt; #include &amp;lt;cstdlib&amp;gt; #include &amp;lt;ctime&amp;gt; #define fst first #define sec second #define lson l,m,rt&amp;lt;&amp;lt;1 #define rson m+1,r,rt&amp;lt;&amp;lt;1|1 #define ms(a,x) memset(a,x,sizeof(a)) typedef long long LL; #define pi pair &amp;lt; int ,int &amp;gt; #define MP make_pair using namespace std; const double eps = 1E-8; const int dx4[4]={1,0,0,-1}; const int dy4[4]={0,-1,1,0}; const int inf = 0x3f3f3f3f; const int N=1E3+7; int dp[N],value[N],cost[N]; int n,V; void solve(int v,int c) { for ( int i = V; i &amp;gt;= c; i --) dp[i] = max(dp[i],dp[i-c]+v); } int main() { #ifndef ONLINE_JUDGE freopen(&amp;quot;code/in.</description></item><item><title>[dp专题005]hdu 1864最大报销额（01背包，垃圾题）</title><link>https://111qqz.com/2016/11/hdu1864/</link><pubDate>Wed, 16 Nov 2016 07:04:20 +0000</pubDate><guid>https://111qqz.com/2016/11/hdu1864/</guid><description>
hdu1864题目链接
题意：中文题目，不多说了。
思路：正解是01背包，呵呵呵。
出题人是傻逼吗？
不给数据范围？
以及，正解的01背包基于所有的发票额度的只有2位小数。这是让人猜？
本来看到这题这么恶心时不打算写的...
写了的原因纯粹是为了吐槽傻逼出题人..
简直是我做得最垃圾的题目之一。
/* *********************************************** Author :111qqz Created Time :2016年11月16日 星期三 14时13分28秒 File Name :code/hdu/1864.cpp ************************************************ */ #include &amp;lt;cstdio&amp;gt; #include &amp;lt;cstring&amp;gt; #include &amp;lt;iostream&amp;gt; #include &amp;lt;algorithm&amp;gt; #include &amp;lt;vector&amp;gt; #include &amp;lt;queue&amp;gt; #include &amp;lt;set&amp;gt; #include &amp;lt;map&amp;gt; #include &amp;lt;string&amp;gt; #include &amp;lt;cmath&amp;gt; #include &amp;lt;cstdlib&amp;gt; #include &amp;lt;ctime&amp;gt; #define fst first #define sec second #define lson l,m,rt&amp;lt;&amp;lt;1 #define rson m+1,r,rt&amp;lt;&amp;lt;1|1 #define ms(a,x) memset(a,x,sizeof(a)) typedef long long LL; #define pi pair &amp;lt; int ,int &amp;gt; #define MP make_pair using namespace std; const double eps = 1E-8; const int dx4[4]={1,0,0,-1}; const int dy4[4]={0,-1,1,0}; const int inf = 0x3f3f3f3f; const int N=3E6+7; double P; int n; int dp[N], value[35]; void solve( int value,int cost ) { for ( int i = int(P) ; i &amp;gt;= cost ; i--) dp[i] = max(dp[i],dp[i-cost]+value); } int main() { #ifndef ONLINE_JUDGE freopen(&amp;quot;code/in.</description></item><item><title>(dp专题004)hdu 2955Robberies（01背包变形）</title><link>https://111qqz.com/2016/11/hdu2955/</link><pubDate>Tue, 15 Nov 2016 11:19:56 +0000</pubDate><guid>https://111qqz.com/2016/11/hdu2955/</guid><description>
题目链接
题意： 给出n个银行 ，以及抢劫每个银行可以得到的价值和被抓的概率，不同银行之间被抓的概率是相互独立的，现在给出安全概率p，只有当概率从小于安全概率时才是安全的，问最多能抢劫多少价值。
思路：一开始很直接就想到把概率算成容量，
于是就成了经典的01背包，然后发现概率是double型。。。想当然得以为最多是2位小数，于是都*100转化成了整数做01背包。
然而正确思路是，把银行价值看成背包容量，而背包价值是概率！
将危险的概率转化成安全概率（1-危险概率=安全概率)
然后做01背包。
然后从大到小扫一遍价值，第一个大于安全概率的就是答案。
注意精度。
/* *********************************************** Author :111qqz Created Time :Tue 15 Nov 2016 06:53:53 PM CST File Name :code/hdu/2955.cpp ************************************************ */ #include &amp;lt;cstdio&amp;gt; #include &amp;lt;cstring&amp;gt; #include &amp;lt;iostream&amp;gt; #include &amp;lt;algorithm&amp;gt; #include &amp;lt;vector&amp;gt; #include &amp;lt;queue&amp;gt; #include &amp;lt;stack&amp;gt; #include &amp;lt;set&amp;gt; #include &amp;lt;map&amp;gt; #include &amp;lt;string&amp;gt; #include &amp;lt;cmath&amp;gt; #include &amp;lt;cstdlib&amp;gt; #include &amp;lt;deque&amp;gt; #include &amp;lt;ctime&amp;gt; #define fst first #define sec second #define lson l,m,rt&amp;lt;&amp;lt;1 #define rson m+1,r,rt&amp;lt;&amp;lt;1|1 #define ms(a,x) memset(a,x,sizeof(a)) typedef long long LL; #define pi pair &amp;lt; int ,int &amp;gt; #define MP make_pair using namespace std; const double eps = 1E-8; const int dx4[4]={1,0,0,-1}; const int dy4[4]={0,-1,1,0}; const int inf = 0x3f3f3f3f; const int N=105; double dp[N]; double p; int n,V; int value[N]; double cost[N]; void solve(double Cost,int Value) { for ( int i = V ; i &amp;gt;= Value ; i--) dp[i] = max(dp[i],dp[i-Value]*Cost); } int dblcmp( double d) { return d&amp;lt;-eps?</description></item><item><title>BZOJ 3407: [Usaco2009 Oct]Bessie's Weight Problem 贝茜的体重问题(01背包)</title><link>https://111qqz.com/2016/04/bzoj-3407/</link><pubDate>Thu, 14 Apr 2016 11:39:25 +0000</pubDate><guid>https://111qqz.com/2016/04/bzoj-3407/</guid><description>
3407: [Usaco2009 Oct]Bessie's Weight Problem 贝茜的体重问题 Time Limit: 3 Sec Memory Limit: 128 MB Submit: 88 Solved: 79 [Submit][Status][Discuss]
Description 贝茜像她的诸多姊妹一样，因为从约翰的草地吃了太多美味的草而长出了太多的赘肉．所以约翰将她置于一个及其严格的节食计划之中．她每天不能吃多过H(5≤日≤45000)公斤的干草．贝茜只能吃一整捆干草；当她开始吃一捆干草的之后就再也停不下来了．她有一个完整
的N(1≤N≤500)捆可以给她当作晚餐的干草的清单．她自然想要尽量吃到更多的干草．很自然地，每捆干草只能被吃一次（即使在列表中相同的重量可能出现2次，但是这表示的是两捆干草，其中每捆干草最多只能被吃掉一次）．
给定一个列表表示每捆干草的重量Si(1≤Si≤H)，求贝茜不超过节食的限制的前提下可以吃掉多少干草（注意一旦她开始吃一捆干草就会把那一捆干草全部吃完）．
Input 第1行：两个由空格隔开的整数日和N.
第2到第N+1行：第i+l行是一个单独的整数，表示第i捆干草的重量Si．
Output 一个单独的整数表示贝茜在限制范围内最多可以吃多少公斤的干草．
Sample Input 56 4 15 19 20 21
Sample Output 56
HINT 有四捆草，重量分别是15，19，20和21.贝茜在56公斤的限制范围内想要吃多少就可以吃多少．
贝茜可以吃3捆干草（重量分别为15，20，21）．恰好达到她的56公斤的限制．
``
/* *********************************************** Author :111qqz Created Time :2016年04月14日 星期四 19时33分09秒 File Name :code/bzoj/3407.cpp ************************************************ */ #include &amp;lt;cstdio&amp;gt; #include &amp;lt;cstring&amp;gt; #include &amp;lt;iostream&amp;gt; #include &amp;lt;algorithm&amp;gt; #include &amp;lt;vector&amp;gt; #include &amp;lt;queue&amp;gt; #include &amp;lt;set&amp;gt; #include &amp;lt;map&amp;gt; #include &amp;lt;string&amp;gt; #include &amp;lt;cmath&amp;gt; #include &amp;lt;cstdlib&amp;gt; #include &amp;lt;ctime&amp;gt; #define fst first #define sec second #define lson l,m,rt&amp;lt;&amp;lt;1 #define rson m+1,r,rt&amp;lt;&amp;lt;1|1 #define ms(a,x) memset(a,x,sizeof(a)) typedef long long LL; #define pi pair &amp;lt; int ,int &amp;gt; #define MP make_pair using namespace std; const double eps = 1E-8; const int dx4[4]={1,0,0,-1}; const int dy4[4]={0,-1,1,0}; const int inf = 0x3f3f3f3f; const int N=5E4+7; int n,V; int a[505]; int dp[N]; void solve ( int cost,int val) { for ( int i = V ; i &amp;gt;= cost ; i--) dp[i] = max(dp[i],dp[i-cost]+val); } int main() { #ifndef ONLINE_JUDGE freopen(&amp;quot;code/in.</description></item><item><title>BZOJ 1649: [Usaco2006 Dec]Cow Roller Coaster (dp，类似01背包)</title><link>https://111qqz.com/2016/04/bzoj-1649/</link><pubDate>Mon, 11 Apr 2016 09:19:52 +0000</pubDate><guid>https://111qqz.com/2016/04/bzoj-1649/</guid><description>
Time Limit: 5 Sec Memory Limit: 64 MB Submit: 504 Solved: 265 [Submit][Status][Discuss]
Description The cows are building a roller coaster! They want your help to design as fun a roller coaster as possible, while keeping to the budget. The roller coaster will be built on a long linear stretch of land of length L (1 &amp;lt;= L &amp;lt;= 1,000). The roller coaster comprises a collection of some of the N (1 &amp;lt;= N &amp;lt;= 10,000) different interchangable components.</description></item><item><title>codeforces #319 B - Modulo Sum (抽屉原理，dp)</title><link>https://111qqz.com/2015/09/codeforces319b-modulosumdp/</link><pubDate>Wed, 16 Sep 2015 03:24:00 +0000</pubDate><guid>https://111qqz.com/2015/09/codeforces319b-modulosumdp/</guid><description>
背包还是理解的不够透彻．．
因为每次都是用那个一维形式的．
这道题的做法类似01背包.
此外还可以有一个优化...
当n&amp;gt;m的时候．．．根绝抽屉原理．．一定为yes..
复杂度可以从o(nm)优到　o(m^2)
/************************************************************************* &amp;gt; File Name: code/cf/#319/B.cpp &amp;gt; Author: 111qqz &amp;gt; Email: rkz2013@126.com &amp;gt; Created Time: 2015年09月15日 星期二 19时54分44秒 ************************************************************************/ #include&amp;lt;iostream&amp;gt; #include&amp;lt;iomanip&amp;gt; #include&amp;lt;cstdio&amp;gt; #include&amp;lt;algorithm&amp;gt; #include&amp;lt;cmath&amp;gt; #include&amp;lt;cstring&amp;gt; #include&amp;lt;string&amp;gt; #include&amp;lt;map&amp;gt; #include&amp;lt;set&amp;gt; #include&amp;lt;queue&amp;gt; #include&amp;lt;vector&amp;gt; #include&amp;lt;stack&amp;gt; #include&amp;lt;cctype&amp;gt; #define y1 hust111qqz #define yn hez111qqz #define j1 cute111qqz #define ms(a,x) memset(a,x,sizeof(a)) #define lr dying111qqz using namespace std; #define For(i, n) for (int i=0;i&amp;lt;int(n);++i) typedef long long LL; typedef double DB; const int inf = 0x3f3f3f3f; const int N=1E3+7; int n,m; int a[N]; int dp[N]; void OneZeroPack(int cost,int value) { for ( int v = m ; v--; v &amp;gt;=cost) { dp[v] = max(dp[v],dp[v-cost]+value); } } int main() { #ifndef ONLINE_JUDGE #endif cin&amp;gt;&amp;gt;n&amp;gt;&amp;gt;m; if (n&amp;gt;=m) { puts(&amp;quot;YES&amp;quot;); return 0; } int k = 0; for ( int i = 0 ; i &amp;lt; n ; i++) { int x; scanf(&amp;quot;%d&amp;quot;,&amp;amp;x); if (x&amp;gt;m) continue; //大于背包容量的肯定直接舍去 k++; a[k] = x; } // for ( int i = 1 ; i &amp;lt;= k ; i++) cout&amp;lt;&amp;lt;&amp;quot;a[i]:&amp;quot;&amp;lt;&amp;lt;a[i]&amp;lt;&amp;lt;endl; for ( int i = 0 ; i &amp;lt;= m ; i++) dp[i] = -inf; dp[0] = 0 ; for ( int i = 1 ; i &amp;lt;= k ; i++) { OneZeroPack(a[i],a[i]); } for ( int i = 0 ; i &amp;lt;= m ; i++) cout&amp;lt;&amp;lt;i&amp;lt;&amp;lt;&amp;quot; &amp;quot;&amp;lt;&amp;lt;dp[i]&amp;lt;&amp;lt;endl; if (dp[m]==-inf) { puts(&amp;quot;NO&amp;quot;); } else { puts(&amp;quot;YES&amp;quot;); } #ifndef ONLINE_JUDGE fclose(stdin); #endif return 0; }</description></item><item><title>hdu 1171 Big Event in HDU （母函数，01背包）</title><link>https://111qqz.com/2015/04/hdu1171/</link><pubDate>Sat, 04 Apr 2015 14:56:00 +0000</pubDate><guid>https://111qqz.com/2015/04/hdu1171/</guid><description>
**Time Limit: 10000/5000 MS (Java/Others) Memory Limit: 65536/32768 K (Java/Others) Total Submission(s): 26534 Accepted Submission(s): 9332 **
Problem Description
Nowadays, we all know that Computer College is the biggest department in HDU. But, maybe you don't know that Computer College had ever been split into Computer College and Software College in 2002. The splitting is absolutely a big event in HDU! At the same time, it is a trouble thing too.</description></item><item><title>hdu 1203 I NEED A OFFER! （01背包）</title><link>https://111qqz.com/2015/04/hdu1203/</link><pubDate>Sat, 04 Apr 2015 12:12:00 +0000</pubDate><guid>https://111qqz.com/2015/04/hdu1203/</guid><description>
I NEED A OFFER! **Time Limit: 2000/1000 MS (Java/Others) Memory Limit: 65536/32768 K (Java/Others) Total Submission(s): 18287 Accepted Submission(s): 7320 **
Problem Description
Speakless很早就想出国，现在他已经考完了所有需要的考试，准备了所有要准备的材料，于是，便需要去申请学校了。要申请国外的任何大学，你都要交纳一定的申请费用，这可是很惊人的。Speakless没有多少钱，总共只攒了n万美元。他将在m个学校中选择若干的（当然要在他的经济承受范围内）。每个学校都有不同的申请费用a（万美元），并且Speakless估计了他得到这个学校offer的可能性b。不同学校之间是否得到offer不会互相影响。“I NEED A OFFER”，他大叫一声。帮帮这个可怜的人吧，帮助他计算一下，他可以收到至少一份offer的最大概率。（如果Speakless选择了多个学校，得到任意一个学校的offer都可以）。
Input
输入有若干组数据，每组数据的第一行有两个正整数n,m(0&amp;lt;=n&amp;lt;=10000,0&amp;lt;=m&amp;lt;=10000) 后面的m行，每行都有两个数据ai(整型),bi(实型)分别表示第i个学校的申请费用和可能拿到offer的概率。 输入的最后有两个0。
Output
每组数据都对应一个输出，表示Speakless可能得到至少一份offer的最大概率。用百分数表示，精确到小数点后一位。
Sample Input
10 3 4 0.1 4 0.2 5 0.3 0 0
Sample Output
44.0%
Hint
You should use printf(&amp;quot;%%&amp;quot;) to print a '%'.
01背包
最开始WA在初始化，dp数组全都赋值为1，忘赋了dp[0]，导致如果恰好是花光所有钱得到答案的时候答案错误。
然后还一直WA。
后来发现是当N=0的时候，我直接取了所有A[I]=0对应的B[I]中最大的值。。。这显然是错的，少年你是脑抽吗。。。。。
然后修改了下，终于A掉了。。。。。
1 2 /* *********************************************** 3Author :111qqz 4Created Time :2016年02月22日 星期一 22时50分40秒 5File Name :code/hdu/1203.</description></item><item><title>hdu 2546 饭卡 （01背包）</title><link>https://111qqz.com/2015/04/hdu2546/</link><pubDate>Sat, 04 Apr 2015 08:53:00 +0000</pubDate><guid>https://111qqz.com/2015/04/hdu2546/</guid><description>
饭卡 **Time Limit: 5000/1000 MS (Java/Others) Memory Limit: 32768/32768 K (Java/Others)
Total Submission(s): 14225 Accepted Submission(s): 4945
**
Problem Description
电子科大本部食堂的饭卡有一种很诡异的设计，即在购买之前判断余额。如果购买一个商品之前，卡上的剩余金额大于或等于5元，就一定可以购买成功（即使购买后卡上余额为负），否则无法购买（即使金额足够）。所以大家都希望尽量使卡上的余额最少。
某天，食堂中有n种菜出售，每种菜可购买一次。已知每种菜的价格以及卡上的余额，问最少可使卡上的余额为多少。
Input
多组数据。对于每组数据：
第一行为正整数n，表示菜的数量。n&amp;lt;=1000。
第二行包括n个正整数，表示每种菜的价格。价格不超过50。
第三行包括一个正整数m，表示卡上的余额。m&amp;lt;=1000。
n=0表示数据结束。
Output
对于每组输入,输出一行,包含一个整数，表示卡上可能的最小余额。
Sample Input
1 50 5 10 1 2 3 2 1 1 2 3 2 1 50 0
Sample Output
-45 32
Source
UESTC 6th Programming Contest Online
在入门dp。
显然是01背包。 cost和value都是价钱。
但是有限制条件。
很容易想到，为了使得余额最少，我们要把最贵的留在最后买。
读入的时候把最贵的菜价拿出来
然后剩下的n-1个菜，做一个容量为m-5的01背包。
注意如果m&amp;lt;5,直接输出即可。
1 2 3 /* *********************************************** 4Author :111qqz 5Created Time :2016年02月22日 星期一 22时44分27秒 6File Name :code/hdu/2546.</description></item></channel></rss>