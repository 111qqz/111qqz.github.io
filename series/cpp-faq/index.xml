<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>cpp FAQ on 111qqz的小窝</title><link>https://111qqz.com/series/cpp-faq/</link><description>Recent content in cpp FAQ on 111qqz的小窝</description><generator>Hugo -- gohugo.io</generator><language>en</language><copyright>Copyright © 2012-2022 all rights reserved.</copyright><lastBuildDate>Tue, 12 Apr 2022 21:39:31 +0800</lastBuildDate><atom:link href="https://111qqz.com/series/cpp-faq/index.xml" rel="self" type="application/rss+xml"/><item><title>[施工中] 浅谈 Cpp Value Categories</title><link>https://111qqz.com/2022/04/cpp-value-categories/</link><pubDate>Tue, 12 Apr 2022 21:39:31 +0800</pubDate><guid>https://111qqz.com/2022/04/cpp-value-categories/</guid><description>
背景 每一个cpp expression都有一个type 和 value category 属性 前者大家都比较了解，但是后者却常常被忽视
Value Categories in the c language cpp是由c语言发展而来，因此这里先介绍c 语言中的value category
c语言只有简单的lvalue和rvalue两种
lvalue lvalue的&amp;quot;l&amp;quot;表示&amp;quot;left&amp;quot;,表示lvalue可以出现在assigment operator的左边
更准确的说
Tip &amp;quot;lvalue is a value refer to an object&amp;quot; &amp;quot;an object is a region of storage&amp;quot;
所以通俗的说，lvalue就是可以取地址(存在storage region)的值 实际上编译器可能会对lvalue做优化，导致实际没有占用storage 但是cpp保证可以在编程时认为lvalue 一定时有占用storage的
rvalue 一切不是lvalue的值都是rvalue
大部分字面量都是rvalue, 但是string(比如&amp;quot;hello world&amp;quot;)不是 E1+E2是rvalue, 其中E1和E2不限制是何种value 但是实际上并不是所有的rvalue都不会占用storage 原因是字面量的空间是有限的,如果是一个非常大的int值，那么实际上可能是会占用地址的
然而，cpp 要求不要依赖这个行为来编程 Warning 也就是认为rvalue(non-class)是不会占用storage的
为啥要区分lvalue 和rvalue? 原因之一是，编译器可以根据value category 做更多优化 比如对于如下代码
1 2int x = 3; 可以在汇编得到的代码中直接用立即数3而不是放在data storage中</description></item></channel></rss>