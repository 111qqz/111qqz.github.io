---
author: 111qqz
date: 2016-04-01 12:32:13+00:00
draft: false
title: 'BZOJ 1609: [Usaco2008 Feb]Eating Together麻烦的聚餐(LIS nlogn解法)'
type: post
url: /2016/04/bzoj-1609/
categories:
- ACM
tags:
- LIS
---




## 1609: [Usaco2008 Feb]Eating Together麻烦的聚餐


Time Limit: 10 Sec  Memory Limit: 64 MB
Submit: 1282  Solved: 766
[[Submit](http://www.lydsy.com/JudgeOnline/submitpage.php?id=1609)][[Status](http://www.lydsy.com/JudgeOnline/problemstatus.php?id=1609)][[Discuss](http://www.lydsy.com/JudgeOnline/bbs.php?id=1609)]


## Description






为了避免餐厅过分拥挤，FJ要求奶牛们分3批就餐。每天晚饭前，奶牛们都会在餐厅前排队入内，按FJ的设想所有第3批就餐的奶牛排在队尾，队伍的前端由设定为第1批就餐的奶牛占据，中间的位置就归第2批就餐的奶牛了。由于奶牛们不理解FJ的安排，晚饭前的排队成了一个大麻烦。 第i头奶牛有一张标明她用餐批次D_i(1 <= D_i <= 3)的卡片。虽然所有N(1 <= N <= 30,000)头奶牛排成了很整齐的队伍但谁都看得出来，卡片上的号码是完全杂乱无章的。 在若干次混乱的重新排队后，FJ找到了一种简单些的方法：奶牛们不动，他沿着队伍从头到尾走一遍把那些他认为排错队的奶牛卡片上的编号改掉，最终得到一个他想要的每个组中的奶牛都站在一起的队列，例如111222333或者333222111。哦，你也发现了，FJ不反对一条前后颠倒的队列，那样他可以让所有奶牛向后转，然后按正常顺序进入餐厅。 你也晓得，FJ是个很懒的人。他想知道，如果他想达到目的，那么他最少得改多少头奶牛卡片上的编号。所有奶牛在FJ改卡片编号的时候，都不会挪位置。






## Input






第1行: 1个整数：N 第2..N+1行: 第i+1行是1个整数，为第i头奶牛的用餐批次D_i






## Output






第1行: 输出1个整数，为FJ最少要改几头奶牛卡片上的编号，才能让编号变成他设想中的样子






## Sample Input




5
1
3
2
1
1
输入说明:队列中共有5头奶牛，第1头以及最后2头奶牛被设定为第一批用餐，第2头奶牛的预设是第三批用餐，第3头则为第二批用餐。






## Sample Output






1

输出说明:

如果FJ想把当前队列改成一个不下降序列，他至少要改2头奶牛的编号，一种可行的方案是：把队伍中2头编号不是1的奶牛的编号都改成1。不过，如果FJ选择把第1头奶牛的编号改成3就能把奶牛们的队伍改造成一个合法的不上升序列了。














思路：先考虑一个方向。最后要排列成一个不下降子序列。




需要修改的最少次数就是总长度减去最长的不下降子序列的长度。




所以问题就变成了最长求不下降子序列的长度。




由于n最大30000，O(n^2)的复杂度会TLE.所以去学了下nlogn的做法[LIS nlogn解法讲解](https://111qqz.com/wordpress/2016/04/nlogn/)







然后再反正做一遍，求最小值即可。




以及：原来upper_bound和lower_bound可以对数组直接用啊。。。




以及：原来reverse也可以对数组用啊。。。。








 

    
    /* ***********************************************
    Author :111qqz
    Created Time :2016年04月01日 星期五 13时03分19秒
    File Name :code/bzoj/1609.cpp
    ************************************************ */
    
    #include <cstdio>
    #include <cstring>
    #include <iostream>
    #include <algorithm>
    #include <vector>
    #include <queue>
    #include <set>
    #include <map>
    #include <string>
    #include <cmath>
    #include <cstdlib>
    #include <ctime>
    #define fst first
    #define sec second
    #define lson l,m,rt<<1
    #define rson m+1,r,rt<<1|1
    #define ms(a,x) memset(a,x,sizeof(a))
    typedef long long LL;
    #define pi pair < int ,int >
    #define MP make_pair
    
    using namespace std;
    const double eps = 1E-8;
    const int dx4[4]={1,0,0,-1};
    const int dy4[4]={0,-1,1,0};
    const int inf = 0x3f3f3f3f;
    const int N=3E4+7;
    int a[N];
    int dp[N];
    int g[N];
    int n;
    int solve ()
    {
        ms(g,0x3f);
        int res = 0 ;
        for ( int i = 1 ; i <= n ; i++)
        {
    	int k = upper_bound(g+1,g+n+1,a[i])-g;
    	dp[i] = k;
    	g[k] = a[i];
    	res = max(res,dp[i]);
        }
        return n - res;
    }
    int main()
    {
    	#ifndef  ONLINE_JUDGE 
    	freopen("code/in.txt","r",stdin);
      #endif
    	ios::sync_with_stdio(false);
    	cin>>n;
    	for ( int i = 1 ; i <= n ; i++) cin>>a[i];
    	int ans = inf ;
    	ans = min(ans,solve());
    	reverse(a+1,a+n+1);
    	ans = min (ans,solve());
    	cout<<ans<<endl;
    
    	
    
      #ifndef ONLINE_JUDGE  
      fclose(stdin);
      #endif
        return 0;
    }
    



