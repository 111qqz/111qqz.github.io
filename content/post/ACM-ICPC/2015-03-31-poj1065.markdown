---
author: 111qqz
date: 2015-03-31 07:05:00+00:00
draft: false
title: poj 1065 Wooden Sticks
type: post
url: /2015/03/poj1065/
categories:
- ACM
tags:
- greedy
---

Wooden Sticks
Time Limit: 1000MS Memory Limit: 10000K
Total Submissions: 19008 Accepted: 8012
Description

There is a pile of n wooden sticks. The length and weight of each stick are known in advance. The sticks are to be processed by a woodworking machine in one by one fashion. It needs some time, called setup time, for the machine to prepare processing a stick. The setup times are associated with cleaning operations and changing tools and shapes in the machine. The setup times of the woodworking machine are given as follows:
(a) The setup time for the first wooden stick is 1 minute.
(b) Right after processing a stick of length l and weight w , the machine will need no setup time for a stick of length l' and weight w' if l <= l' and w <= w'. Otherwise, it will need 1 minute for setup.
You are to find the minimum setup time to process a given pile of n wooden sticks. For example, if you have five sticks whose pairs of length and weight are ( 9 , 4 ) , ( 2 , 5 ) , ( 1 , 2 ) , ( 5 , 3 ) , and ( 4 , 1 ) , then the minimum setup time should be 2 minutes since there is a sequence of pairs ( 4 , 1 ) , ( 5 , 3 ) , ( 9 , 4 ) , ( 1 , 2 ) , ( 2 , 5 ) .
Input

The input consists of T test cases. The number of test cases (T) is given in the first line of the input file. Each test case consists of two lines: The first line has an integer n , 1 <= n <= 5000 , that represents the number of wooden sticks in the test case, and the second line contains 2n positive integers l1 , w1 , l2 , w2 ,..., ln , wn , each of magnitude at most 10000 , where li and wi are the length and weight of the i th wooden stick, respectively. The 2n integers are delimited by one or more spaces.
Output

The output should contain the minimum setup time in minutes, one per line.
Sample Input

3
5
4 9 5 2 2 1 3 5 1 4
3
2 2 1 1 2 2
3
1 3 2 2 3 1
Sample Output

2
1
3




贪心题。题目很容易懂，就不翻译了。略水，一遍AC，久违的快感！！！hhhh ，嘛，我为注意节制的（哪和哪！）

把w和l分别按第一关键字和第二关键字排序。

然后扫描一遍，如果符合w[i]>=wk[k]&&l[i]>=lk[k]就更新wk[k]和lk[k]，分别表示的是第K的操作下能达到的最大w和l.

如果不符合，则需要增加一分钟的工作时间。同样不要忘记更新。
 

```c++    
    #include <iostream>
    #include <cstdio>
    #include <cstring>
    #include <cmath>
    #include <algorithm>
    #include <iomanip>
    
    
    using namespace std;
    
    int main()
    {
        int t;
        cin>>t;
        int n;
        int l[6666],w[6666],lk[6666],wk[6666];
        while (t--)
        {
            memset(l,0,sizeof(l));
            memset(w,0,sizeof(w));
            memset(lk,0,sizeof(lk));
            memset(wk,0,sizeof(wk));
            scanf("%d",&n);
            for (int i=1;i<=n;i++)
                scanf("%d %d",&l[i],&w[i]);
            for (int i=1;i<=n-1;i++)
                for (int j=i+1;j<=n;j++)
                 if ((l[i]>l[j])||((l[i]==l[j])&&(w[i]>w[j])))
            {
                swap(l[i],l[j]);
                swap(w[i],w[j]);
    
            }
    
                int k;
                int sum=1;
                lk[1]=l[1];
                wk[1]=w[1];
              //  for (int i=1;i<=n;i++)
            //        cout<<"look"<<l[i]<<"  "<<w[i]<<endl;
             for (int i=1;i<=n;i++)
             {
    
                 k=1;
                 while ((l[i]<lk[k])||(w[i]<wk[k]))
                 {
                     k++;
                 //    cout<<"look"<<endl;
                     if (k>sum) break;
                 }
                 if (k>sum)
                 {
                     sum++;
                     lk[k]=l[i];
                     wk[k]=w[i];
                 }
                 else
                 {
                     lk[k]=l[i];
                     wk[k]=w[i];
                 }
             //    cout<<"k:"<<k<<endl;
    
    
             }
                  printf("%d\n",sum);
        }
        return 0;
    }


```
