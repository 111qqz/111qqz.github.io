---
author: 111qqz
date: 2016-09-04 17:48:11+00:00
draft: false
title: codeforces 339 D. Xenia and Bit Operations(线段树)
type: post
url: /2016/09/cf339d/
categories:
- ACM
tags:
- 线段树
---

[题目链接](http://codeforces.com/problemset/problem/339/D)

题意：给出n和m,初始给出1<<n个数，先相邻的两个数进行**或操作**（a[1]^a[2],a[3]^a[4]...），得到的新数列再相邻的两个数进行**异或操作**。

最后得到一个数，即为答案。现在给出m个操作，每个操作两个数p,b，表示令a[p]=b,每次变化后输出最终的结果。

思路：线段树。这道题让我学到了，**线段树的数组tree[i]存储的信息可能不唯一，可以不同层存储的是不同的信息。**

比如这道题中，**距离叶子节点距离为奇数的点存储的是或操作的结果，距离叶子节点距离为偶数的点存储的是异或操作的结果。**

还需要注意的是，build和update操作都是从顶向下，**最后一个操作是异或还是或取决于n的奇偶性，记得判断。**

    
    /* ***********************************************
    Author :111qqz
    Created Time :Mon 05 Sep 2016 12:56:34 AM CST
    File Name :code/cf/problem/339D.cpp
    ************************************************ */
    #include <cstdio>
    #include <cstring>
    #include <iostream>
    #include <algorithm>
    #include <vector>
    #include <queue>
    #include <set>
    #include <map>
    #include <string>
    #include <cmath>
    #include <cstdlib>
    #include <ctime>
    #define fst first
    #define sec second
    #define lson l,m,rt<<1
    #define rson m+1,r,rt<<1|1
    #define ms(a,x) memset(a,x,sizeof(a))
    typedef long long LL;
    #define pi pair < int ,int >
    #define MP make_pair
    using namespace std;
    const double eps = 1E-8;
    const int dx4[4]={1,0,0,-1};
    const int dy4[4]={0,-1,1,0};
    const int inf = 0x3f3f3f3f;
    const int N=1<<18;
    int tree[N<<2];
    int n,m;
    void PushUp(int rt,int state)
    {
        if (state==-1)
    	tree[rt] = tree[rt<<1]|tree[rt<<1|1];
        else tree[rt] = tree[rt<<1]^tree[rt<<1|1];
    }
    void build(int l,int r,int rt,int state)
    {
        if (l==r)
        {
    	scanf("%d",&tree[rt]);
    	return ;
        }
        int m = (l+r)>>1;
        build(lson,-state);
        build(rson,-state);
        PushUp(rt,state);
    }
    void update( int p,int sc,int l,int r,int rt,int state)
    {
        if (l==r)
        {
    	tree[rt] = sc;
    	return;
        }
        int m = (l+r)>>1;
        if (p<=m) update(p,sc,lson,-state);
        else update(p,sc,rson,-state);
        PushUp(rt,state);
    }
    int main()
    {
    	#ifndef  ONLINE_JUDGE 
    	freopen("code/in.txt","r",stdin);
      #endif
    	int state;
    	cin>>n>>m;
    	if (n%2==0) state = 1; //n是树的高度，最后的操作是异或还是或和树的高度的奇偶性有关。
    	else state = -1;
    	n = 1<<n;
    	build(1,n,1,state);
    	while (m--)
    	{
    	    int x,y;
    	    scanf("%d%d",&x,&y);
    	    update(x,y,1,n,1,state);
    	    printf("%d\n",tree[1]);
    	}
      #ifndef ONLINE_JUDGE  
      fclose(stdin);
      #endif
        return 0;
    }
    



