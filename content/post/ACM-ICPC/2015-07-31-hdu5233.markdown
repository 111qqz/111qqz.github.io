---
author: 111qqz
date: 2015-07-31 19:04:00+00:00
draft: false
title: 'hdu 5233  Gunner II (bc #42 B)  （离散化）'
type: post
url: /2015/07/hdu5233/
categories:
- ACM
tags:
- 离散化
---

# Gunner II


**Time Limit: 2000/1000 MS (Java/Others)    Memory Limit: 65536/65536 K (Java/Others)
Total Submission(s): 1433    Accepted Submission(s): 540
**


Problem Description






Long long ago, there was a gunner whose name is Jack. He likes to go hunting very much. One day he go to the grove. There are n birds and n trees. The i-th bird stands on the top of the i-th tree. The trees stand in straight line from left to the right. Every tree has its height. Jack stands on the left side of the left most tree. When Jack shots a bullet in height H to the right, the nearest bird which stands in the tree with height H will falls.

Jack will shot many times, he wants to know which bird will fall during each shot.










Input






There are multiple test cases (about 5), every case gives n, m in the first line, n indicates there are n trees and n birds, m means Jack will shot m times.

In the second line, there are n numbers h[1],h[2],h[3],…,h[n] which describes the height of the trees.

In the third line, there are m numbers q[1],q[2],q[3],…,q[m] which describes the height of the Jack’s shots.

Please process to the end of file.

[Technical Specification]

All input items are integers.

1<=n,m<=100000(10^5)

1<=h[i],q[i]<=1000000000(10^9)










Output






For each q[i], output an integer in a single line indicates the id of bird Jack shots down. If Jack can’t shot any bird, just output -1.

The id starts from 1.










Sample Input







5 5
1 2 3 4 1
1 3 1 4 2











Sample Output







1
3
5
4
2





_Hint_


Huge input, fast IO is recommended.
















Source




[BestCoder Round #42](http://acm.hdu.edu.cn/search.php?field=problem&key=BestCoder+Round+42&source=1&searchmode=source)







因为一共才1E5的数据，而高度有1E9




所以考虑离散化




关于离散化的内容，这篇博客讲得很好。




http://blog.csdn.net/axuan_k/article/details/45954561




我是使用了第三种map+set的方法。。。




离散化大概是因为数据太大下表存不下。。。




然后map的key 值没有范围？所以实现了离散化（是这样嘛？？？）








 

    
    /*************************************************************************
    	> File Name: code/bc/#42/B.cpp
    	> Author: 111qqz
    	> Email: rkz2013@126.com 
    	> Created Time: 2015年08月01日 星期六 02时47分54秒
     ************************************************************************/
    
    #include<iostream>
    #include<iomanip>
    #include<cstdio>
    #include<algorithm>
    #include<cmath>
    #include<cstring>
    #include<string>
    #include<map>
    #include<set>
    #include<queue>
    #include<vector>
    #include<stack>
    #define y0 abc111qqz
    #define y1 hust111qqz
    #define yn hez111qqz
    #define j1 cute111qqz
    #define tm crazy111qqz
    #define lr dying111qqz
    using namespace std;
    #define REP(i, n) for (int i=0;i<int(n);++i)  
    typedef long long LL;
    typedef unsigned long long ULL;
    const int inf = 0x7fffffff;
    const int N=2E5+7;
    int n,m;
    map<int,int>mp;
    set<int>se[N];
    int main()
    {
        while (scanf("%d %d",&n,&m)!=EOF)
        {
    	for ( int i = 1 ; i <= n ; i++ )
    	    se[i].clear();
    	mp.clear();
    	int  t = 0;
    	int x;
    	for ( int i = 1 ; i <= n ; i++ )
    	{
    	    scanf("%d",&x);
    	    if (!mp[x]) mp[x]=++t;
    	    se[mp[x]].insert(i);
    	}
    	for ( int i = 1 ; i <= m ; i++)
    	{
    	    scanf("%d",&x);
    	    if (se[mp[x]].size()==0)
    	    {
    		puts("-1");
    	    }
    	    else
    	    {
    		printf("%d\n",*se[mp[x]].begin());
    		se[mp[x]].erase(se[mp[x]].begin());
    	    }
    	}
    
        }
    	return 0;
    }
    



还有一种写法，貌似要快一点，但是空间用的多一些：
 

    
    /*************************************************************************
    	> File Name: code/bc/#42/BB.cpp
    	> Author: 111qqz
    	> Email: rkz2013@126.com 
    	> Created Time: 2015年08月01日 星期六 09时30分45秒
     ************************************************************************/
    
    #include<iostream>
    #include<iomanip>
    #include<cstdio>
    #include<algorithm>
    #include<cmath>
    #include<cstring>
    #include<string>
    #include<map>
    #include<set>
    #include<queue>
    #include<vector>
    #include<stack>
    #define y0 abc111qqz
    #define y1 hust111qqz
    #define yn hez111qqz
    #define j1 cute111qqz
    #define tm crazy111qqz
    #define lr dying111qqz
    using namespace std;
    #define REP(i, n) for (int i=0;i<int(n);++i)  
    typedef long long LL;
    typedef unsigned long long ULL;
    const int inf = 0x7fffffff;
    map<int,set<int> >mp;
    int m,n;
    int main()
    {
        while (scanf("%d %d",&n,&m)!=EOF)
        {
    	mp.clear();
    	for ( int i = 1;  i <= n ; i++ )
    	{
    	    int tmpx;
    	    scanf("%d",&tmpx);
    	    mp[tmpx].insert(i);
    	}
    	for ( int i = 1 ; i <= m ; i++ )
    	{
    	    int q;
    	    scanf("%d",&q);
    	    if (mp[q].size()==0)
    	    {
    		puts("-1");
    	    }
    	    else
    	    {
    		printf("%d\n",*mp[q].begin());
    		mp[q].erase(mp[q].begin());
    	    }
    	}
        }
      
    	return 0;
    }
    



