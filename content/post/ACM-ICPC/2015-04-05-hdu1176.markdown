---
author: 111qqz
date: 2015-04-05 18:05:00+00:00
draft: false
title: hdu 1176 免费馅饼(二维dp)
type: post
url: /2015/04/hdu1176/
categories:
- ACM
tags:
- dp
---

# 免费馅饼




**Time Limit: 2000/1000 MS (Java/Others) Memory Limit: 65536/32768 K (Java/Others)  
Total Submission(s): 29065 Accepted Submission(s): 9921  
**  
  





Problem Description




都说天上不会掉馅饼，但有一天gameboy正走在回家的小径上，忽然天上掉下大把大把的馅饼。说来gameboy的人品实在是太好了，这馅饼别处都不掉，就掉落在他身旁的10米范围内。馅饼如果掉在了地上当然就不能吃了，所以gameboy马上卸下身上的背包去接。但由于小径两侧都不能站人，所以他只能在小径上接。由于gameboy平时老呆在房间里玩游戏，虽然在游戏中是个身手敏捷的高手，但在现实中运动神经特别迟钝，每秒种只有在移动不超过一米的范围内接住坠落的馅饼。现在给这条小径如图标上坐标：  
![](https://111qqz.com/wp-content/uploads/2015/11/1176_1.jpg)
  
为了使问题简化，假设在接下来的一段时间里，馅饼都掉落在0-10这11个位置。开始时gameboy站在5这个位置，因此在第一秒，他只能接到4,5,6这三个位置中其中一个位置上的馅饼。问gameboy最多可能接到多少个馅饼？（假设他的背包可以容纳无穷多个馅饼）










Input




输入数据有多组。每组数据的第一行为以正整数n(0








Output




每一组输入数据对应一行输出。输出一个整数m，表示gameboy最多可能接到m个馅饼。  
提示：本题的输入数据量比较大，建议用scanf读入，用cin可能会超时。  
  











Sample Input







6




5 1





4 1




6 1





7 2





7 2





8 3





0














Sample Output







4














Author




lwg










二维dp




状态转移方程也很容易想到




dp[i][j]表示在时间i，位置J的时候能得到的馅饼的个数。




dp[i][j]是由dp[i-1][j-1],dp[i-1][j],dp[i-1][j+1]得到。




注意边界和初始化。




因为一开始是在位置5




所以 dp[1][4]=a[1][4];




　　dp[1][5]=a[1][5];




　　dp[1][6]=a[1][6];







但是取出最大的dp[i][j]的时候出了问题导致我一直WA，而且还没有想的很明白。。







AC代码：





 ```c++

    
    /* ***********************************************
    Author :111qqz
    Created Time :2016年02月22日 星期一 23时18分21秒
    File Name :code/hdu/1176.cpp
    ************************************************ */
    
    #include <iostream>
    #include <algorithm>
    #include <cstring>
    #include <cstdio>
    #include <cmath>
    
    using namespace std;
    
    int n,t,x,maxtime;
    long long ans;
    const int N=1E5+7;
    int a[N][15],dp[N][15];
    
    int MAX(int a,int b,int c)
    {
        int res = -1;
        if ( a>res )
            res = a;
        if ( b>res )
            res = b;
        if ( c>res )
            res = c;
        return res;
    }
    
    int main()
    {
        while ( scanf("%d",&n)!=EOF&&n )
        {
            ans = -1 ;
            maxtime = -1;
            memset(a,0,sizeof(a));
            memset(dp,0,sizeof(dp));
            for ( int i = 1 ; i <= n ; i++ )
            {
                scanf("%d %d",&x,&t);
                a[t][x]++;
                if ( t>maxtime )
                    maxtime = t;
            }
            dp[1][4] = a[1][4];
            dp[1][5] = a[1][5];
            dp[1][6] = a[1][6];
            for ( int i = 2 ; i <= maxtime ; i++ )
                for ( int j = 0 ; j <= 10 ; j++ )
                {
                    if ( j==0 )
                        dp[i][j] = max(dp[i-1][j],dp[i-1][j+1]) + a[i][j];
                        else if ( j==10 )
                                dp[i][j] = max(dp[i-1][j],dp[i-1][j-1]) + a[i][j];
                                else  dp[i][j] = MAX(dp[i-1][j-1],dp[i-1][j],dp[i-1][j+1])+a[i][j];
                   // if ( dp[i][j]>ans )
                  //      ans = dp[i][j];
                 
                }
                for ( int i = 0 ; i <= 10 ; i++)
                    if ( dp[maxtime][i]>ans )
                       ans = dp[maxtime][i];
            printf("%I64d\n",ans);
    
        }
        return 0;
    }

```



WA代码：


```c++ 

    
    #include <iostream>
    #include <algorithm>
    #include <cstring>
    #include <cstdio>
    #include <cmath>
    
    using namespace std;
    
    int n,t,x,maxtime;
    long long ans;
    const int N=1E5+7;
    int a[N][15],dp[N][15];
    
    int MAX(int a,int b,int c)
    {
        int res = -1;
        if ( a>res )
            res = a;
        if ( b>res )
            res = b;
        if ( c>res )
            res = c;
        return res;
    }
    
    int main()
    {
        while ( scanf("%d",&n)!=EOF&&n )
        {
            ans = -1 ;
            maxtime = -1;
            memset(a,0,sizeof(a));
            memset(dp,0,sizeof(dp));
            for ( int i = 1 ; i <= n ; i++ )
            {
                scanf("%d %d",&x,&t);
                a[t][x]++;
                if ( t>maxtime )
                    maxtime = t;
            }
            dp[1][4] = a[1][4];
            dp[1][5] = a[1][5];
            dp[1][6] = a[1][6];
            for ( int i = 2 ; i <= maxtime ; i++ )
                for ( int j = 0 ; j <= 10 ; j++ )
                {
                    if ( j==0 )
                        dp[i][j] = max(dp[i-1][j],dp[i-1][j+1]) + a[i][j];
                        else if ( j==10 )
                                dp[i][j] = max(dp[i-1][j],dp[i-1][j-1]) + a[i][j];
                                else  dp[i][j] = MAX(dp[i-1][j-1],dp[i-1][j],dp[i-1][j+1])+a[i][j];
                    if ( dp[i][j]>ans )
                        ans = dp[i][j];
                 
                }
              //  for ( int i = 0 ; i <= 10 ; i++)
              //      if ( dp[maxtime][i]>ans )
              //         ans = dp[maxtime][i];
            printf("%I64d\n",ans);
    
        }
        return 0;
    }

```

