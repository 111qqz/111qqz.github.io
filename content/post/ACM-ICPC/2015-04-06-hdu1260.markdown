---
author: 111qqz
date: 2015-04-06 16:23:00+00:00
draft: false
title: hdu 1260 tickets
type: post
url: /2015/04/hdu1260/
categories:
- ACM
tags:
- dp
---

# Tickets




**Time Limit: 2000/1000 MS (Java/Others) Memory Limit: 65536/32768 K (Java/Others)  
Total Submission(s): 1408 Accepted Submission(s): 687  
**  
  





Problem Description




Jesus, what a great movie! Thousands of people are rushing to the cinema. However, this is really a tuff time for Joe who sells the film tickets. He is wandering when could he go back home as early as possible.  
A good approach, reducing the total time of tickets selling, is let adjacent people buy tickets together. As the restriction of the Ticket Seller Machine, Joe can sell a single ticket or two adjacent tickets at a time.  
Since you are the great JESUS, you know exactly how much time needed for every person to buy a single ticket or two tickets for him/her. Could you so kind to tell poor Joe at what time could he go back home as early as possible? If so, I guess Joe would full of appreciation for your help.










Input




There are N(1<=N<=10) different scenarios, each scenario consists of 3 lines:  
1) An integer K(1<=K<=2000) representing the total number of people;  
2) K integer numbers(0s<=Si<=25s) representing the time consumed to buy a ticket for each person;  
3) (K-1) integer numbers(0s<=Di<=50s) representing the time needed for two adjacent people to buy two tickets together.










Output




For every scenario, please tell Joe at what time could he go back home as early as possible. Every day Joe started his work at 08:00:00 am. The format of time is HH:MM:SS am|pm.










Sample Input







2
2
20 25
40
1
8














Sample Output







08:00:40 am
08:00:08 am

















dp




状态转移方程为dp[i]=min(dp[i-1]+a[i],dp[i-2]+b[i])  dp[i]为第i个人买完票所花的最少时间。a[i]和b[i]分别为单独买票和两个人一起买票的时间。




因为调试语句没删掉和错把B[I]的下表认为是从1开始（实际应从2开始） WA了两发 3A








 ```c++

    
    #include <iostream>
    #include <cstdio>
    #include <algorithm>
    #include <cmath>
    #include <cstring>
    using namespace std;
    
    int n,k;
    const  int inf=99999999;
    const int N=2E3+5;
    bool am;
    int a[N],b[N],dp[N],hour,mini,sec;
    
    int main()
    {
    
        scanf("%d",&n);
        while ( n-- )
        {
            am = true;
            memset(a,0,sizeof(a));
            memset(b,0,sizeof(b));
            hour = 8;
            mini = 0;
          //  cout<<"hour1:"<<hour<<endl;
            for ( int i = 0 ; i < N ; i++ )
                dp[i] = 0;
         //   cout<<"hour2:"<<hour<<endl;
    
            scanf("%d",&k);
            for ( int i = 1; i <= k ; i++ )
                scanf("%d",&a[i]);
            for ( int i = 2 ; i <= k ; i++ )
                scanf("%d",&b[i]);
            dp[1] = a[1];
            for ( int i = 2; i <= k ; i++ )
                dp[i] = min(dp[i-1]+a[i],dp[i-2]+b[i]);
        //    printf("%d\n",dp[k]);
            sec = dp[k];
         //   hour = 8;
       //  cout<<"hour:"<<hour<<endl;
            while (sec>=3600)
            {
                sec = sec - 3600 ;
                hour++;
            }
            while (sec>=60)
            {
                sec = sec - 60 ;
                mini++;
            }
            if ( hour>12 )
            {
                am = false;
                hour = hour - 12;
            }
            if ( hour<10 )
                cout<<"0";
            cout<<hour<<":";
            if ( mini<10 )
                cout<<"0";
            cout<<mini<<":";
            if ( sec<10 )
                cout<<"0";
            if ( am )
                cout<<sec<<" am"<<endl;
            else cout<<sec<<" pm"<<endl;
        }
        return 0;
    }

```

