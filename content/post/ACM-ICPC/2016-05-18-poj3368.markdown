---
author: 111qqz
date: 2016-05-18 07:47:48+00:00
draft: false
title: poj 3368 Frequent values （暴力+rmq，分类讨论）
type: post
url: /2016/05/poj3368/
categories:
- ACM
tags:
- brute force
- rmq
- 分类讨论
---

[poj 3368 题目链接](http://poj.org/problem?id=3368)

题意：给出n个非减的数a[i],求区间[l,r]中出现次数最多的数的出现的次数。

思路：由于数列非减，那么相等的数一定相邻。很容易系哪个到构造另一个数组f[i]，表示从当前位置向左边延伸最多延伸几个相等的数。

f[i] = f[i-1] + 1 (iff a[i]==a[i-1])

然后查询的时候。

如果直接用ST算法查询rmq的话。。。

可能产生错误结果，原因是f[i]是从左边1到i这段连续区间里当前数出现的次数。

但是查询区间不一定是从1开始，所以查询区间内的第一段连续相等的数可能不完整。。。想了半天。。最后看了题解，发现是这部分暴力来搞。但是如果所有数列中所有数都相等，这样的复杂度就达到了o(1E10)?。。。2s应该过不了吧。。。但是所有题解都是这么写的。。。不是很懂。。。所谓的面向数据编程？



不过还是有启示的：**分类讨论的思想。一道题未必用一种算法解。如果因为一小部分导致某算法不能用的话，不妨暴力搞之然后再用这个算法。**






 

    
    /* ***********************************************
    Author :111qqz
    Created Time :2016年05月18日 星期三 13时44分47秒
    File Name :code/poj/3368.cpp
    ************************************************ */
    
    #include <cstdio>
    #include <cstring>
    #include <iostream>
    #include <algorithm>
    #include <vector>
    #include <queue>
    #include <set>
    #include <map>
    #include <string>
    #include <cmath>
    #include <cstdlib>
    #include <ctime>
    #define fst first
    #define sec second
    #define lson l,m,rt<<1
    #define rson m+1,r,rt<<1|1
    #define ms(a,x) memset(a,x,sizeof(a))
    typedef long long LL;
    #define pi pair < int ,int >
    #define MP make_pair
    
    using namespace std;
    const double eps = 1E-8;
    const int dx4[4]={1,0,0,-1};
    const int dy4[4]={0,-1,1,0};
    const int inf = 0x3f3f3f3f;
    const int N=1E5+7;
    int n;
    pi a[N];
    int q;
    int dp[N][20];
    
    void init_rmq()
    {
        for ( int i =  1 ;i  <= n ; i++) dp[i][0] = a[i].sec;
    
        for ( int j = 1  ; (1<<j)<= n ; j++)
    	for ( int i = 1 ; i + (1<<j)-1 <= n ; i++)
    	    dp[i][j] = max(dp[i][j-1],dp[i+(1<<(j-1))][j-1]);
    }
    
    int rmq_max(int l,int r)
    {
        if (l>r) return 0; //因为l+1可能大于b
        int k = 0  ;
        while (1<<(k+1)<=(r-l+1)) k++;
        return max(dp[l][k],dp[r-(1<<k)+1][k]);
    
    }
    int main()
    {
    	#ifndef  ONLINE_JUDGE 
    	freopen("code/in.txt","r",stdin);
      #endif
    
    	while (scanf("%d",&n)!=EOF)
    	{
    	    ms(dp,0);
    	    ms(a,0);
    
    	    if (n==0) break;
    	    scanf("%d",&q);
    	    for ( int i = 1 ; i <= n ; i++)
    	    {
    		int x;
    		scanf("%d",&x);
    		a[i]=make_pair(x,1);
    	    }
    	    a[n+1].fst = inf;
    
    	    for ( int i = 2 ; i <= n ; i++)
    	    {
    		if (a[i].fst==a[i-1].fst)
    		{
    		    a[i].sec = a[i-1].sec+1;
    		}
    	    }
    
    //	    for ( int i = 1 ;i  <= n ; i++) cout<<a[i].fst<<" "<<a[i].sec<<endl;
    
    	    init_rmq();
    	    while (q--)
    	    {
    		int l,r;
    		scanf("%d %d",&l,&r);
    		int tmp = l;
    		while (tmp<r&&a[tmp].fst==a[tmp+1].fst) tmp++; //mdzz，最坏复杂度1E10啊。。。题解都是面向数据编程吗
    		int ans = rmq_max(tmp+1,r);
    //		cout<<"tmp-l:"<<tmp-l+1<<endl;
    		ans = max(ans,tmp+1-l);
    		printf("%d\n",ans);
    	    }
    
    	}
    
      #ifndef ONLINE_JUDGE  
      fclose(stdin);
      #endif
        return 0;
    }
    





