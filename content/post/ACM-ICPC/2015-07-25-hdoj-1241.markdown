---
author: 111qqz
date: 2015-07-25 07:47:00+00:00
draft: false
title: hdoj 1241 Oil Deposits  (dfs)
type: post
url: /2015/07/hdoj-1241/
categories:
- ACM
tags:
- dfs
---

# Oil Deposits




**Time Limit: 2000/1000 MS (Java/Others) Memory Limit: 65536/32768 K (Java/Others)  
Total Submission(s): 17683 Accepted Submission(s): 10172  
**  
  





Problem Description




The GeoSurvComp geologic survey company is responsible for detecting underground oil deposits. GeoSurvComp works with one large rectangular region of land at a time, and creates a grid that divides the land into numerous square plots. It then analyzes each plot separately, using sensing equipment to determine whether or not the plot contains oil. A plot containing oil is called a pocket. If two pockets are adjacent, then they are part of the same oil deposit. Oil deposits can be quite large and may contain numerous pockets. Your job is to determine how many different oil deposits are contained in a grid.










Input




The input file contains one or more grids. Each grid begins with a line containing m and n, the number of rows and columns in the grid, separated by a single space. If m = 0 it signals the end of the input; otherwise 1 <= m <= 100 and 1 <= n <= 100. Following this are m lines of n characters each (not counting the end-of-line characters). Each character corresponds to one plot, and is either `*', representing the absence of oil, or `@', representing an oil pocket.










Output




For each grid, output the number of distinct oil deposits. Two different pockets are part of the same oil deposit if they are adjacent horizontally, vertically, or diagonally. An oil deposit will not contain more than 100 pockets.










Sample Input







1 1
*
3 5
*@*@*
**@**
*@*@*
1 8
@@****@*
5 5 
****@
*@@*@
*@**@
@@@*@
@@**@
0 0 














Sample Output







0
1
2
2

















因为题目中要求求出所有的解,所有很容易想到dfs




枚举grid,当遇到一个油田的时候,就dfs把与他相邻的都标记上.




一遍ac





 ```c++

    
    /*************************************************************************
    	> File Name: code/2015summer/searching/L.cpp
    	> Author: 111qqz
    	> Email: rkz2013@126.com 
    	> Created Time: 2015年07月25日 星期六 15时29分28秒
     ************************************************************************/
    
    #include<iostream>
    #include<iomanip>
    #include<cstdio>
    #include<algorithm>
    #include<cmath>
    #include<cstring>
    #include<string>
    #include<map>
    #include<set>
    #include<queue>
    #include<vector>
    #include<stack>
    #define y0 abc111qqz
    #define y1 hust111qqz
    #define yn hez111qqz
    #define j1 cute111qqz
    #define tm crazy111qqz
    #define lr dying111qqz
    using namespace std;
    #define REP(i, n) for (int i=0;i<int(n);++i)  
    typedef long long LL;
    typedef unsigned long long ULL;
    
    const int N = 1E2+5;
    char st[N][N];
    int m,n;
    bool v[N][N];
    int dx[8]={0,0,1,1,1,-1,-1,-1};
    int dy[8]={1,-1,0,-1,1,0,-1,1};
    void dfs(int x,int y)
    {
        v[x][y]=true;
        for ( int i = 0 ;  i < 8 ; i++ )
        {
    	  int newx=x+dx[i];
    	  int newy=y+dy[i];
    	  if (newx>=0&&newx<m&&newy>=0&&newy<n&&!v[newx][newy]&&st[newx][newy]=='@')
    	  {
    		dfs(newx,newy);
    	  }
        }
    }
    
    int main()
    {
        while (scanf("%d %d",&m,&n))
        {
    	  if (m==0) break;
    	  int ans = 0;
    	  memset(v,false,sizeof(v));
    	  for (int i = 0 ; i < m ; i++ )
    		scanf("%s",st[i]);
    	  for ( int i = 0 ;  i  < m ; i++ )
    	  {
    		for ( int  j = 0 ; j < n ; j++)
    		{
    		    if (st[i][j]=='@'&&!v[i][j])
    		    {
    			  ans++;
    			  dfs(i,j);
    		    }
    		}
    	  }
        queue<int>q;
        stack<int>s;
        
    	  cout<<ans<<endl;
        }
    	return 0;
    }
    

```c++

