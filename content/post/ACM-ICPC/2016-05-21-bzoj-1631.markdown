---
author: 111qqz
date: 2016-05-21 13:09:57+00:00
draft: false
title: 'BZOJ 1631: [Usaco2007 Feb]Cow Party (SPFA)'
type: post
url: /2016/05/bzoj-1631/
categories:
- ACM
tags:
- spfa
- 最短路
---




## 1631: [Usaco2007 Feb]Cow Party


Time Limit: 5 Sec  Memory Limit: 64 MB
Submit: 670  Solved: 493
[[Submit](http://www.lydsy.com/JudgeOnline/submitpage.php?id=1631)][[Status](http://www.lydsy.com/JudgeOnline/problemstatus.php?id=1631)][[Discuss](http://www.lydsy.com/JudgeOnline/bbs.php?id=1631)]


## Description







    农场有N(1≤N≤1000)个牛棚，每个牛棚都有1只奶牛要参加在X牛棚举行的奶牛派对．共有M(1≤M≤100000)条单向路连接着牛棚，第i条踣需要Ti的时间来通过．牛们都很懒，所以不管是前去X牛棚参加派对还是返回住所，她们都采用了用时最少的路线．那么，用时最多的奶牛需要多少时间来回呢？







## Input






第1行:三个用空格隔开的整数.

第2行到第M+1行,每行三个用空格隔开的整数:Ai, Bi,以及Ti.表示一条道路的起点,终点和需要花费的时间.






## Output






唯一一行:一个整数: 所有参加聚会的奶牛中,需要花费总时间的最大值.






## Sample Input




4 8 2
1 2 4
1 3 2
1 4 7
2 1 1
2 3 5
3 1 2
3 4 4
4 2 3





## Sample Output




10





## HINT






样例说明:
共有4只奶牛参加聚会,有8条路,聚会位于第2个农场.
第4只奶牛可以直接到聚会所在地(花费3时间),然后返程路线经过第1和第3个农场(花费7时间),总共10时间.




思路：想了一下。。因为要知道每个点到x的最短距离。。。以及反过来。。

单向很容易知道。。。以x点为起点做一遍spfa,那么x到每个点的最短距离就知道了。。

那么反过来怎么办呢？

我的做法是反向建边再跑一遍spfa...

1A,开心。





 

    
    /* ***********************************************
    Author :111qqz
    Created Time :2016年04月04日 星期一 19时36分38秒
    File Name :code/bzoj/1631.cpp
    ************************************************ */
    
    #include <cstdio>
    #include <cstring>
    #include <iostream>
    #include <algorithm>
    #include <vector>
    #include <queue>
    #include <set>
    #include <map>
    #include <string>
    #include <cmath>
    #include <cstdlib>
    #include <ctime>
    #define fst first
    #define sec second
    #define lson l,m,rt<<1
    #define rson m+1,r,rt<<1|1
    #define ms(a,x) memset(a,x,sizeof(a))
    typedef long long LL;
    #define pi pair < int ,int >
    #define MP make_pair
    
    using namespace std;
    const double eps = 1E-8;
    const int dx4[4]={1,0,0,-1};
    const int dy4[4]={0,-1,1,0};
    const int inf = 0x3f3f3f3f;
    const int N=1E3+7;
    const int M=1E5+7;
    int n,m,X;
    
    vector < pi > edge[N];
    bool inq[N];
    int d1[N],d2[N];
    int ans;
    struct road
    {
        int u,v,w;
    }r[M];
    
    void spfa( int s,int *d)
    {
        queue<int>q;
        q.push(s);
        inq[s] = true;
        d[s] = 0 ;
    
        while (!q.empty())
        {
    	int u = q.front();
    	q.pop();
    	inq[u] = false;
    
    	int siz  = edge[u].size();
    
    	for ( int i = 0 ; i < siz ; i++)
    	{
    	    int v = edge[u][i].fst;
    	    
    	    if (d[v]>d[u] + edge[u][i].sec)
    	    {
    		d[v] = d[u] + edge[u][i].sec;
    
    		if (inq[v]) continue;
    
    		inq[v] = true;
    		q.push(v);
    	    }
    	}
        }
        
    
    }
    int main()
    {
    	#ifndef  ONLINE_JUDGE 
    	freopen("code/in.txt","r",stdin);
      #endif
    
    	scanf("%d%d%d",&n,&m,&X);
    	for ( int i = 1 ; i <= m ; i++)
    	{
    	    int x,y,z;
    	    scanf("%d%d%d",&x,&y,&z);
    	    r[i].u = x;
    	    r[i].v = y;
    	    r[i].w = z;
    
    	    edge[x].push_back(MP(y,z));  //单向边
    	}
    
    	ans = 0 ;
    	ms(inq,false);
    	ms(d1,0x3f);
    	spfa(X,d1);
    
    	for ( int i = 1 ; i <= n ; i++) edge[i].clear(); //重新反向连边再跑一次。
    
    	for ( int i = 1 ; i <= m ; i++)
    	{
    	    edge[r[i].v].push_back(MP(r[i].u,r[i].w));
    	}
    	ms(inq,false);
    	ms(d2,0x3f);
    	spfa(X,d2);
    
    	int ans = -1;
    	for ( int i = 1 ; i <= n ; i++) ans = max(ans,d1[i]+d2[i]);
    
    	printf("%d\n",ans);
    
      #ifndef ONLINE_JUDGE  
      fclose(stdin);
      #endif
        return 0;
    }
    



