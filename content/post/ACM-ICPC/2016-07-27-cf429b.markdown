---
author: 111qqz
date: 2016-07-27 19:05:42+00:00
draft: false
title: codeforces 429 B. Working out (dp)
type: post
url: /2016/07/cf429b/
categories:
- ACM
tags:
- dp
---

[cf429 b 题目链接](http://codeforces.com/problemset/problem/429/B)
题意：

n*m个格子，每个格子有一个人value a[i][j]>0，连个人，一个从左上角到右下角，每次只能向下或者向右移动，一个从左下到右上，每次只能向上或者向右移动，现在要求两个人恰好相遇一次，相遇点的a不算数，问在满足这样的条件下使得两个人的a最大。。。**（很坑的一点是。。这里相遇并不考虑时间。。就是说，不在同一时间都到达过某一格子，也认为相遇。所以我认为，题目含义更准确的说法是，路径只有一个交点）**

思路：很巧妙。先预处理4个二维数组，分别表示点(i,j）到四个角落的最大值。（这个处理很容易，类似数字三角形）

然后枚举相遇的点，对于确定的相遇的点(x,y)，我们可以认为是四个角落各连一条线到点(i,j)

由于只能相遇一次，所以连接方式只有两种情况。

 

    
    /* ***********************************************
    Author :111qqz
    Created Time :2016年07月28日 星期四 02时13分58秒
    File Name :code/cf/429B.cpp
     ************************************************ */
    
    #include <cstdio>
    #include <cstring>
    #include <iostream>
    #include <algorithm>
    #include <vector>
    #include <queue>
    #include <set>
    #include <map>
    #include <string>
    #include <cmath>
    #include <cstdlib>
    #include <ctime>
    #define fst first
    #define sec second
    #define lson l,m,rt<<1
    #define rson m+1,r,rt<<1|1
    #define ms(a,x) memset(a,x,sizeof(a))
    typedef long long LL;
    #define pi pair < int ,int >
    #define MP make_pair
    
    using namespace std;
    const double eps = 1E-8;
    const int dx4[4]={1,0,0,-1};
    const int dy4[4]={0,-1,1,0};
    const int inf = 0x3f3f3f3f;
    const int N=1E3+7;
    int n,m;
    LL a[N][N];
    LL dp[5][N][N];
    int main()
    {
    #ifndef  ONLINE_JUDGE 
        freopen("code/in.txt","r",stdin);
    #endif
        cin>>n>>m;
        ms(dp,0);
        //	cout<<"dp[1][1][1]"<<dp[1][1][1]<<endl;
        for ( int i = 1 ; i <= n ; i++)
    	for ( int j = 1 ; j <= m ; j++)
    	    scanf("%lld",&a[i][j]);
    
        for ( int i = 1 ;i  <= n ; i++)  //1 --left up
    	for ( int j = 1 ; j <= m ; j++)
    	    dp[1][i][j] = max(dp[1][i-1][j],dp[1][i][j-1]) + a[i][j];
    
        for ( int i = 1 ;i <= n ; i++)  //2 -- right up
    	for ( int j = m ; j >= 1 ;j--)
    	    dp[2][i][j] = max(dp[2][i-1][j],dp[2][i][j+1]) + a[i][j];
    
        for ( int i = n ; i >=1 ; i--) //3 -- left down
    	for ( int j = 1 ; j <= m ; j++)
    	    dp[3][i][j] = max(dp[3][i+1][j],dp[3][i][j-1]) + a[i][j];
    
    
        for ( int i = n ; i >= 1 ; i--)  //4 -- right down
    	for ( int j =  m ; j >= 1 ; j--)
    	    dp[4][i][j] = max(dp[4][i+1][j],dp[4][i][j+1]) + a[i][j];
    
    
        for ( int i = 1 ; i <= n ; i++) 
    	for ( int k = 1 ; k <= 4 ; k++)
    	    dp[k][i][0]=dp[k][i][m+1]=-inf;
    
        for ( int j = 1 ; j <= m ; j++)
    	for ( int k = 1 ; k <=  4 ; k++)
    	    dp[k][0][j]=dp[k][n+1][j]=-inf;
        //保护好边界。
    
    	LL ans = 0 ;
        for ( int i = 1 ; i <= n ; i++)
    	for ( int j = 1 ; j <= m ;j++ )
    	{
    	    LL  tmp;
    	    tmp = dp[1][i-1][j] + dp[4][i+1][j] + dp[3][i][j-1] + dp[2][i][j+1];
    	    ans = max(tmp,ans);
    	    tmp = dp[1][i][j-1] + dp[4][i][j+1] + dp[3][i+1][j] + dp[2][i-1][j];
    	    ans = max(tmp,ans);
    	}
        cout<<ans<<endl;
    
    #ifndef ONLINE_JUDGE  
        fclose(stdin);
    #endif
        return 0;
    }
    







