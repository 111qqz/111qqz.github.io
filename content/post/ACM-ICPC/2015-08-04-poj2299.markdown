---
author: 111qqz
date: 2015-08-04 13:13:00+00:00
draft: false
title: poj 2299 Ultra-QuickSort  （树状数组＋离散化）
type: post
url: /2015/08/poj2299/
categories:
- ACM
tags:
- 树状数组
- 离散化
---

**这道题可以总结的地方不少。**


**１：对于一组乱序数列，每次只能交换相邻元素，达到有序交换的次数就是原数列中你逆序对的个数。**




　　cf上好像总喜欢出这个题。。。我印象中就出现三次了。。。。。




**２：原始数组a[i]和树状数组的t[i]的对应问题（？？？存在疑问。。。应该只是这道题，而不是一般规律！）**





　　这道题n是５０００００，如果直接开数组是可以开得下的，不需要离散化。**但是树状数组的下标对应的是原始数组的值！**也就是t[i]的下表最大可能为９９９，９９９，９９９　！　显然存不下，需要离散化。




**３：学习了离散化的又一种写法。
**









    
    /*************************************************************************
    	> File Name: code/poj/2299.cpp
    	> Author: 111qqz
    	> Email: rkz2013@126.com 
    	> Created Time: 2015年08月04日 星期二 12时27分32秒
     ************************************************************************/
    
    #include<iostream>
    #include<iomanip>
    #include<cstdio>
    #include<algorithm>
    #include<cmath>
    #include<cstring>
    #include<string>
    #include<map>
    #include<set>
    #include<queue>
    #include<vector>
    #include<stack>
    #define y0 abc111qqz
    #define y1 hust111qqz
    #define yn hez111qqz
    #define j1 cute111qqz
    #define tm crazy111qqz
    #define lr dying111qqz
    using namespace std;
    #define REP(i, n) for (int i=0;i<int(n);++i)  
    typedef long long LL;
    typedef unsigned long long ULL;
    const int inf = 0x7fffffff;
    const int N=5E5+7;
    int n;
    int t[N];
    int ref[N];
    
    struct Q
    {
        int val,id;
    }q[N];
    
    
    bool cmp(Q a,Q b)
    {
        if (a.val<b.val) return true;
        return false;
    }
    int lowbit( int x)
    {
        return x&(-x);
    }
    void update ( int x,int c)
    {
        for ( int i = x ; i < N ; i = i + lowbit(i))
        {
    	t[i] = t[i] + c;
        }
    }
    LL Sum( int x)
    {
        LL res = 0;
        for ( int i = x; i >= 1 ; i = i - lowbit(i))
        {
    	res = res + t[i];
        }
        return res;
    }
    int main()
    {
        while (~scanf("%d",&n)&&n)
        {
    	memset(t,0,sizeof(t));
    	for ( int i = 1 ; i  <= n ; i++ )
    	{
    	    scanf("%d",&q[i].val);  //离散化的时候相对大小不能打乱
    	    q[i].id = i;
    	}
    	sort(q+1,q+n+1,cmp);
    	for ( int i = 1 ; i <= n ; i++ )
    	{
    	    ref[q[i].id] = i;
    	}
    	LL ans = 0;
    	for ( int i = 1 ; i <= n ; i++ )
    	{
    	    update(ref[i],1);
    	    ans = ans + i-Sum(ref[i]);  
    	  //  cout<<"ans:"<<ans<<endl;
    	    
    	}
    	cout<<ans<<endl;
        }
    	return 0;
    }
    





