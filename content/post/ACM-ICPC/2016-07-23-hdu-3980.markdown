---
author: 111qqz
date: 2016-07-23 08:50:39+00:00
draft: false
title: hdu 3980 Paint Chain (sg函数，环形串取石子)
type: post
url: /2016/07/hdu-3980/
categories:
- ACM
tags:
- sg函数
- 博弈论
---

[hdu 3980 题目链接](http://acm.hdu.edu.cn/showproblem.php?pid=3980)
题意：一个有n个石子的环形串，初始没有被涂颜色，两个人轮流，涂连续m个没有被涂色的石子，不能操作的人为负。问先手是否有必赢策略。

思路：和hdu2999很像。。所不同的是。。。那道题是线型的珠子。。。这道题是环型的数字。。。

然而我们机智得发现。。。环形的任意涂一次。。就变成了线型的啊orz。。。

所以先随便取一次，然后剩下的n-m个按照线型串的方法搞，划分区间即可。

由于先随便取了一次，所以和线型的交换输赢的结论。。。

以及。。要特判一次都不能取的情况。。。2A









 

    
    /* ***********************************************
    Author :111qqz
    Created Time :2016年07月23日 星期六 15时53分18秒
    File Name :code/hdu/3980.cpp
     ************************************************ */
    
    #include <cstdio>
    #include <cstring>
    #include <iostream>
    #include <algorithm>
    #include <vector>
    #include <queue>
    #include <set>
    #include <map>
    #include <string>
    #include <cmath>
    #include <cstdlib>
    #include <ctime>
    #define fst first
    #define sec second
    #define lson l,m,rt<<1
    #define rson m+1,r,rt<<1|1
    #define ms(a,x) memset(a,x,sizeof(a))
    typedef long long LL;
    #define pi pair < int ,int >
    #define MP make_pair
    
    using namespace std;
    const double eps = 1E-8;
    const int dx4[4]={1,0,0,-1};
    const int dy4[4]={0,-1,1,0};
    const int inf = 0x3f3f3f3f;
    const int N=1E3+7;
    int n,m;
    bool vis[N];
    int sg[N];
    
    void sg_init(int m)
    {
        ms(sg,0);
        for (  int i = 1 ; i < N ; i++)
        {
    	ms(vis,false);
    
    	int tmp = m;
    	tmp = i-m;
    	for ( int j = 0 ; tmp-j>=j ; j++)
    	    vis[sg[j]^sg[tmp-j]] = true;
    
    	for ( int k = 0 ; ;k++)
    	    if (!vis[k])
    	    {
    		sg[i] = k;
    		break;
    	    }
        }
    
    }
    int main()
    {
    #ifndef  ONLINE_JUDGE 
        freopen("code/in.txt","r",stdin);
    #endif
    
    
    
        int T;
        cin>>T;
        int cas = 0 ;
        while (T--)
        {
    	scanf("%d%d",&n,&m);
    	if (n<m) //特判一次都取不了的情况
    	{
    	    printf("Case #%d: abcdxyzk\n",++cas);
    	    continue;
    	}
    	sg_init(m);	    
    
    	n-=m; //环型的串任意取一次就变成了线型的。。。。
        
    	if (!sg[n]) //第一次不算在里面，所以输赢和线型的相反。。。
    	{
    	    printf("Case #%d: aekdycoin\n",++cas);
    	}
    	else
    	{
    	    printf("Case #%d: abcdxyzk\n",++cas);
    	}
        }
    
    #ifndef ONLINE_JUDGE  
        fclose(stdin);
    #endif
        return 0;
    }
    



