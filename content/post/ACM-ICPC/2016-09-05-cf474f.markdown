---
author: 111qqz
date: 2016-09-05 13:42:23+00:00
draft: false
title: codeforces 474 F. Ant colony (线段树求gcd+统计区间中某数出现的次数的经典做法)
type: post
url: /2016/09/cf474f/
categories:
- ACM
tags:
- gcd
- number theory
- 区间计数
- 线段树
---

[题目链接](http://codeforces.com/problemset/problem/474/F)

题意：给出n个数，m个查询，每组查询一个区间[l,r]，问[l,r]中会被吃掉多少个（区间[l,r]中的数只有当其是其他所有数的因数时才不会被吃掉,**顺便问一句。。a divide b 是 a除b,也就是b除以a,b/a的意思嘛23333）**

思路：我们知道，不会被吃掉的数其实就是区间[l,r]中所有数的gcd,求gcd可以很容易用线段树办到。。。关键是还要统计该区间中等于gcd的数有多少个。

并不会做。

大概有两种做法。。。？

一种是基哥@clq11111说的，将询问离线，然后从小到大排序插入，询问区间中等于x转化成询问区间中小于等于x的，和询问区间中小于等于x-1的，做差即为所求。

第二种办法是题解的讨论区部分的：

[![Screenshot from 2016-09-05 21-04-42](https://111qqz.com/wordpress/wp-content/uploads/2016/09/Screenshot-from-2016-09-05-21-04-42.png)
](https://111qqz.com/wordpress/wp-content/uploads/2016/09/Screenshot-from-2016-09-05-21-04-42.png)

想了一下感觉很有道理。。。

这种做法是说：建一个val和该val对应下标的pair，然后排序（pair默认按照val第一关键字，pair第二关键字升序排）

排序之后，val相同的都在一起了，我们只需要找一段最大的区间，使得这段区间中的第二关键字在[l,r]范围内，然后这段区间的长度就是[l,r]区间中该数出现的次数.

找这段最大的区间，两次二分就好。说起来二分得到区间这个做法之前写过两次。。。之前都是手写的。。。这次用了STL。

具体写法参见代码

1A开心哈哈哈。



    
    /* ***********************************************
    Author :111qqz
    Created Time :Mon 05 Sep 2016 08:37:57 PM CST
    File Name :code/cf/problem/474F.cpp
    ************************************************ */
    #include <cstdio>
    #include <cstring>
    #include <iostream>
    #include <algorithm>
    #include <vector>
    #include <queue>
    #include <set>
    #include <map>
    #include <string>
    #include <cmath>
    #include <cstdlib>
    #include <ctime>
    #define fst first
    #define sec second
    #define lson l,m,rt<<1
    #define rson m+1,r,rt<<1|1
    #define ms(a,x) memset(a,x,sizeof(a))
    typedef long long LL;
    #define pi pair < int ,int >
    #define MP make_pair
    using namespace std;
    const double eps = 1E-8;
    const int dx4[4]={1,0,0,-1};
    const int dy4[4]={0,-1,1,0};
    const int inf = 0x3f3f3f3f;
    const int N=1E5+7;
    int n;
    pi a[N];
    int tree[N<<2];
    int gcd( int a,int b)
    {
        if (a%b==0) return b;
        return gcd(b,a%b);
    }
    void PushUp( int rt)
    {
        tree[rt] = gcd(tree[rt<<1],tree[rt<<1|1]);
    }
    void build(int l,int r,int rt)
    {
        if (l==r)
        {
    	tree[rt] = a[l].fst;
    	return;
        }
        int m = (l+r)>>1;
        build(lson);
        build(rson);
        PushUp(rt);
    }
    int query(int L,int R,int l,int r,int rt)
    {
        if (L<=l&&r<=R) return tree[rt];
        int m = (l+r)>>1;
        int ret=-1;
        if (L<=m)
        {
    	ret = query(L,R,lson);
        }
        if (R>=m+1)
        {
    	if (ret==-1) ret = query(L,R,rson);
    	else ret = gcd(ret,query(L,R,rson));
        }
        return ret;
    }
    int main()
    {
    	#ifndef  ONLINE_JUDGE 
    	freopen("code/in.txt","r",stdin);
      #endif
    	cin>>n;
    	for ( int i = 1 ; i <= n ; i++)
    	{
    	    int x;
    	    scanf("%d",&x);
    	    a[i]=make_pair(x,i);
    	}
    	build(1,n,1);
    	sort(a+1,a+n+1);
    	int q;
    	cin>>q;
    	while (q--)
    	{
    	    int x,y;
    	    scanf("%d%d",&x,&y);
    	    int GCD = query(x,y,1,n,1);
    	    int upper = upper_bound(a+1,a+n+1,make_pair(GCD,y))-(a+1);
    	    int lower = lower_bound(a+1,a+n+1,make_pair(GCD,x))-(a+1);
    	    int cnt = upper-lower;
    	    printf("%d\n",y-x+1-cnt);
    	}
      #ifndef ONLINE_JUDGE  
      fclose(stdin);
      #endif
        return 0;
    }
    







