---
author: 111qqz
date: 2016-07-27 05:12:10+00:00
draft: false
title: hdu 2084  数塔 (基础dp)
type: post
url: /2016/07/hdu-2084/
categories:
- ACM
tags:
- dp
---

[hdu2084题目链接](http://acm.hdu.edu.cn/showproblem.php?pid=2084)

题意：dp入门题。。。数字三角形。。

思路：

昨天看mit公开课。。。讲到dp的精髓是sub-problem+ reuse...

为什么自底向上呢。。。

初始化dp[n][i] = a[n][i]其实是在处理只有最后一行的子问题。。。

**需要特别强调的是。。处于某个子问题的时候。。。其他部分就好像不存在一样。。。**

每一个点只能向下或者向右下两条路可走。。。

那么对于这一点的最大值。。。一定是取后来可走的两点的最大值加上自身。。。




 

    
    /* ***********************************************
    Author :111qqz
    Created Time :2016年07月27日 星期三 12时56分28秒
    File Name :code/hdu/2084.cpp
    ************************************************ */
    
    #include <cstdio>
    #include <cstring>
    #include <iostream>
    #include <algorithm>
    #include <vector>
    #include <queue>
    #include <set>
    #include <map>
    #include <string>
    #include <cmath>
    #include <cstdlib>
    #include <ctime>
    #define fst first
    #define sec second
    #define lson l,m,rt<<1
    #define rson m+1,r,rt<<1|1
    #define ms(a,x) memset(a,x,sizeof(a))
    typedef long long LL;
    #define pi pair < int ,int >
    #define MP make_pair
    
    using namespace std;
    const double eps = 1E-8;
    const int dx4[4]={1,0,0,-1};
    const int dy4[4]={0,-1,1,0};
    const int inf = 0x3f3f3f3f;
    const int N=105;
    int n;
    int a[N][N];
    int dp[N][N];
    int main()
    {
    	#ifndef  ONLINE_JUDGE 
    	freopen("code/in.txt","r",stdin);
      #endif
    	int T;
    	cin>>T;
    	while (T--)
    	{
    	    scanf("%d",&n);
    	    ms(dp,0);
    	    for ( int i = 1 ; i <= n ; i++)
    		for ( int j = 1 ; j <= i ; j++)
    		    scanf("%d",&a[i][j]);
    
    	    for ( int i = 1 ; i <= n ; i++)
    		dp[n][i] = a[n][i];
    
    	    for ( int i  = n-1 ; i >=1 ; i--)
    		for ( int j = 1 ; j <= i ; j++)
    		    dp[i][j] = max(dp[i+1][j],dp[i+1][j+1]) + a[i][j];
    	    
    	    printf("%d\n",dp[1][1]);
    	}
    
      #ifndef ONLINE_JUDGE  
      fclose(stdin);
      #endif
        return 0;
    }
    




