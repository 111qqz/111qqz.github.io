---
author: 111qqz
date: 2016-06-02 12:44:26+00:00
draft: false
title: hdu 1853 Cyclic Tour (有向环覆盖，拆点，二分图最佳匹配，KM算法)
type: post
url: /2016/06/hdu-1853/
categories:
- ACM
tags:
- KM
- 二分图最佳匹配
- 拆点
---

[hdu 1853 题目链接](http://acm.hdu.edu.cn/showproblem.php?pid=1853)

题意：一个带权有向图，要求找出若干的环，满足每个点恰好在一个环里，并且环的权值和最小……问最小权值和。

思路：没有思路，不知道怎么处理环的问题。于是去群里问了下。正确做法是**拆点**。

如果有一条边i->j,那么就连一条i->j'的边。

正确性：


<blockquote>对于满足条件的环，每个点的入度和出度均为1，我们可以把每个点拆成入点和出点，那么也就是说一个入点对应一个出点，反之亦然，那么这个问题就变成了一个二分图匹配问题，</blockquote>




然后这道题有重边，2A.

又一次体会到了拆点的神奇。。。这个大概算是需要慢慢积累的技巧吧。。像辅助线一样的。。。

还有体会到了环的模型竟然也可以转化成二分图匹配，真是厉害==



    
    /* ***********************************************
    Author :111qqz
    Created Time :2016年06月02日 星期四 20时13分25秒
    File Name :code/hdu/1853.cpp
    ************************************************ */
    
    #include <cstdio>
    #include <cstring>
    #include <iostream>
    #include <algorithm>
    #include <vector>
    #include <queue>
    #include <set>
    #include <map>
    #include <string>
    #include <cmath>
    #include <cstdlib>
    #include <ctime>
    #define fst first
    #define sec second
    #define lson l,m,rt<<1
    #define rson m+1,r,rt<<1|1
    #define ms(a,x) memset(a,x,sizeof(a))
    typedef long long LL;
    #define pi pair < int ,int >
    #define MP make_pair
    
    using namespace std;
    const double eps = 1E-8;
    const int dx4[4]={1,0,0,-1};
    const int dy4[4]={0,-1,1,0};
    const int inf = 0x3f3f3f3f;
    const int N=205;
    int n,m;
    bool visx[N],visy[N];
    int link[N];
    int lx[N],ly[N];
    int slk[N];
    int w[N][N];
    
    
    bool find( int u)
    {
        visx[u] = true;
        for ( int v = 1 ; v <= n ; v++)
        {
    	if (visy[v]) continue;
    	int tmp = lx[u] + ly[v] - w[u][v];
    	if (tmp==0)
    	{
    	    visy[v] = true;
    
    	    if (link[v]==-1||find(link[v]))
    	    {
    		link[v] =  u;
    		return true;
    	    }
    	}else if (tmp<slk[v]) slk[v] = tmp;
        }
        return false;
    }
    int KM()
    {
        ms(lx,0xc0);
        ms(ly,0);
        ms(link,-1);
    
        for ( int i = 1 ; i <= n ; i++)
    	for ( int j = 1 ; j <= n ; j++)
    	    lx[i] = max(lx[i],w[i][j]);
        for ( int i = 1 ; i <= n ; i++) if (lx[i]==-inf-1) return -1; //?
    
        for ( int i = 1 ; i <= n ; i++)
        {
    	ms(slk,0x3f);
    	
    	while (1)
    	{
    	    ms(visx,false);
    	    ms(visy,false);
    
    	    if (find(i)) break;
    
    	    int d = inf;
    
    	    for ( int j = 1 ; j <= n ; j++)
    		if (!visy[j]&&slk[j]<d) d = slk[j];
    
    	    for ( int j = 1 ; j <= n ; j++)
    		if (visx[j]) lx[j]-=d;
    	    for ( int j = 1 ; j <= n ; j++)
    		if (visy[j]) ly[j]+=d ; else slk[j]-=d;
    	}
        }
        int res = 0 ;
    
        for ( int i  = 1 ; i <= n ; i++)
    	if (link[i]>-1) res += w[link[i]][i];
    
        return -res;
    
    }
    int main()
    {
    	#ifndef  ONLINE_JUDGE 
    	freopen("code/in.txt","r",stdin);
      #endif
    
    	while (scanf("%d%d",&n,&m)!=EOF)
    	{
    	    ms(w,0xc0);
    	    for ( int i = 1 ; i <= m ; i++)
    	    {
    		int u,v,cost;
    		scanf("%d%d%d",&u,&v,&cost);
    		w[u][v] =max(w[u][v],-cost); //会不会有重边。..果然有。
    	    }
    
    	    int ans = KM();
    	    printf("%d\n",ans);
    
    	}
    
    	
    
    
    
      #ifndef ONLINE_JUDGE  
      fclose(stdin);
      #endif
        return 0;
    }
    



