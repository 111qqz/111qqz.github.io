---
author: 111qqz
date: 2016-04-07 16:19:00+00:00
draft: false
title: 'BZOJ 1635: [Usaco2007 Jan]Tallest Cow 最高的牛 (差分序列（前缀和的逆）)'
type: post
url: /2016/04/bzoj-1635/
categories:
- ACM
tags:
- 前缀和
- 差分序列
---




## 1635: [Usaco2007 Jan]Tallest Cow 最高的牛


Time Limit: 5 Sec  Memory Limit: 64 MB
Submit: 472  Solved: 278
[[Submit](http://www.lydsy.com/JudgeOnline/submitpage.php?id=1635)][[Status](http://www.lydsy.com/JudgeOnline/problemstatus.php?id=1635)][[Discuss](http://www.lydsy.com/JudgeOnline/bbs.php?id=1635)]


## Description






FJ's N (1 <= N <= 10,000) cows conveniently indexed 1..N are standing in a line. Each cow has a positive integer height (which is a bit of secret). You are told only the height H (1 <= H <= 1,000,000) of the tallest cow along with the index I of that cow. FJ has made a list of R (0 <= R <= 10,000) lines of the form "cow 17 sees cow 34". This means that cow 34 is at least as tall as cow 17, and that every cow between 17 and 34 has a height that is strictly smaller than that of cow 17. For each cow from 1..N, determine its maximum possible height, such that all of the information given is still correct. It is guaranteed that it is possible to satisfy all the constraints.

有n(1 <= n <= 10000)头牛从１到n线性排列，每头牛的高度为h[i](1 <= i <= n),现在告诉你这里面的牛的最大高度为maxH,而且有r组关系，每组关系输入两个数字，假设为a和b,表示第a头牛能看到第b头牛，能看到的条件是a, b之间的其它牛的高度都严格小于min(h[a], h[b]),而h[b] >= h[a]






## Input






* Line 1: Four space-separated integers: N, I, H and R

* Lines 2..R+1: Two distinct space-separated integers A and B (1 <= A, B <= N), indicating that cow A can see cow B.






## Output






* Lines 1..N: Line i contains the maximum possible height of cow i.






## Sample Input




9 3 5 5
1 3
5 3
4 3
3 7
9 8


INPUT DETAILS:

There are 9 cows, and the 3rd is the tallest with height 5.





## Sample Output




5
4
5
3
4
4
5
5
5








[![选区_053](https://111qqz.com/wordpress/wp-content/uploads/2016/04/选区_053.png)
](https://111qqz.com/wordpress/wp-content/uploads/2016/04/选区_053.png)




[![选区_054](https://111qqz.com/wordpress/wp-content/uploads/2016/04/选区_054.png)
](https://111qqz.com/wordpress/wp-content/uploads/2016/04/选区_054.png)







差分序列大概就是前缀和的逆过程...?




这道题对于一堆关系（a,b） 要使得【a+1,b-1】中每个都严格小于a,b，但是又要尽可能大，所以令每个[a+1,b-1]每个数-1. 之前其实遇到过，以为是前缀和的第二种应用。但确切来说其实是前缀和的逆过程。。。叫差分序列？




注意去重。对于完全相同的，做一遍就好啦。所以要先排个序






 

    
    /* ***********************************************
    Author :111qqz
    Created Time :2016年04月07日 星期四 22时52分44秒
    File Name :code/bzoj/1635.cpp
    ************************************************ */
    
    #include <cstdio>
    #include <cstring>
    #include <iostream>
    #include <algorithm>
    #include <vector>
    #include <queue>
    #include <set>
    #include <map>
    #include <string>
    #include <cmath>
    #include <cstdlib>
    #include <ctime>
    #define fst first
    #define sec second
    #define lson l,m,rt<<1
    #define rson m+1,r,rt<<1|1
    #define ms(a,x) memset(a,x,sizeof(a))
    typedef long long LL;
    #define pi pair < int ,int >
    #define MP make_pair
    
    using namespace std;
    const double eps = 1E-8;
    const int dx4[4]={1,0,0,-1};
    const int dy4[4]={0,-1,1,0};
    const int inf = 0x3f3f3f3f;
    const int N=1E4+7;
    int n,i,mxh,r;
    int p[N];
    
    struct node
    {
        int a,b;
    
        bool operator < (node y)const
        {
    	if (a==y.a) return b<y.b;
    	return a<y.a;
        }
    }q[N];
    int main()
    {
    	#ifndef  ONLINE_JUDGE 
    	freopen("code/in.txt","r",stdin);
      #endif
    
    	ios::sync_with_stdio(false);
    	cin>>n>>i>>mxh>>r;
    	ms(p,0);
    	for  ( int i = 1 ; i <= r ; i++) 
    	{
    	    cin>>q[i].a>>q[i].b;
    	    if (q[i].a>q[i].b) swap(q[i].a,q[i].b);
    	}
    	sort(q+1,q+r+1);
    	for ( int i = 1 ;i <= r; i++)
    	{
    	    int a = q[i].a;
    	    int b = q[i].b;
    	    if (a==q[i-1].a&&b==q[i-1].b) continue;  //判重
    	    p[a+1]--;
    	    p[b]++;
    
    	}
    	for ( int i = 1 ; i <= n ; i++) p[i] = p[i] + p[i-1];
    	for ( int i = 1 ; i <= n ; i++) cout<<mxh+p[i]<<endl;
      #ifndef ONLINE_JUDGE  
      fclose(stdin);
      #endif
        return 0;
    }
    



