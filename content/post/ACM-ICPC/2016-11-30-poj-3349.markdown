---
author: 111qqz
date: 2016-11-30 06:30:56+00:00
draft: false
title: poj 3349 Snowflake Snow Snowflakes (利用hash分组)
type: post
url: /2016/11/poj-3349/
categories:
- ACM
tags:
- hash
---

题意：有n个雪花，每个雪花有６瓣，给出每一瓣的长度，问是否有两个雪花相同。（雪花相同的条件是：存在某个顺序使得两个雪花的每一瓣长度对应相等）

思路：一开始想到的是先最小表示法。。。然后hash。。。存set。。看set的大小。。。但是因为我是顺时针，逆时针都存了一次，那么如果有一个雪花顺时针和逆时针相同，就会出现错误的结果（虽然这个我应该判掉了。。。但是还是WA　orz）

归根结底我是没有搞定当hash相同的时候，如何判定这两个不是一组orz。

看了很多题解。。。（为什么大家这道题的代码都写得这么丑啊。。。。？

思路有：hash或者最小表示法，或者最小表示法＋hash

思路是，把六瓣的长度求和，作为hash的key值。。。

然后。。。只在key相同的里面找一样的。。。

其实是根据这个和分了组。。。

因为和相同的，未必雪花一样，但是雪花的一样的，和一定相同，极大的缩小了范围。

也让我对hash有了新的理解：

hash未必可以唯一确定某个值，但是可以帮助缩小范围。
 

    
    /* ***********************************************
    Author :111qqz
    Created Time :2016年11月29日 星期二 19时29分11秒
    File Name :code/poj/3349.cpp
    ************************************************ */
    
    #include <cstdio>
    #include <cstring>
    #include <iostream>
    #include <algorithm>
    #include <vector>
    #include <queue>
    #include <set>
    #include <map>
    #include <cmath>
    #include <cstdlib>
    #include <ctime>
    #define fst first
    #define sec second
    #define lson l,m,rt<<1
    #define rson m+1,r,rt<<1|1
    #define ms(a,x) memset(a,x,sizeof(a))
    typedef long long LL;
    #define pi pair < int ,int >
    #define MP make_pair
    
    using namespace std;
    const double eps = 1E-8;
    const int dx4[4]={1,0,0,-1};
    const int dy4[4]={0,-1,1,0};
    const int N=1e5+7;
    const int inf = 0x3f3f3f3f;
    int n;
    int a[N][6];
    const int prime = 19997; //素数
    vector<int>block[prime];
    void Hash( int val,int x)
    {
        val%=prime;
        block[val].push_back(x);
    }
    bool ok ( int x,int y) //两个雪花的id
    {
        for ( int i = 0 ;i < 6 ; i++)
        {
    	if (a[x][0]==a[y][i])
    	{
    	    for ( int j = 1 ; j < 6; j++)
    		if (a[x][j]!=a[y][(i+j)%6]) break;
    		else if (j==5) return true;
    
    	    for ( int j =1 ; j < 6 ; j++)
    		if (a[x][6-j]!=a[y][(i+j)%6]) break;
    		else if (j==5) return true;
    	}
        }
        return false;
    }
    bool check()
    {
        for ( int i = 0 ; i < prime ; i++)
        {
    	int siz = block[i].size();
    	for ( int j = 0 ; j < siz;  j++)
    	{
    	    for ( int k = j+1 ; k < siz;  k++)
    	    {
    		int x = block[i][j];
    		int y = block[i][k];
    		if (ok(x,y)) return true;
    	    }
    	}
        }
        return false;
    }
    int main()
    {
    	#ifndef  ONLINE_JUDGE 
    	freopen("code/in.txt","r",stdin);
      #endif
    
    	scanf("%d",&n);
    	for ( int i = 1; i <= n ; i++) 
    	{
    	    int sum = 0;
    	    for ( int j = 0 ; j < 6 ; j++) scanf("%d",&a[i][j]),sum += a[i][j];
    	    Hash(sum,i);
    	}
    	if (check())
    	    puts("Twin snowflakes found.");
    	else puts("No two snowflakes are alike.");
    
        
    
      #ifndef ONLINE_JUDGE  
      fclose(stdin);
      #endif
        return 0;
    }
    






