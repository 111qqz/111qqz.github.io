---
author: 111qqz
date: 2016-04-06 15:37:13+00:00
draft: false
title: 'BZOJ 1632: [Usaco2007 Feb]Lilypad Pond (BFS,dp)'
type: post
url: /2016/04/bzoj-1632/
categories:
- ACM
tags:
- bfs
- dp
- 计数问题
---




## 1632: [Usaco2007 Feb]Lilypad Pond


Time Limit: 5 Sec  Memory Limit: 64 MB
Submit: 496  Solved: 153
[[Submit](http://www.lydsy.com/JudgeOnline/submitpage.php?id=1632)][[Status](http://www.lydsy.com/JudgeOnline/problemstatus.php?id=1632)][[Discuss](http://www.lydsy.com/JudgeOnline/bbs.php?id=1632)]


## Description






Farmer John 建造了一个美丽的池塘，用于让他的牛们审美和锻炼。这个长方形的池子被分割成了 M 行和 N 列( 1 ≤ M ≤ 30 ; 1 ≤ N ≤ 30 ) 正方形格子的 。某些格子上有惊人的坚固的莲花，还有一些岩石，其余的只是美丽，纯净，湛蓝的水。 贝茜正在练习芭蕾舞，她从一个莲花跳跃到另一个莲花，当前位于一个莲花。她希望在莲花上一个一个的跳，目标是另一个给定莲花。她能跳既不入水，也不到一个岩石上。 令门外汉惊讶的是，贝茜的每次的跳跃像中国象棋的马一样：横向移动1，纵向移动2，或纵向移动1，横向移动2。贝茜有时可能会有多达8个选择的跳跃。 Farmer John 在观察贝茜的芭蕾舞联系，他意识到有时候贝茜有可能跳不到她想去的目的地，因为路上有些地方没有莲花。于是他想要添加几个莲花使贝茜能够完成任务。一贯节俭的Farmer John想添加最少数量的莲花。当然，莲花不能放在石头上。 请帮助Farmer John确定必须要添加的莲花的最少数量。在添加的莲花最少基础上，算出贝茜从起始点跳到目标点需要的最少的步数。最后，还要算出满足添加的莲花的最少数量时，跳跃最少步数的跳跃路径的条数。






## Input






第 1 行: 两个整数 M , N

第 2..M + 1 行:第 i + 1 行，第 i + 1 行 有 N 个整数，表示该位置的状态: 0 为水; 1 为莲花; 2 为岩石; 3 为贝茜开始的位置; 4 为贝茜要去的目标位置.






## Output






第 1 行: 一个整数: 需要添加的最少的莲花数. 如果无论如何贝茜也无法跳到，输出 -1.

第 2 行: 一个整数: 在添加的莲花最少基础上，贝茜从起始点跳到目标点需要的最少的步数。如果第1行输出-1，这行不输出。 第 3 行: 一个整数: 添加的莲花的最少数量时，跳跃步数为第2行输出的值的跳跃路径的条数 如果第1行输出-1，这行不输出。






## Sample Input




4 8
0 0 0 1 0 0 0 0
0 0 0 0 0 2 0 1
0 0 0 0 0 4 0 0
3 0 0 0 0 0 1 0





## Sample Output




2
6
2

输出说明

至少要添加2朵莲花，放在了'x'的位置。

0 0 0 1 0 0 0 0 0 0 0 1 0 0 0 0
0 x 0 0 0 2 0 1 0 0 0 0 0 2 0 1
0 0 0 0 x 4 0 0 0 0 x 0 x 4 0 0
3 0 0 0 0 0 1 0 3 0 0 0 0 0 1 0
贝茜至少要条6步，有以下两种方案

0 0 0 C 0 0 0 0 0 0 0 C 0 0 0 0
0 B 0 0 0 2 0 F 0 0 0 0 0 2 0 F
0 0 0 0 D G 0 0 0 0 B 0 D G 0 0
A 0 0 0 0 0 E 0 A 0 0 0 0 0 E 0











题意;一个n*m的maze,0是空，1是荷花，2是石头，出发地是3，每次跳象棋的马字步，只能走在荷花上，但是可以在水上添加荷花，问从3到4，在添加荷花数最少的前提下，添加的荷花数是多少，最少的步数是多少，以及在前面两个最少的前提下，有多少种路径。







思路：前两个好搞。。最后一个路径数难住我了。。没有写过这种。。一开始是想在bfs或者dfs一遍找路径，但是可能不同路径会经过相同的点，所以vis的标记会是个问题。。回溯呢。。？反正我是没搞出来。。




正解是用到了类似dp的思想。。具体可以看代码。




以及：一开始我是想添加一些节点的信息到结构体里。。但是发现那样写起来会很麻烦。。




所以这道题最好再开几个数组存储节点的额外信息。。。




还有路径数比较多，要记得开long long









 

    
    /* ***********************************************
    Author :111qqz
    Created Time :2016年04月06日 星期三 23时04分48秒
    File Name :code/bzoj/r1632.cpp
    ************************************************ */
    
    #include <cstdio>
    #include <cstring>
    #include <iostream>
    #include <algorithm>
    #include <vector>
    #include <queue>
    #include <set>
    #include <map>
    #include <string>
    #include <cmath>
    #include <cstdlib>
    #include <ctime>
    #define fst first
    #define sec second
    #define lson l,m,rt<<1
    #define rson m+1,r,rt<<1|1
    #define ms(a,x) memset(a,x,sizeof(a))
    typedef long long LL;
    #define pi pair < int ,int >
    #define MP make_pair
    
    using namespace std;
    const double eps = 1E-8;
    const int dx4[4]={1,0,0,-1};
    const int dy4[4]={0,-1,1,0};
    const int dx8[8]={2,2,-2,-2,1,1,-1,-1};
    const int dy8[8]={1,-1,1,-1,2,-2,2,-2};
    const int inf = 0x3f3f3f3f;
    const int N=50;
    int maze[N][N];
    bool vis[N][N];
    LL lh[N][N],d[N][N],num[N][N];
    
    int n ,m;
    int sx,sy,ex,ey;
    
    
    
    void bfs()
    {
        queue<int>x,y;
        x.push(sx);
        y.push(sy);
        vis[sx][sy] = true;
    
        while (!x.empty()&&!y.empty())
        {
    	int px = x.front();x.pop();
    	int py = y.front();y.pop();
    
    	for ( int i = 0  ;i  < 8 ; i++)
    	{
    	    int nx = px + dx8[i];
    	    int ny = py + dy8[i];
    
    	    if (nx<0||ny<0||nx>=n||ny>=m||maze[nx][ny]==2) continue;
    	    int tlh = lh[px][py] + (maze[nx][ny]==0);
    
    	    if (tlh<lh[nx][ny])
    	    {
    		lh[nx][ny] = tlh;
    		d[nx][ny] = d[px][py]+1;
    		num[nx][ny] = num[px][py];
    		if (vis[nx][ny]) continue;
    		vis[nx][ny] = true;
    		x.push(nx);
    		y.push(ny);
    	    }else if (tlh==lh[nx][ny])
    	    {
    		if (d[px][py]+1<d[nx][ny])
    		{
    		    d[nx][ny] = d[px][py] + 1;
    		    num[nx][ny] =num[px][py];
    		    if (vis[nx][ny]) continue;
    		    vis[nx][ny] = true;
    		    x.push(nx);
    		    y.push(ny);
    
    		}else if (d[px][py]+1==d[nx][ny])
    		{
    		    num[nx][ny]+=num[px][py];
    		    if (vis[nx][ny]) continue;
    		    vis[nx][ny] = true;
    		    x.push(nx);
    		    y.push(ny);
    		}
    	    }
    	}
    
    	vis[px][py] = false;
        }
    }
    int main()
    {
    	#ifndef  ONLINE_JUDGE 
    	freopen("code/in.txt","r",stdin);
      #endif
    
    	ios::sync_with_stdio(false);
    	cin>>n>>m;
    	for ( int i = 0  ; i <n ;  i++)
    	    for ( int j =  0 ; j < m;  j++)
    	    {
    		cin>>maze[i][j];
    		lh[i][j]=d[i][j] = inf;
    		if (maze[i][j]==3)
    		{
    		    sx = i;
    		    sy = j;
    		    lh[sx][sy] = 0;
    		    d[sx][sy]=0;
    		    num[sx][sy] = 1;
    		}
    		if (maze[i][j]==4)
    		{
    		    ex = i ;
    		    ey = j ;
    		}
    	    }
    
    	ms(vis,false);
    	bfs();
    
    	if (lh[ex][ey]==inf)
    	    cout<<-1<<endl;
    	else cout<<lh[ex][ey]<<endl<<d[ex][ey]<<endl<<num[ex][ey]<<endl;
    
      #ifndef ONLINE_JUDGE  
      fclose(stdin);
      #endif
        return 0;
    }
    



