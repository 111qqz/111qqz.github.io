---
author: 111qqz
date: 2016-09-22 09:36:22+00:00
draft: false
title: 【施工中】回文自动机学习笔记
type: post
url: /2016/09//
categories:
- ACM
tags:
- 回文自动机
---

是14年才被提出来的算法...
先%一下该算法的作者：[作者的codeforces页](http://codeforces.com/profile/MikhailRubinchik)

接下来，老规矩，放一波资料：

[参考博客1](http://adilet.org/blog/25-09-14/)
[codeforces上的讲解](http://codeforces.com/blog/entry/13959)



20171115 update:

emmmm，这篇是学习笔记是１６年９月写的。。。。一转眼13个月过去了啊。。

回文树，也叫回文自动机，简称PAM

学了SAM之后PAM简直是傻逼算法...

该算法时间和空间复杂度都是O(n)

这样的复杂度基于以下结论：

**长度为n的字符串的本质不同的回文串的数目不超过n**

**因此状态数开到和字符串长度一样就可以了orz**



len表示某个状态所表示的回文串的长度

cnt表示某个状态所表示的回文串的数量

构建PAM的算法仍然是增量算法，在某一时刻，本质不同的回文串的数量是sz-1 (sz标号从０开始，出去标号为０和标号为１的２个根)



唯一需要特别注意的是

**在构建完PAM之后，沿着回文链（类比后缀链)从底向上跑一遍得到的cnt，才是真正的cnt**

**在构建完PAM之后，沿着回文链（类比后缀链)从底向上跑一遍得到的cnt，才是真正的cnt**

**在构建完PAM之后，沿着回文链（类比后缀链)从底向上跑一遍得到的cnt，才是真正的cnt**

我的模板：


    
    /* ***********************************************
    Author :111qqz
    Created Time :2017年11月15日 星期三 20时31分58秒
    File Name :PAM.cpp
    ************************************************ */
    
    #include <bits/stdc++.h>
    #define PB push_back
    #define fst first
    #define sec second
    #define lson l,m,rt<<1
    #define rson m+1,r,rt<<1|1
    #define ms(a,x) memset(a,x,sizeof(a))
    typedef long long LL;
    #define pi pair < int ,int >
    #define MP make_pair
    
    using namespace std;
    const double eps = 1E-8;
    const int dx4[4]={1,0,0,-1};
    const int dy4[4]={0,-1,1,0};
    const int inf = 0x3f3f3f3f;
    struct PAM
    {
        //cnt表示某个节点的回文串的数量
        //len表示的是该状态所表示的回文串的长度
        //PAM有２个根，分别为状态０和状态１
        //初２个根外，其余每个状态表示一个本质不同的回文串,总数为sz-1
        struct state
        {
        int fail,cnt,len;
        int nxt[26];
        }st[N];
        char S[N],RS[N];
        int n,now,sz;
        int Right[N];//Right[i]表示以i结尾的最长回文串的长度
        int Left[N]; //Left[i]表示以i开头的最长回文串的长度...只需要倒序构建PAM就行了
        void init()
        {
        ms(st,0);
        now = 0 ;
        st[0].fail = st[1].fail = 1;
        st[1].len = -1;
        sz = 1;
        }
        void extend(int c,int pos)  
        {
        int p = now;
        while (S[pos-st[p].len-1]!=S[pos]) p = st[p].fail;
        if (!st[p].nxt[c]){
            int np=++sz,q=st[p].fail;
            st[np].len=st[p].len+2;
            while (S[pos-st[q].len-1]!=S[pos]) q=st[q].fail;
            st[np].fail=st[q].nxt[c];
            st[p].nxt[c] = np;
        }
        now=st[p].nxt[c];
        Right[pos] = st[now].len;
        st[now].cnt++;
        }
        void Cnt() //构建之后跑cnt得到的才是真正的cnt
        {
        for ( int i = sz ; i >= 2;  i--) st[st[i].fail].cnt += st[i].cnt;
        }
        void build ()
        {
        init();
        int len = strlen(S+1);
        for ( int i = 1 ; i <= len ; i++) extend(S[i]-'a',i);
        }
    }A,B;
    int main()
    {
    #ifndef  ONLINE_JUDGE 
        freopen("./in.txt","r",stdin);
    #endif
    
    #ifndef ONLINE_JUDGE  
        fclose(stdin);
    #endif
        return 0;
    }
    






