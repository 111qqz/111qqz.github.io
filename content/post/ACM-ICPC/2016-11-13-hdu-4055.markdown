---
author: 111qqz
date: 2016-11-13 14:38:06+00:00
draft: false
title: (dp专题003)hdu 4055 Number String(dp)
type: post
url: /2016/11/hdu-4055/
categories:
- ACM
tags:
- dp
---

[题目链接](http://acm.hdu.edu.cn/showproblem.php?pid=4055)

题意：给出n(n<=1E3)个字符，字符可能为'D','I','?'，第i位对应的字符分别表示，第i位大于第i+1位，第i位小于第i+1位，或者不确定。

现在问满足该字符串的 1..n的排列的方案数。结果9+7

思路：没有太多思路，参考了[题解](http://www.acmsearch.com/article/show/8811)

主要是状态表示没有想到，后面的状态转移方程倒是不难。

思路是，dp[i][j]表示长度为i，最后一位的相对大小为j的方案数。

考虑转移：如果第i-1个位置的字符为‘I’，那么所有比j小的都可以转移到j，也就是dp[i][j] = dp[i-1][1] + dp[i-1][2] + ... + dp[i-1][j-2] + dp[i-1][j-1];

**如果第i-1个位置的字符是'D'，此时是这道题的重点。**


<blockquote>有这个一个有趣的性质，比如对于一个排列{1，3，2}，现在我们在递推得到dp[4][2]，也就是要把2添加到这个排列的最后面，现在把当前排列即{1，3，2}中大于等于2的全部加上一得到{1，4，3}，这样是仍然不会改变题目给出的关系的，然后我们再把2添加到最后，{1，4，3，2}，就可以得到dp[4][2]了</blockquote>


此时的复杂度是n3,可以用前缀和优化掉一个n，复杂度n方。

最后答案就是sum[len+1][len+1]

    
    /***************************************************
    Author :111qqz
    ************************************************ */
    #include <cstdio>
    #include <cstring>
    #include <iostream>
    #include <algorithm>
    #include <vector>
    #include <queue>
    #include <stack>
    #include <set>
    #include <map>
    #include <string>
    #include <cmath>
    #include <cstdlib>
    #include <deque>
    #include <ctime>
    #define fst first
    #define sec second
    #define lson l,m,rt<<1
    #define rson m+1,r,rt<<1|1
    #define ms(a,x) memset(a,x,sizeof(a))
    typedef long long LL;
    #define pi pair < int ,int >
    #define MP make_pair
    using namespace std;
    const double eps = 1E-8;
    const int dx4[4]={1,0,0,-1};
    const int dy4[4]={0,-1,1,0};
    const int inf = 0x3f3f3f3f;
    const int N=1E3+7;
    const  int mod =  1000000007;
    char st[N];
    int dp[N][N],sum[N][N];//dp[i][j]表示长度为i，最后结尾的字符的相对大小为j的方案数。
    int main()
    {
      #ifndef  ONLINE_JUDGE
      //  freopen("D:\code\in.txt","r",stdin);
      #endif
    
            while (~scanf("%s",st+2))
            {
    
                    int len = strlen(st+2);
              //      cout<<"len:"<<len<<endl;
                    ms(sum,0);
                    ms(dp,0);
                    dp[1][1] = 1;
                    sum[1][1] = 1;
                    for ( int i = 2 ; i <= len+1 ; i++)
                    {
                            for ( int j = 1 ; j <= i ; j++)
                            {
                                    if ( st[i]=='?'||st[i]=='I') dp[i][j] = (dp[i][j] + sum[i-1][j-1])%mod;
                                    if (st[i]=='?'||st[i]=='D')
                                    {
                                            int tmp = ((sum[i-1][i-1]-sum[i-1][j-1])%mod+mod)%mod;
                                            dp[i][j] = (dp[i][j] + tmp)%mod;
                                    }
                                    sum[i][j] = (sum[i][j-1] + dp[i][j])%mod;
                            }
                    }
                    printf("%d\n",sum[len+1][len+1]);
            }
    
    
    #ifndef ONLINE_JUDGE
      fclose(stdin);
      #endif
        return 0;
    }
    







