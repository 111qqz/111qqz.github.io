---
author: 111qqz
date: 2016-04-11 08:36:25+00:00
draft: false
title: 'BZOJ 1648: [Usaco2006 Dec]Cow Picnic 奶牛野餐 (dfs)'
type: post
url: /2016/04/bzoj-1648/
categories:
- ACM
tags:
- dfs
---




## 1648: [Usaco2006 Dec]Cow Picnic 奶牛野餐


Time Limit: 5 Sec  Memory Limit: 64 MB
Submit: 562  Solved: 352
[[Submit](http://www.lydsy.com/JudgeOnline/submitpage.php?id=1648)][[Status](http://www.lydsy.com/JudgeOnline/problemstatus.php?id=1648)][[Discuss](http://www.lydsy.com/JudgeOnline/bbs.php?id=1648)]


## Description






The cows are having a picnic! Each of Farmer John's K (1 <= K <= 100) cows is grazing in one of N (1 <= N <= 1,000) pastures, conveniently numbered 1...N. The pastures are connected by M (1 <= M <= 10,000) one-way paths (no path connects a pasture to itself). The cows want to gather in the same pasture for their picnic, but (because of the one-way paths) some cows may only be able to get to some pastures. Help the cows out by figuring out how many pastures are reachable by all cows, and hence are possible picnic locations.


  K(1≤K≤100)只奶牛分散在N(1≤N≤1000)个牧场．现在她们要集中起来进餐．牧场之间有M(1≤M≤10000)条有向路连接，而且不存在起点和终点相同的有向路．她们进餐的地点必须是所有奶牛都可到达的地方．那么，有多少这样的牧场呢？







## Input






* Line 1: Three space-separated integers, respectively: K, N, and M * Lines 2..K+1: Line i+1 contains a single integer (1..N) which is the number of the pasture in which cow i is grazing. * Lines K+2..M+K+1: Each line contains two space-separated integers, respectively A and B (both 1..N and A != B), representing a one-way path from pasture A to pasture B.

 第1行输入K，N，M.接下来K行，每行一个整数表示一只奶牛所在的牧场编号．接下来M行，每行两个整数，表示一条有向路的起点和终点






## Output






* Line 1: The single integer that is the number of pastures that are reachable by all cows via the one-way paths.

    所有奶牛都可到达的牧场个数






## Sample Input




2 4 4
2
3
1 2
1 4
2 3
3 4


INPUT DETAILS:

4<--3
^ ^
| |
| |
1-->2

The pastures are laid out as shown above, with cows in pastures 2 and 3.





## Sample Output




2

牧场3，4是这样的牧场．







思路：爆搜，从每个奶牛开始做dfs，统计每个点到达的次数，到达为k次的就是合法的牧场。 我一开始的思路有点麻烦，也是从每个奶牛做dfs，然后把所有路径上经过的奶牛所在地存到一个数组里，每次访问一个新的点，就把所有奶牛数组里存进这个点的set里。。。但是实际上并不需要知道有哪些奶牛。。所以一个计数数组足矣。






 

    
    /* ***********************************************
    Author :111qqz
    Created Time :2016年04月11日 星期一 15时45分34秒
    File Name :code/bzoj/1648.cpp
    ************************************************ */
    
    #include <cstdio>
    #include <cstring>
    #include <iostream>
    #include <algorithm>
    #include <vector>
    #include <queue>
    #include <set>
    #include <map>
    #include <string>
    #include <cmath>
    #include <cstdlib>
    #include <ctime>
    #define fst first
    #define sec second
    #define lson l,m,rt<<1
    #define rson m+1,r,rt<<1|1
    #define ms(a,x) memset(a,x,sizeof(a))
    typedef long long LL;
    #define pi pair < int ,int >
    #define MP make_pair
    
    using namespace std;
    const double eps = 1E-8;
    const int dx4[4]={1,0,0,-1};
    const int dy4[4]={0,-1,1,0};
    const int inf = 0x3f3f3f3f;
    const int N=1E3+7;
    int n,m,k;
    
    vector <int> edge[N];
    bool vis[N];
    
    int cow[105];
    int num;
    int cnt[N];
    void dfs(int x)
    {
        vis[x] = true;
        cnt[x]++;
        for ( int i = 0 ; i < (int)edge[x].size() ; i++)
        {
    	int v = edge[x][i];
    	if (!vis[v])
    	{
    	    dfs(v);
    	}
        }
    }
    int main()
    {
    	#ifndef  ONLINE_JUDGE 
    	freopen("code/in.txt","r",stdin);
      #endif
    
    	scanf("%d %d %d",&k,&n,&m);
    	for ( int i = 1 ;i  <= k ; i++)
    	{
    	    scanf("%d",&cow[i]);
    	}
    	for ( int i = 1 ; i <= m ; i++)
    	{
    
    	    int u,v;
    	    scanf("%d %d",&u,&v);
    	    edge[u].push_back(v);
    	}
    	
    	ms(cnt,0);
    	for (  int i = 1 ; i <= k ; i++)
    	{
    	    ms(vis,false);
    	    dfs(cow[i]);
    	}
    
    	int ans = 0 ;
    	for  ( int i = 1 ; i <= n ; i++) if (cnt[i]==k) ans++;  //不需要知道到底是哪个牛，只需要个数。
    	printf("%d\n",ans);
      #ifndef ONLINE_JUDGE  
      fclose(stdin);
      #endif
        return 0;
    }
    



