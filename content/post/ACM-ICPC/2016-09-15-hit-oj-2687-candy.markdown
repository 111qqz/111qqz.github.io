---
author: 111qqz
date: 2016-09-15 21:04:48+00:00
draft: false
title: hit oj 2687 Candy (线段树动态维护最大连续子段)
type: post
url: /2016/09/hit-oj-2687-candy/
categories:
- ACM
tags:
- 最大连续区间和
- 线段树
---

[题目链接](http://acm.hit.edu.cn/hoj/problem/view?id=2687)

题意：给出n个数,m个修改，每次修改后询问整个区间的最大连续子段。

思路：考虑一段区间，分成左右两个子区间，这段区间的最大子段有三种情况：只在左区间中，只在右区间中，既在左区间中又在右区间中。前两种很好维护，对于后一种，我们新增加线段树的两个域，mxl,mxr，分别表示一个区间中包含左端点在的最大字段和（也就是最大前缀和），和一个区间中包含右端点在的最大子段和（也就是最大后缀和），然后对于最大子段既在左区间又在右区间的情况，只需要合并【左区间的最大后缀和 】和【右区间的最大前缀和】就好。

关于一个区间最大前缀和的维护，取该区间的左区间的最大前缀和和【该区间的左区间和】+【该区间的右区间的最大前缀和】的最大值。

最大后缀和同理。

**这是一种很经典的做法，注意体会。**

1A

    
    /* ***********************************************
    Author :111qqz
    Created Time :Fri 16 Sep 2016 04:01:49 AM CST
    File Name :code/hitoj/2687.cpp
    ************************************************ */
    
    #include <cstdio>
    #include <cstring>
    #include <iostream>
    #include <algorithm>
    #include <vector>
    #include <queue>
    #include <set>
    #include <map>
    #include <string>
    #include <cmath>
    #include <cstdlib>
    #include <ctime>
    #define fst first
    #define sec second
    #define lson l,m,rt<<1
    #define rson m+1,r,rt<<1|1
    #define ms(a,x) memset(a,x,sizeof(a))
    typedef long long LL;
    #define pi pair < int ,int >
    #define MP make_pair
    
    using namespace std;
    const double eps = 1E-8;
    const int dx4[4]={1,0,0,-1};
    const int dy4[4]={0,-1,1,0};
    const int inf = 0x3f3f3f3f;
    const int N=1E5+7;
    int n,m;
    struct
    {
        int mx;
        int mxr;
        int mxl;
        int sum;
    }tree[N<<2];
    void PushUp( int rt)
    {
        tree[rt].sum = tree[rt<<1].sum + tree[rt<<1|1].sum;
        if (tree[rt<<1].mxr>0&&tree[rt<<1|1].mxl>0) //区间合并
    	tree[rt].mx = tree[rt<<1].mxr + tree[rt<<1|1].mxl;
        else tree[rt].mx = max(tree[rt<<1].mxr,tree[rt<<1|1].mxl);
        tree[rt].mx = max(tree[rt].mx,max(tree[rt<<1].mx,tree[rt<<1|1].mx));
        tree[rt].mxl = max(tree[rt<<1].mxl,tree[rt<<1|1].mxl+tree[rt<<1].sum);
        tree[rt].mxr = max(tree[rt<<1|1].mxr,tree[rt<<1].mxr+tree[rt<<1|1].sum);
    }
    void build(int l,int r,int rt)
    {
        if (l==r)
        {
    	int x;
    	scanf("%d",&x);
    	tree[rt].mx = tree[rt].mxl = tree[rt].mxr = tree[rt].sum = x;
    	return;
        }
        int m = (l+r)>>1;
        build(lson);
        build(rson);
        PushUp(rt);
    }
    void update( int p,int sc,int l,int r,int rt)
    {
        if (l==r)
        {
    	tree[rt].mx = tree[rt].mxl = tree[rt].mxr = tree[rt].sum = sc;
    	return;
        }
        int m = (l+r)>>1;
        if (p<=m) update(p,sc,lson);
        else update(p,sc,rson);
        PushUp(rt);
    }
    
    int main()
    {
    	#ifndef  ONLINE_JUDGE 
    	freopen("code/in.txt","r",stdin);
      #endif
    	while (~scanf("%d%d",&n,&m))
    	{
    	    build(1,n,1);
    	    while (m--)
    	    {
    		int p,x;
    		scanf("%d%d",&p,&x);
    		update(p,x,1,n,1);
    		printf("%d\n",tree[1].mx);
    	    }
    	}
    
      #ifndef ONLINE_JUDGE  
      fclose(stdin);
      #endif
        return 0;
    }
    





