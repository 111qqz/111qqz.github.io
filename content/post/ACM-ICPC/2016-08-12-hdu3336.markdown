---
author: 111qqz
date: 2016-08-12 05:33:08+00:00
draft: false
title: hdu 3336 Count the string （nxt函数的运用kmp+（dfs|dp )）
type: post
url: /2016/08/hdu3336/
categories:
- ACM
tags:
- dfs
- kmp
- 字符串dp
---

[hdu 3336 题目链接](http://acm.hdu.edu.cn/showproblem.php?pid=3336)

题意：给一个字符串，问这个字符串的所有前缀的出现次数的和。

思路：这道题需要完全理解nxt函数是干嘛的。。nxt[i]表示的是字符串的0..i-1位中，**前缀和后缀相等的串的最长长度为nxt[i]**

这东西对于这道题有什么用呢？

举个例子，对于字符串ababa：

s          a    b    a    b    a
i          0    1    2    3    4   5
next[i]     -1   0    0    1    2   3

ans初始为len(因为长度为len的字符串有len个前缀，每个前缀至少出现一次)
next[3] = 1，ans + 1 = 6，next[1] = 0
next[4] = 2，ans + 1 = 7，next[2] = 0
**next[5] = 3，ans + 1 = 8，next[3] = 1，ans + 1 = 9**



首先，我们不是很关心nxt[i]具体的值，只关心nxt[i]是否大于0.如果大于0，比如对于nxt[3]==1，说明字符串0..2位置中，存在一个后缀和前缀相等，因此答案+1.

其次，其实我们仍然关心nxt[i]具体的值，对于nxt[5]==3，具体对应的含义是有后缀“aba”和前缀“aba”相等

但是这就完了吗？因为nxt[3]仍然大于0，对应“aba"中有一个前缀”a“和后者”a“相等。。。你可能要问。。这个不是刚刚算过了吗。。。然而这里其实算的是字符串2..4的”aba"。

<del>看到有人说这是dp...不是很懂dp做法是什么鬼。。。</del>

忘记取模wa了一发。。智力-2.




    
    /* ***********************************************
    Author :111qqz
    Created Time :2016年08月12日 星期五 12时59分12秒
    File Name :code/hdu/3336.cpp
    ************************************************ */
    #include <cstdio>
    #include <cstring>
    #include <iostream>
    #include <algorithm>
    #include <vector>
    #include <queue>
    #include <stack>
    #include <set>
    #include <map>
    #include <string>
    #include <cmath>
    #include <cstdlib>
    #include <deque>
    #include <ctime>
    #define fst first
    #define sec second
    #define lson l,m,rt<<1
    #define rson m+1,r,rt<<1|1
    #define ms(a,x) memset(a,x,sizeof(a))
    typedef long long LL;
    #define pi pair < int ,int >
    #define MP make_pair
    using namespace std;
    const double eps = 1E-8;
    const int dx4[4]={1,0,0,-1};
    const int dy4[4]={0,-1,1,0};
    const int inf = 0x3f3f3f3f;
    const int MOD = 10007;
    const int N=2E5+7;
    int n;
    char s[N];
    int nxt[N];
    int ans;
    void getnxt(char *s)
    {
        int n = strlen(s);
        int i = 0 ;
        int j = -1;
        nxt[0] = -1;
        while (i<n)
        if (j==-1||s[i]==s[j]) nxt[++i]=++j;
        else j = nxt[j];
    }
    void dfs( int x)
    {
        if (x<=0) return ;
        ans = (ans + 1) % MOD;
        dfs(nxt[x]);
    }
    int main()
    {
        #ifndef  ONLINE_JUDGE 
        freopen("code/in.txt","r",stdin);
      #endif
        int T;
        scanf("%d",&T);
        while (T--)
        {
            scanf("%d",&n);
            scanf("%s",s);
            getnxt(s);
            int len = strlen(s);
            ans = len;
            //for ( int i = 1 ; i <= len ; i++) cout<<"i:"<<i<<" "<<nxt[i]<<endl;
            for ( int i = 1 ; i <= len ; i++)
            if (nxt[i]>0) dfs(nxt[i]);//cout<<"ans:"<<ans<<endl;
            printf("%d\n",ans);
        }
      #ifndef ONLINE_JUDGE  
      fclose(stdin);
      #endif
        return 0;
    }
    





下面补一个dp做法好了。

dp[i]表示长度为i的前缀出现的此处，显然每个前缀至少出现了一次，所以初始化dp[i]=1  (1=<i <= len)

转移方程为**dp[nxt[i]] += dp[i];**

这里还是涉及到nxt函数的含义

nxt[i]表示的是字符串的0..i-1位中，**前缀和后缀相等的串的最长长度为nxt[i]**

**这就说明，对于长度为i的前缀，有一个长度为nxt[i]的前缀，出现在了该长度为i的前缀的后缀处。**

从**后往前扫的原因是，对于长度为i的前缀，其长度为nxt[i]的前缀可能仍然有一个长度为nxt[nxt[i]]的前缀，**

从后往前可以保证，当从len扫描到i时，已经将i+1~len的贡献累加到dp[i]


    
    /* ***********************************************
    Author :111qqz
    Created Time :2016年08月12日 星期五 12时59分12秒
    File Name :code/hdu/3336.cpp
    ************************************************ */
    
    #include <cstdio>
    #include <cstring>
    #include <iostream>
    #include <algorithm>
    #include <vector>
    #include <queue>
    #include <stack>
    #include <set>
    #include <map>
    #include <string>
    #include <cmath>
    #include <cstdlib>
    #include <deque>
    #include <ctime>
    #define fst first
    #define sec second
    #define lson l,m,rt<<1
    #define rson m+1,r,rt<<1|1
    #define ms(a,x) memset(a,x,sizeof(a))
    typedef long long LL;
    #define pi pair < int ,int >
    #define MP make_pair
    
    using namespace std;
    const double eps = 1E-8;
    const int dx4[4]={1,0,0,-1};
    const int dy4[4]={0,-1,1,0};
    const int inf = 0x3f3f3f3f;
    const int MOD = 10007;
    const int N=2E5+7;
    int n;
    char s[N];
    int nxt[N];
    int ans;
    void getnxt(char *s)
    {
        int n = strlen(s);
        int i = 0 ;
        int j = -1;
        nxt[0] = -1;
        while (i<n)
        if (j==-1||s[i]==s[j]) nxt[++i]=++j;
        else j = nxt[j];
    }
    int dp[N];
    int main()
    {
        #ifndef  ONLINE_JUDGE 
        freopen("./in.txt","r",stdin);
      #endif
        int T;
        scanf("%d",&T);
        while (T--)
        {
            scanf("%d",&n);
            scanf("%s",s);
            getnxt(s);
            int len = strlen(s);
            for ( int i = 1 ; i <= len ; i++) dp[i] = 1;
    
            for ( int i = len ; i >= 1 ; i--)
            {
            dp[nxt[i]] = (dp[nxt[i]] + dp[i]) % MOD;
            }
            int ans = 0 ;
            for ( int i = 1 ; i <= len ; i++) ans = (ans + dp[i])%MOD;
            printf("%d\n",ans);
        }
    
      #ifndef ONLINE_JUDGE  
      fclose(stdin);
      #endif
        return 0;
    }
    








