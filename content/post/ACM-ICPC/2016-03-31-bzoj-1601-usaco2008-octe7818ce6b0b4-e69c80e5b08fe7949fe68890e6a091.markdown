---
author: 111qqz
date: 2016-03-31 12:17:03+00:00
draft: false
title: 'bzoj 1601: [Usaco2008 Oct]灌水 (最小生成树)'
type: post
url: /2016/03/bzoj-1601-usaco2008-oct-/
categories:
- ACM
tags:
- 最小生成树
---




## 1601: [Usaco2008 Oct]灌水


Time Limit: 5 Sec  Memory Limit: 162 MB
Submit: 1624  Solved: 1059
[[Submit](http://www.lydsy.com/JudgeOnline/submitpage.php?id=1601)][[Status](http://www.lydsy.com/JudgeOnline/problemstatus.php?id=1601)][[Discuss](http://www.lydsy.com/JudgeOnline/bbs.php?id=1601)]


## Description






Farmer John已经决定把水灌到他的n(1<=n<=300)块农田，农田被数字1到n标记。把一块土地进行灌水有两种方法，从其他农田饮水，或者这块土地建造水库。 建造一个水库需要花费wi(1<=wi<=100000),连接两块土地需要花费Pij(1<=pij<=100000,pij=pji,pii=0). 计算Farmer John所需的最少代价。






## Input






*第一行：一个数n

*第二行到第n+1行：第i+1行含有一个数wi

*第n+2行到第2n+1行：第n+1+i行有n个被空格分开的数，第j个数代表pij。






## Output






*第一行：一个单独的数代表最小代价.






## Sample Input




4
5
4
4
3
0 2 2 2
2 0 3 3
2 3 0 4
2 3 4 0





## Sample Output




9


输出详解：

Farmer John在第四块土地上建立水库，然后把其他的都连向那一个，这样就要花费3+2+2+2=9











思路：一开始觉得是dp.....本来打算放弃了。。。后来看到p的值，似乎一定能保证n个点相连。




那么每一个点的水源有两个来源，要么自己建，要么从别人那里来。




然后卡住了QAQ....看了题解。。




**好巧妙。。因为自己建水库不好处理，我们可以假设一个源点，认为只有源点有水库，而其他点建水库的价钱认为是修一条源点到那个点的路的价钱，这样就把w[i]转化成了p[i][j]的形式。**




然后包括源点在内的n+1个点，求最小生成树。






 

    
    /* ***********************************************
    Author :111qqz
    Created Time :2016年03月31日 星期四 19时32分43秒
    File Name :code/bzoj/1601.cpp
    ************************************************ */
    
    #include <cstdio>
    #include <cstring>
    #include <iostream>
    #include <algorithm>
    #include <vector>
    #include <queue>
    #include <set>
    #include <map>
    #include <string>
    #include <cmath>
    #include <cstdlib>
    #include <ctime>
    #define fst first
    #define sec second
    #define lson l,m,rt<<1
    #define rson m+1,r,rt<<1|1
    #define ms(a,x) memset(a,x,sizeof(a))
    typedef long long LL;
    #define pi pair < int ,int >
    #define MP make_pair
    
    using namespace std;
    const double eps = 1E-8;
    const int dx4[4]={1,0,0,-1};
    const int dy4[4]={0,-1,1,0};
    const int inf = 0x3f3f3f3f;
    const int N=305;
    int n;
    int w[N],mxw;
    int a[N][N];
    int m;
    int f[N];
    
    int root ( int x)
    {
        if (x!=f[x]) f[x] = root (f[x]);
        return f[x];
    }
    
    void merge( int x,int y)
    {
        int rx = root (x);
        int ry = root (y);
        if (rx!=ry)
        {
    	f[rx] = f[ry];
        }
    }
    struct Edge
    {
        int u,v;
        int val;
    
        bool operator < (Edge b) const
        {
    	return val<b.val;
        }
    }edge[N*N];
    int main()
    {
    	#ifndef  ONLINE_JUDGE 
    	freopen("code/in.txt","r",stdin);
      #endif
    
    	ios::sync_with_stdio(false);
    	cin>>n;
    	int m = 0  ;
    	for ( int i = 1 ; i <= n ; i++)
    	{
    	    cin>>w[i];
    	    m++;
    	    edge[m].u = 0;
    	    edge[m].v = i;
    	    edge[m].val = w[i];
    	}
    
    	for ( int i = 1 ;i <= n ; i++)
    	{
    	    for ( int j = 1 ; j <= n ; j++)
    	    {
    		cin>>a[i][j];
    	    }
    	}
    
    	
    	for ( int i = 1 ; i <= n-1 ; i++)
    	    for ( int j = i + 1 ; j <= n ; j++)
    	    {
    		m++;
    		edge[m].u = i;
    		edge[m].v = j;
    		edge[m].val = a[i][j];
    	    }
    
    	sort(edge+1,edge+m+1);
    	for ( int i = 0 ;i  <= n ; i++) f[i] = i ;
    	
    	int cost = 0 ;
    	int cnt = 0 ;
    	for ( int i = 1 ; i <= m ; i++)
    	{
    	    int u = edge[i].u;
    	    int v = edge[i].v;
    	    int val = edge[i].val;
    	    if (root(u)==root (v)) continue;
    	    cost += val;
    	    merge(edge[i].u,edge[i].v);
    	    cnt++;
    	    if (cnt==n) break;
    	}
    
    	cout<<cost<<endl;
    
    
      #ifndef ONLINE_JUDGE  
      fclose(stdin);
      #endif
        return 0;
    }
    



