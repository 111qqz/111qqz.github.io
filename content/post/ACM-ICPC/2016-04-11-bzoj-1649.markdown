---
author: 111qqz
date: 2016-04-11 09:19:52+00:00
draft: false
title: 'BZOJ 1649: [Usaco2006 Dec]Cow Roller Coaster (dp，类似01背包)'
type: post
url: /2016/04/bzoj-1649/
categories:
- ACM
tags:
- 01背包
- dp
---

## 


Time Limit: 5 Sec  Memory Limit: 64 MB
Submit: 504  Solved: 265
[[Submit](http://www.lydsy.com/JudgeOnline/submitpage.php?id=1649)][[Status](http://www.lydsy.com/JudgeOnline/problemstatus.php?id=1649)][[Discuss](http://www.lydsy.com/JudgeOnline/bbs.php?id=1649)]


## Description






The cows are building a roller coaster! They want your help to design as fun a roller coaster as possible, while keeping to the budget. The roller coaster will be built on a long linear stretch of land of length L (1 <= L <= 1,000). The roller coaster comprises a collection of some of the N (1 <= N <= 10,000) different interchangable components. Each component i has a fixed length Wi (1 <= Wi <= L). Due to varying terrain, each component i can be only built starting at location Xi (0 <= Xi <= L-Wi). The cows want to string together various roller coaster components starting at 0 and ending at L so that the end of each component (except the last) is the start of the next component. Each component i has a "fun rating" Fi (1 <= Fi <= 1,000,000) and a cost Ci (1 <= Ci <= 1000). The total fun of the roller coster is the sum of the fun from each component used; the total cost is likewise the sum of the costs of each component used. The cows' total budget is B (1 <= B <= 1000). Help the cows determine the most fun roller coaster that they can build with their budget.


奶牛们正打算造一条过山车轨道．她们希望你帮忙，找出最有趣，但又符合预算的方案．  过山车的轨道由若干钢轨首尾相连，由x=0处一直延伸到X=L(1≤L≤1000)处．现有N(1≤N≤10000)根钢轨，每根钢轨的起点Xi(0≤Xi≤L- Wi)，长度wi(l≤Wi≤L)，有趣指数Fi(1≤Fi≤1000000)，成本Ci(l≤Ci≤1000)均己知．请确定一种最优方案，使得选用的钢轨的有趣指数之和最大，同时成本之和不超过B(1≤B≤1000)．







## Input






* Line 1: Three space-separated integers: L, N and B.

* Lines 2..N+1: Line i+1 contains four space-separated integers, respectively: Xi, Wi, Fi, and Ci.


    第1行输入L，N，B，接下来N行，每行四个整数Xi，wi，Fi，Ci．







## Output






* Line 1: A single integer that is the maximum fun value that a roller-coaster can have while staying within the budget and meeting all the other constraints. If it is not possible to build a roller-coaster within budget, output -1.






## Sample Input




5 6 10
0 2 20 6
2 3 5 6
0 1 2 1
1 1 1 3
1 2 5 4
3 2 10 2 






## Sample Output




17
选用第3条，第5条和第6条钢轨







思路：一个类似01dp的背包




dp[i][j]表示长度为i，成本为j的最大有趣指数。




这个想到了。。




然后转移没有推出来。。。




因为潜意识里总觉得循环的变量是要和dp数组的两维一致。。。




实际上根本无关好吗23333




初始化数组dp为-1，dp[0][0]=0




为-1是因为无解输出-1，这样就不用特别处理了。。。




转移方程为：**f[i][end[a]]=max{f[i-cost[a][begin[a]]+w[a]} 当f[i-cost[a][begin[a]]可行时**




参考了这篇题解：


[bzoj1649题解](http://www.cnblogs.com/iwtwiioi/p/3960292.html)





 

    
    /* ***********************************************
    Author :111qqz
    Created Time :2016年04月11日 星期一 16时43分19秒
    File Name :code/bzoj/1649.cpp
    ************************************************ */
    
    #include <cstdio>
    #include <cstring>
    #include <iostream>
    #include <algorithm>
    #include <vector>
    #include <queue>
    #include <set>
    #include <map>
    #include <string>
    #include <cmath>
    #include <cstdlib>
    #include <ctime>
    #define fst first
    #define sec second
    #define lson l,m,rt<<1
    #define rson m+1,r,rt<<1|1
    #define ms(a,x) memset(a,x,sizeof(a))
    typedef long long LL;
    #define pi pair < int ,int >
    #define MP make_pair
    
    using namespace std;
    const double eps = 1E-8;
    const int dx4[4]={1,0,0,-1};
    const int dy4[4]={0,-1,1,0};
    const int inf = 0x3f3f3f3f;
    const int N=1E4+3;
    int n,l,b;
    int dp[1005][1005];
    struct node
    {
        int l,r;
        int w;
        int f;
        int c;
    
        bool operator < (node b) const
        {
    	if (l==b.l) return r<b.r;
    	return l<b.l;
        }
    
    }p[N];
    int main()
    {
    	#ifndef  ONLINE_JUDGE 
    	freopen("code/in.txt","r",stdin);
      #endif
    
    	scanf("%d %d %d",&l,&n,&b);
    	for ( int i = 1 ; i <= n ; i++)
    	{
    	    scanf("%d %d %d %d",&p[i].l,&p[i].w,&p[i].f,&p[i].c);
    	    p[i].r = p[i].l + p[i].w;
    	}
    
    	sort(p+1,p+n+1);
    
    	ms(dp,-1);
    	dp[0][0] = 0;
    	for ( int i = 1 ; i <= n ; i++)
    	{
    	    for ( int j = p[i].c ;  j <= b ; j++) 
    		if (dp[p[i].l][j-p[i].c]!=-1) dp[p[i].r][j]=max(dp[p[i].r][j],dp[p[i].l][j-p[i].c]+p[i].f);
    	}
    	int ans = -1 ; //无解输出-1
    	for ( int i = 1 ;i <= b ; i++) ans = max(ans,dp[l][i]);
    	printf("%d\n",ans);
    
    
    
      #ifndef ONLINE_JUDGE  
      fclose(stdin);
      #endif
        return 0;
    }
    



