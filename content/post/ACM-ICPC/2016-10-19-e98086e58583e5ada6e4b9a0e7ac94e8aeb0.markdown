---
author: 111qqz
date: 2016-10-19 09:17:15+00:00
draft: false
title: 逆元学习笔记
type: post
url: /2016/10//
categories:
- ACM
tags:
- 逆元
---

[acdreamer_逆元学习笔记](http://blog.csdn.net/acdreamers/article/details/8220787)



摘重点：

ksm(a,mod-2)的方法求逆元只适用于mod为质数且 gcd(a,mod)==1

扩展欧几里得算法求逆元只适用于gcd(a,mod)==1

[扩展欧几里得算法求逆元](http://www.cnblogs.com/frog112111/archive/2012/08/19/2646012.html)

acdreamer的博客里<del>提到一种通用的方法，正确性未知</del>。**（然而有b|a的前提呵呵呵呵呵）**


<blockquote>但是你会发现费马小定理和扩展欧几里得算法求逆元是有局限性的，它们都会要求![](http://img.blog.csdn.net/20140613102654328)
与![](http://img.blog.csdn.net/20140613102712781)
互素。实际上我们还有一

种通用的求逆元方法，适合所有情况。公式如下

![](http://img.blog.csdn.net/20140613105646406)
</blockquote>




O(n)求逆元：


<blockquote>其实有些题需要用到![](http://img.blog.csdn.net/20140613122746828)
模![](http://img.blog.csdn.net/20140613122821000)
的所有逆元，这里![](http://img.blog.csdn.net/20140613122821000)
为奇质数。那么如果用快速幂求时间复杂度为![](http://img.blog.csdn.net/20140613123226296)
，

如果对于一个**1000000**级别的素数![](http://img.blog.csdn.net/20140613122821000)
，这样做的时间复杂度是很高了。实际上有![](http://img.blog.csdn.net/20140613123603656)
的算法，有一个递推式如下

![](http://img.blog.csdn.net/20140613123955765)




它的推导过程如下，设![](http://img.blog.csdn.net/20140613124932968)
，那么

![](http://img.blog.csdn.net/20140613125025984)


对上式两边同时除![](http://img.blog.csdn.net/20140613125121234)
，进一步得到

![](http://img.blog.csdn.net/20140613125208000)


再把![](http://img.blog.csdn.net/20140613125307921)
和![](http://img.blog.csdn.net/20140613125324765)
替换掉，最终得到

![](http://img.blog.csdn.net/20140613123955765)


初始化![](http://img.blog.csdn.net/20140613125520578)
，这样就可以通过递推法求出![](http://img.blog.csdn.net/20140613122746828)
模奇素数![](http://img.blog.csdn.net/20140613122821000)
的所有逆元了。

另外![](http://img.blog.csdn.net/20140613122746828)
模![](http://img.blog.csdn.net/20140613122821000)
的所有逆元值对应![](http://img.blog.csdn.net/20140613122746828)
中所有的数，比如![](http://img.blog.csdn.net/20140613125913078)
，那么![](http://img.blog.csdn.net/20140613130144843)
对应的逆元是![](http://img.blog.csdn.net/20140613130219921)
。</blockquote>







