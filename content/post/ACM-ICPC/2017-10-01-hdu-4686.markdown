---
author: 111qqz
date: 2017-10-01 06:33:48+00:00
draft: false
title: hdu 4686 Arc of Dream  (构造矩阵，快速幂)
type: post
url: /2017/10/hdu-4686/
categories:
- ACM
tags:
- 快速幂
- 构造
- 矩阵
---

[hdu4686题目链接](http://acm.hdu.edu.cn/showproblem.php?pid=4686)



# 题意：



An Arc of Dream is a curve defined by following function:

![](https://odzkskevi.qnssl.com/5bb0e0e69de61a673fbd079520fe97e2?v=1506621126)

where
a 0 = A0
a i = a i-1_AX+AY
b 0 = B0
b i = b i-1_BX+BY
What is the value of AoD(N) modulo 1,000,000,007?





# 思路：



看n的1E18的范围也知道是矩阵快速幂。。

难点还是构造矩阵。

构造矩阵主要凭借经验，但是还是有一些规律可循：




      1. 对于求和的式子，如 s[n] = sum{F[1]..F[n]}类似的式子，我们只需要考虑如何构造F[n]即可。
      2. 尽量将要构造的表达式展开成，第n项，与前面项(第n-1项等)有关的形式。
      3. 观察2中展开的表达式的系数，每一个系数都亚奥出现在转移矩阵M中。
      4. 观察2中展开的表达式的项，基本每一项都要整体或者以其他形式出现在初始矩阵M1中
      5. 我们并不很关心初始项。
      6. 难点其实在于构造M1矩阵，也就是说哪些项是重要的。一般而言，**可能有的项是，s[n],f[n],常数项，以及为了构造出f[n]的辅助项。**


对于这道题：

[![](https://111qqz.com/wordpress/wp-content/uploads/2017/10/1.jpg)
](https://111qqz.com/wordpress/wp-content/uploads/2017/10/1.jpg)

[](https://111qqz.com/wordpress/wp-content/uploads/2017/10/DeepinScreenshot_select-area_20171001142722.png)[![](https://111qqz.com/wordpress/wp-content/uploads/2017/10/DeepinScreenshot_select-area_20171001142742.png)
](https://111qqz.com/wordpress/wp-content/uploads/2017/10/DeepinScreenshot_select-area_20171001142742.png)[![](https://111qqz.com/wordpress/wp-content/uploads/2017/10/DeepinScreenshot_select-area_20171001142722.png)
](https://111qqz.com/wordpress/wp-content/uploads/2017/10/DeepinScreenshot_select-area_20171001142722.png)



然后矩阵快速幂即可。

1A


    
    /* ***********************************************
    Author :111qqz
    Created Time :2017年10月01日 星期日 13时34分52秒
    File Name :4686.cpp
    ************************************************ */
    
    #include <cstdio>
    #include <cstring>
    #include <iostream>
    #include <algorithm>
    #include <vector>
    #include <queue>
    #include <set>
    #include <map>
    #include <string>
    #include <cmath>
    #include <cstdlib>
    #include <ctime>
    #define PB push_back
    #define fst first
    #define sec second
    #define lson l,m,rt<<1
    #define rson m+1,r,rt<<1|1
    #define ms(a,x) memset(a,x,sizeof(a))
    typedef long long LL;
    #define pi pair < int ,int >
    #define MP make_pair
    
    using namespace std;
    const double eps = 1E-8;
    const int dx4[4]={1,0,0,-1};
    const int dy4[4]={0,-1,1,0};
    const int inf = 0x3f3f3f3f;
    const int N=10;
    const LL mod = 1E9+7;
    LL n,A0,Ax,Ay,B0,Bx,By;
    struct Mat
    {
        LL mat[N][N];
        void clear()
        {
        ms(mat,0);
        }
        void pr()
        {
        for ( int i = 0 ; i < 5 ; i++)
            for ( int j = 0 ; j < 5 ; j++)
            printf("%lld%c",mat[i][j],j==4?'\n':' ');
        }
    }M,M1;
    Mat operator * (Mat a,Mat b)
    {
        Mat c;
        c.clear();
        for ( int i = 0 ; i < 5 ;  i++)
        for ( int j = 0 ; j < 5 ; j++)
            for ( int k = 0 ; k < 5 ; k++)
            {
            a.mat[i][k]%=mod;
            b.mat[k][j]%=mod;
            c.mat[i][j] = (c.mat[i][j] + a.mat[i][k] * b.mat[k][j] % mod) %mod;
            }
        return c;
    }
    Mat operator ^ (Mat a,LL b)
    {
        Mat ret;
        ret.clear();
        for ( int i = 0 ; i < 5 ; i++) ret.mat[i][i] =  1;
        while (b>0)
        {
        if (b&1)
            ret = ret * a;
        b = b>>1LL;
        a = a * a;
        }
        return ret;
    }
    LL solve()
    {
        M1.clear();
        M.clear();
        M.mat[0][0] = Ax*Bx;
        M.mat[0][1] = Ax*By;
        M.mat[0][2] = Ay*Bx;
        M.mat[0][3] = Ay*By;
    
        M.mat[1][1] = Ax;
        M.mat[1][3] = Ay;
        M.mat[2][2] = Bx;
        M.mat[2][3] = By;
        M.mat[3][3] = 1;
        M.mat[4][0] = 1;
        M.mat[4][4] = 1;
    
        M1.mat[0][0] = A0*B0;
        M1.mat[1][0] = A0;
        M1.mat[2][0] = B0;
        M1.mat[3][0] = 1;
        M1.mat[4][0] = 0;
    
        Mat ans;
        ans.clear();
        ans = (M ^ (n))*M1;
       // ans.pr();
        return ans.mat[4][0];
    }                                                                                                                                                                                    
    int main()
    {
        #ifndef  ONLINE_JUDGE 
        freopen("./in.txt","r",stdin);
      #endif
        while (~scanf("%lld%lld%lld%lld%lld%lld%lld",&n,&A0,&Ax,&Ay,&B0,&Bx,&By))
        {
            LL ans = solve();
            ans = (ans % mod + mod )%mod;
            printf("%lld\n",ans);
        }
    
      #ifndef ONLINE_JUDGE  
      fclose(stdin);
      #endif
        return 0;
    }
    




