---
author: 111qqz
date: 2016-07-18 12:06:00+00:00
draft: false
title: whust 2016 warm up C ||codeforces 682 C. Alyona and the Tree (最大连续和,树形dp)
type: post
url: /2016/07/cf682c/
categories:
- ACM

tags:
- 最大连续和
- 树形dp
---

[cf682C题目链接](http://codeforces.com/problemset/problem/682/C)



题意：给一棵树。。有点权和边权。。。如果一个点v的子树中存在某点u,满足dis(u,v)>a[u]，那么点v就非常sad...

dis(u,v)表示点u到v的距离。。。a[u]是u的点权。。现在问最少要删除多少个叶子节点才能使得没有点节点感到sad..



思路：dfs一下。。。需要注意的是边权有负数。。。所以类似于区间的最大连续区间和。。。我们也也可以维护在树上的最大连续和。。。只需要如果当前为负就变成0即可。。。





    
    /* ***********************************************
    Author :111qqz
    Created Time :2016年07月18日 星期一 14时27分58秒
    File Name :code/2016whust/C.cpp
    ************************************************ */
    #include <cstdio>
    #include <cstring>
    #include <iostream>
    #include <algorithm>
    #include <vector>
    #include <queue>
    #include <set>
    #include <map>
    #include <string>
    #include <cmath>
    #include <cstdlib>
    #include <ctime>
    #define fst first
    #define sec second
    #define lson l,m,rt<<1
    #define rson m+1,r,rt<<1|1
    #define ms(a,x) memset(a,x,sizeof(a))
    typedef long long LL;
    #define pi pair < int ,long long >
    #define MP make_pair
    using namespace std;
    const double eps = 1E-8;
    const int dx4[4]={1,0,0,-1};
    const int dy4[4]={0,-1,1,0};
    const int inf = 0x3f3f3f3f;
    const int N=1E5+7;
    LL a[N];
    LL sum[N];
    bool vis[N];
    vector < pi> edge[N];
    int ans;
    int n;
    void dfs( int u,int pre,LL d)
    {
        if (d>a[u]) return ;
        ans++;
        int siz = edge[u].size();
        for ( int i = 0 ; i < siz ; i++)
        {
    	int v = edge[u][i].fst;
    	LL w = edge[u][i].sec;
    	if (v==pre) continue;
    	dfs(v,u,w+d>0?w+d:0);
        }
    }
    int main()
    {
    	#ifndef  ONLINE_JUDGE 
    	freopen("code/in.txt","r",stdin);
      #endif
    	cin>>n;
    	for ( int i = 1 ; i <= n ; i++) edge[i].clear();
    	ms(sum,0);
    	for ( int i = 1 ; i <= n ; i++)
    	{
    	    scanf("%lld",&a[i]);
    	}
    	for ( int i = 2 ; i <= n ; i++)
    	{
    	    int p;
    	    LL c;
    	    scanf("%d%lld",&p,&c);
    	    edge[i].push_back(make_pair(p,c));
    	    edge[p].push_back(make_pair(i,c));
    	}
    	dfs(1,-1,0);
    	cout<<n-ans<<endl;
      #ifndef ONLINE_JUDGE  
      fclose(stdin);
      #endif
        return 0;
    }
    



