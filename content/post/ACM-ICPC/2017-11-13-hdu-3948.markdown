---
author: 111qqz
date: 2017-11-13 15:56:30+00:00
draft: false
title: hdu 3948  |   2011 Multi-University Training Contest 11  The Number of Palindromes
  (回文自动机模板题)
type: post
url: /2017/11/hdu-3948/
categories:
- ACM
tags:
- 回文自动机
---

http://acm.hdu.edu.cn/showproblem.php?pid=3948



# 题意：



给一个字符串，问本质不同的回文子串的个数。



# 思路：



考虑回文自动机。

我们知道，对于PAM上的一个节点，表示的就是一个本质不同的回文串。

UPDATE: 弃用了这种代码风格,新的写法见下面。

<del>那么sz-2就是本质不同的回文子串个数了orz(减掉2是因为PAM有2个根，这2个根不表示回文串）</del>


    
    #include <iostream>
    #include <cstdio>
    #include <cstring>
    #include <algorithm>
    typedef long long LL;
    #define ri register int
    using namespace std;
    #define MAXALP 30
    #define ms(a,x) memset(a,x,sizeof(a)) 
    const int N = 3E5+7;
    struct PAM
    {
        int cnt,len,fail;
        int nxt[MAXALP];
    }st[N];
    int n, m, sz , last, cur;
    char s[N];
    inline int new_node(int x)
    {
        st[sz].len = x; st[sz].cnt = 0;
        ms(st[sz].nxt,0);
        return sz++;
    }
    inline int get_fail(int x, int n)
    {
        while(s[n-st[x].len-1] != s[n]) x = st[x].fail;
        return x;
    }
    inline void pam_init()
    {
        sz = 0 ;
        new_node(0);
        new_node(-1);
        st[0].fail = 1;
        ms(st[0].nxt,0);
        last = 0;
    }
    void pam_insert( int c,int head)
    {
        cur = get_fail(last,head);
        if (!st[cur].nxt[c])
        {
        int nw = new_node(st[cur].len+2);
        st[nw].fail = st[get_fail(st[cur].fail,head)].nxt[c];
        st[cur].nxt[c] = nw;
        }
        last = st[cur].nxt[c];
        st[last].cnt++;
    }
    int main()
    {
    //  freopen("./in.txt","r",stdin);
        int T;
        int cas = 0 ;
        cin>>T;
        while (T--)
        {
            scanf("%s",s);
            n = strlen(s);
            pam_init();
            for(int i=0;i<n;i++) pam_insert(s[i]-'a',i);
            printf("Case #%d: %d\n",++cas,sz-2);
        }
    
        return 0;
    }





对于新的代码风格，节点数标号是从0到siz,其中标号为0和标号为1的是2个根。

因此答案是siz-1

新的代码风格：


    
    /* ***********************************************
    Author :111qqz
    Created Time :2017年11月14日 星期二 00时13分44秒
    File Name :103.cpp
    ************************************************ */
    
    #include <bits/stdc++.h>
    #define ms(a,x) memset(a,x,sizeof(a))
    typedef long long LL;
    using namespace std;
    const int N=3E5+7;
    struct PAM
    {
        int fail,cnt,len;
        int nxt[26];
    }st[N];
    char S[N];
    int n,now,sz;
    void pam_init()
    {
        ms(st,0);
        st[0].fail = st[1].fail = 1;
        st[1].len = -1;
        sz = 1;
    }
    void extend(int c,int pos)
    {
        int p = now;
        while (S[pos-st[p].len-1]!=S[pos]) p = st[p].fail;
        if (!st[p].nxt[c]){
        int np=++sz,q=st[p].fail;
        st[np].len=st[p].len+2;
        while (S[pos-st[q].len-1]!=S[pos]) q=st[q].fail;
        st[np].fail=st[q].nxt[c];
        st[p].nxt[c] = np;
        }
        now=st[p].nxt[c];
        st[now].cnt++;
    }
    int main()
    {
        int T,cas=0;
        cin>>T;
        while (T--)
        {
            scanf("%s",S);
            pam_init();
            for ( int i = 0 ,_=strlen(S); i < _ ; i++)
            extend(S[i]-'a',i);
            printf("Case #%d: %d\n",++cas,sz-1);
        }
        return 0;
    }
    






