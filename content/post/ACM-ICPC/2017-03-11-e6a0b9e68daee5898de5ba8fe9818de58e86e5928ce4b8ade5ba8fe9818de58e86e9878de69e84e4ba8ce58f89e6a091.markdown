---
author: 111qqz
date: 2017-03-11 11:34:40+00:00
draft: false
title: leetcode 105 根据前序遍历和中序遍历重构二叉树
type: post
url: /2017/03//
categories:
- 面试
---



思路：

分治搞之。

实际上两个vector就够了。。。4个会MLE(在leetcode上。。。

    
    /**
     * Definition for binary tree
     * struct TreeNode {
     *     int val;
     *     TreeNode *left;
     *     TreeNode *right;
     *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
     * };
     */
    class Solution {
    public:
        TreeNode* res;
        TreeNode* reConstructBinaryTree(vector<int> pre,vector<int> vin) {
            int siz = pre.size();
            if (siz==0) return NULL;
            int rt = pre[0];
            int pos=-1;
            for ( int i = 0 ; i < siz;  i++)
                if (vin[i]==rt) 
                {
                    pos = i;
                    break;
                }
            vector<int>preL,preR,vinL,vinR;
            for ( int i = 0 ; i < pos ; i++)
            {
                preL.push_back(pre[i+1]);
                vinL.push_back(vin[i]);
            }
            for ( int i = pos + 1 ; i < siz ;  i++)
            {
                preR.push_back(pre[i]);
                vinR.push_back(vin[i]);
            }
            TreeNode *head = new TreeNode(rt);
            head->left = reConstructBinaryTree(preL,vinL);
            head->right = reConstructBinaryTree(preR,vinR);
            return head;
            
    
        }
    };



    
    /* ***********************************************
    Author :111qqz
    Created Time :2017年04月05日 星期三 16时21分35秒
    File Name :105.cpp
    ************************************************ */
    /**
    
     * Definition for a binary tree node.
    
     * struct TreeNode {
    
     *     int val;
    
     *     TreeNode *left;
    
     *     TreeNode *right;
    
     *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
    
     * };
    
     */
    
    class Solution {
    
    public:
    
        TreeNode* buildTree(vector<int>& preorder, vector<int>& inorder) {
    
    	int siz = preorder.size();
    	if (siz==0) return NULL;
    	int rt = preorder[0];
    	int pos;
    	for ( int i = 0 ; i < siz ; i++)
    	{
    	    if (inorder[i]==rt)
    	    {
    		pos = i;
    		break;
    	    }
    	}
    	vector<int>preL,inL;
    	TreeNode *head = new TreeNode(rt);
    	for ( int i = 0 ; i < pos ; i++)
    	{
    	    preL.push_back(preorder[i+1]);
    	    inL.push_back(inorder[i]);
    	}	
    	head->left = buildTree(preL,inL);
    
    	preL.clear();
    	inL.clear();
    	for ( int i = pos + 1 ; i < siz;  i++)
    	{
    	    preL.push_back(preorder[i]);
    	    inL.push_back(inorder[i]);
    	}
    	head->right = buildTree(preL,inL);
    	return head;
    
        }
    
    };
    



