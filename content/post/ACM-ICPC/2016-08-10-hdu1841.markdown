---
author: 111qqz
date: 2016-08-10 20:48:04+00:00
draft: false
title: hdu 1841 Find the Shortest Common Superstring (kmp)
type: post
url: /2016/08/hdu1841/
categories:
- ACM
tags:
- kmp
---

[hdu 1841题目链接](http://acm.hdu.edu.cn/showproblem.php?pid=1841)
题意：给两个字符串，问包含这两个字符串的最小的字符串的长度（最小是因为，一个串的**子串**可能是另一个串的后缀，这样出现一次就可以了）



思路：其实这道题最关键的思想部分是和kmp没有关系的。。。

我们考虑最naive的匹配方式。

**如果存在文本串的子串（_之前写成了后缀，特此更正，不一定是首尾拼接，这是和hdu 1867的区别_）等于模式串的前缀，那么这段子串或者后缀的长度为最后的j。**

两个串各做一次模式串和文本串。

不过暴力匹配复杂度爆炸，所以用了kmp。。。



upd:代码新添加了注释。



    
    /* ***********************************************
    Author :111qqz
    Created Time :2016年08月11日 星期四 04时32分08秒
    File Name :code/hdu/r1841.cpp
    ************************************************ */
    
    #include <cstdio>
    #include <cstring>
    #include <iostream>
    #include <algorithm>
    #include <vector>
    #include <queue>
    #include <stack>
    #include <set>
    #include <map>
    #include <string>
    #include <cmath>
    #include <cstdlib>
    #include <deque>
    #include <ctime>
    #define fst first
    #define sec second
    #define lson l,m,rt<<1
    #define rson m+1,r,rt<<1|1
    #define ms(a,x) memset(a,x,sizeof(a))
    typedef long long LL;
    #define pi pair < int ,int >
    #define MP make_pair
    
    using namespace std;
    const double eps = 1E-8;
    const int dx4[4]={1,0,0,-1};
    const int dy4[4]={0,-1,1,0};
    const int inf = 0x3f3f3f3f;
    const int N=1E6+7;
    int n;
    char a[N],b[N];
    int nxt[N];
    void getnxt(char *s)
    {
        int i = 0;
        int j = -1;
        int n = strlen(s);
        nxt[0] = -1;
        while (i<n)
    	if (j==-1||s[i]==s[j]) nxt[++i]=++j;
    	else j = nxt[j];
    }
    int kmp(char *a,char *b)
    {
        int n = strlen(a);
        int m = strlen(b);
        getnxt(b);
        int i = 0 ;
        int j = 0;
        while (i<n&&j<m) //由于不一定哪个是模式串，所以要记得判边界j<m,因为这个而wa了一发
        {
    	if (j==-1||a[i]==b[j]) i++,j++;
    	else j = nxt[j];
        }
     
        return j; //这道题只要求得到一个串同时包含这两个字符串，不是首尾拼接也可以，所以不用判断文本串是否为后缀（i==n)
        return 0;
    }
    int main()
    {
    	#ifndef  ONLINE_JUDGE 
    	freopen("code/in.txt","r",stdin);
      #endif
    
    	int T;
    	cin>>T;
    	while (T--)
    	{
    	    scanf("%s",a);
    	    scanf("%s",b);
    	    int ans = kmp(a,b);
    	    ans = max(ans,kmp(b,a));
    	    ans = strlen(a)+strlen(b)-ans;
    	    printf("%d\n",ans);
    	}
    
    
      #ifndef ONLINE_JUDGE  
      fclose(stdin);
      #endif
        return 0;
    }
    
