---
author: 111qqz
date: 2016-07-13 16:01:33+00:00
draft: false
title: poj 2349 Arctic Network (mst)
type: post
url: /2016/07/poj-2349/
categories:
- ACM
tags:
- mst
---

[Poj2349题目链接](http://poj.org/problem?id=2349)

题意：给出n个点坐标。。。然后可以建s个卫星基站。。。有卫星基站的地方之间可以互相免费通信。。现在要建一些无线电通讯线路（不同于卫星基站，是另一种通信方式），两个点之间线路的代价是他们的距离。。。问最小距离是多少。。。使得任意两个点之间都可以直接或者间接联系。。。

思路：mst即可。。。s个卫星基站可以减少s-1条最大的边。。。多组数据。。m忘记清0.。。re一发。。。2a

 

    
    /* ***********************************************
    Author :111qqz
    Created Time :2016年07月13日 星期三 16时35分42秒
    File Name :code/poj/2349.cpp
     ************************************************ */
    
    #include <cstdio>
    #include <cstring>
    #include <iostream>
    #include <algorithm>
    #include <vector>
    #include <queue>
    #include <set>
    #include <map>
    #include <string>
    #include <cmath>
    #include <cstdlib>
    #include <ctime>
    #define fst first
    #define sec second
    #define lson l,m,rt<<1
    #define rson m+1,r,rt<<1|1
    #define ms(a,x) memset(a,x,sizeof(a))
    typedef long long LL;
    #define pi pair < int ,int >
    #define MP make_pair
    
    using namespace std;
    const double eps = 1E-8;
    const int dx4[4]={1,0,0,-1};
    const int dy4[4]={0,-1,1,0};
    const int inf = 0x3f3f3f3f;
    const int N=505;
    int n,s;
    int m;
    int f[N]; 
    struct Edge
    {
        int u,v;
        double w;
    
        bool operator < (Edge b)const
        {
    	return w<b.w;
        }
    }edge[N*N];
    struct point 
    {
        double x,y;
    
        void input()
        {
    	scanf("%lf%lf",&x,&y);
        }
    
        double dis( point b)
        {
    	double res = 0 ;
    	res = (x-b.x)*(x-b.x)+(y-b.y)*(y-b.y);
    	return sqrt(res);
        }
    }p[N];
    
    void init()
    {
        for ( int i = 1 ; i <= n ; i++) f[i] = i;
    }
    
    int root ( int x)
    {
        if (x!=f[x]) f[x] = root (f[x]);
        return f[x];
    }
    
    void merge( int x,int y)
    {
        int rx = root(x);
        int ry = root(y);
        if (rx==ry) return;
        f[rx] = ry;
    }
    int main()
    {
    #ifndef  ONLINE_JUDGE 
        freopen("code/in.txt","r",stdin);
    #endif
    
        int T;
        cin>>T;
        while (T--)
        {
    	scanf("%d%d",&s,&n);
    	init();
    	for ( int i = 1 ; i <= n ; i++) p[i].input();
    
    	m = 0;
    	for ( int i = 1 ; i <= n ; i++)
    	    for ( int j = 1 ; j <= n ; j++)
    		if (i<j)
    		{
    		    m++;
    		    edge[m].u = i;
    		    edge[m].v = j;
    		    edge[m].w = p[i].dis(p[j]);
    		}
    
    	sort(edge+1,edge+m+1);
    
    	int cnt = 0 ;
    	double ans;
    	for ( int i = 1 ; i  <= m ; i++)
    	{
    	    int u = edge[i].u;
    	    int v = edge[i].v;
    	    double w = edge[i].w;
    	    if (root(u)==root(v)) continue;
    	    merge(u,v);
    	    ans = w;
    	    cnt++;
    	    if (cnt>=n-s) break;
    	}
    
    	printf("%.2f\n",ans);
        }
    
    #ifndef ONLINE_JUDGE  
    	fclose(stdin);
    #endif
    	return 0;
    }
    




