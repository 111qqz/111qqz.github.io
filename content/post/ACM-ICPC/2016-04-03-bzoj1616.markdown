---
author: 111qqz
date: 2016-04-03 07:52:18+00:00
draft: false
title: 'BZOJ 1616: [Usaco2008 Mar]Cow Travelling游荡的奶牛(DP)'
type: post
url: /2016/04/bzoj1616/
categories:
- ACM
tags:
- dp
---




## 1616: [Usaco2008 Mar]Cow Travelling游荡的奶牛


Time Limit: 5 Sec  Memory Limit: 64 MB
Submit: 1012  Solved: 553
[[Submit](http://www.lydsy.com/JudgeOnline/submitpage.php?id=1616)][[Status](http://www.lydsy.com/JudgeOnline/problemstatus.php?id=1616)][[Discuss](http://www.lydsy.com/JudgeOnline/bbs.php?id=1616)]


## Description






奶牛们在被划分成N行M列(2 <= N <= 100; 2 <= M <= 100)的草地上游走，试图找到整块草地中最美味的牧草。Farmer John在某个时刻看见贝茜在位置 (R1, C1)，恰好T (0 < T <= 15)秒后，FJ又在位置(R2, C2)与贝茜撞了正着。 FJ并不知道在这T秒内贝茜是否曾经到过(R2, C2)，他能确定的只是，现在贝茜在那里。 设S为奶牛在T秒内从(R1, C1)走到(R2, C2)所能选择的路径总数，FJ希望有一个程序来帮他计算这个值。每一秒内，奶牛会水平或垂直地移动1单位距离（奶牛总是在移动，不会在某秒内停在它上一秒所在的点）。草地上的某些地方有树，自然，奶牛不能走到树所在的位置，也不会走出草地。 现在你拿到了一张整块草地的地形图，其中'.'表示平坦的草地，'*'表示挡路的树。你的任务是计算出，一头在T秒内从(R1, C1)移动到(R2, C2)的奶牛可能经过的路径有哪些。






## Input






* 第1行: 3个用空格隔开的整数：N，M，T

* 第2..N+1行: 第i+1行为M个连续的字符，描述了草地第i行各点的情况，保证 字符是'.'和'*'中的一个 * 第N+2行: 4个用空格隔开的整数：R1，C1，R2，以及C2






## Output






* 第1行: 输出S，含义如题中所述






## Sample Input




4 5 6
...*.
...*.
.....
.....
1 3 1 5

输入说明:

草地被划分成4行5列，奶牛在6秒内从第1行第3列走到了第1行第5列。






## Sample Output




1

奶牛在6秒内从(1,3)走到(1,5)的方法只有一种（绕过她面前的树）。








题意：有一直奶牛0时刻在(c1,r1),T时刻在(c2,r2)，问路径数。奶牛不能出界，不能静止不动。地图上有一些格子是树，也是不能经过的。




思路：能想到是dp,也能想到转移方程是dp[i][j][t]表示t时刻在（i,j）点的路径数。




也能想到初始化是dp[r1][c1][0]=1,其余为0.




也能想到转移方程是从上一个时间的四个相邻方向转移过来。




也能想到根据加法原理，t时间某点的方案数是t-1时间与这点相邻的点的方案数相加。




**但是写转移方程的时候还是没有写出来QAQ**




**被初始是在dp[r1][c1][0]这一点卡住了。。**




以为不能用循环写。。。大概要用dfs记忆化搜索之类。。。？ 然后写了写，没写出来QAQ.




但是其实是可以用的。




**还有一点就是dp数组的顺序不代表循环的顺序。。。**




dp数组的顺序其实怎么样都好。




循环的顺序。。。大概有点感觉，但是还没有很清晰，感觉和floyd比较类似？




floyd k,i,j的顺序是因为当某一点作为中间点，要更新所有能更新的。




这道题 t,i,j有点类似？ t时刻要更新所有点的路径数。。。？




还需要多做些dp来领悟下呢。




`












 

    
    /* ***********************************************
    Author :111qqz
    Created Time :2016年04月03日 星期日 14时39分21秒
    File Name :code/bzoj/1616.cpp
    ************************************************ */
    
    #include <cstdio>
    #include <cstring>
    #include <iostream>
    #include <algorithm>
    #include <vector>
    #include <queue>
    #include <set>
    #include <map>
    #include <string>
    #include <cmath>
    #include <cstdlib>
    #include <ctime>
    #define fst first
    #define sec second
    #define lson l,m,rt<<1
    #define rson m+1,r,rt<<1|1
    #define ms(a,x) memset(a,x,sizeof(a))
    typedef long long LL;
    #define pi pair < int ,int >
    #define MP make_pair
    
    using namespace std;
    const double eps = 1E-8;
    const int dx4[4]={1,0,0,-1};
    const int dy4[4]={0,-1,1,0};
    const int inf = 0x3f3f3f3f;
    const int N=103;
    int n,m,T;
    int dp[N][N][18];
    char maze[N][N];
    int r1,c1,r2,c2;
    
    void print()
    {
        for ( int i = 1 ; i <= n ; i++)
    	for ( int j = 1 ; j <= m ; j++)
    	    for ( int t = 1 ; t <= T ;  t++)
    		cout<<i<<" "<<j<<" "<<t<<" "<<dp[i][j][t]<<endl;
    }
    int main()
    {
    	#ifndef  ONLINE_JUDGE 
    	freopen("code/in.txt","r",stdin);
      #endif
    	cin>>n>>m>>T;
    	for ( int i = 1 ; i <= n ; i++) scanf("%s",maze[i]+1);
    	cin>>r1>>c1>>r2>>c2;
    
    	ms(dp,0);
    	dp[r1][c1][0]=1;
    	
    	for ( int t = 1 ;t  <= T ; t++)
    	{
    	    for ( int i = 1 ; i <= n ; i++)
    	    {
    		for ( int j = 1 ; j <= m ; j++)
    		{
    		    if (maze[i][j]=='*') continue;
    		    for ( int dir = 0 ; dir < 4 ; dir ++)
    		    {
    			dp[i+dx4[dir]][j+dy4[dir]][t]+=dp[i][j][t-1];
    		    }
    		}
    	    }
    	}
    //	print();
    	cout<<dp[r2][c2][T]<<endl;
    
      #ifndef ONLINE_JUDGE  
      fclose(stdin);
      #endif
        return 0;
    }
    



