---
author: 111qqz
date: 2016-04-04 06:40:18+00:00
draft: false
title: 'BZOJ 1626: [Usaco2007 Dec]Building Roads 修建道路 (MST)'
type: post
url: /2016/04/bzoj1626/
categories:
- ACM
tags:
- 最小生成树
---




## 1626: [Usaco2007 Dec]Building Roads 修建道路


Time Limit: 5 Sec  Memory Limit: 64 MB
Submit: 1362  Solved: 541
[[Submit](http://www.lydsy.com/JudgeOnline/submitpage.php?id=1626)][[Status](http://www.lydsy.com/JudgeOnline/problemstatus.php?id=1626)][[Discuss](http://www.lydsy.com/JudgeOnline/bbs.php?id=1626)]


## Description






Farmer John最近得到了一些新的农场，他想新修一些道路使得他的所有农场可以经过原有的或是新修的道路互达（也就是说，从任一个农场都可以经过一些首尾相连道路到达剩下的所有农场）。有些农场之间原本就有道路相连。 所有N(1 <= N <= 1,000)个农场（用1..N顺次编号）在地图上都表示为坐标为(X_i, Y_i)的点(0 <= X_i <= 1,000,000；0 <= Y_i <= 1,000,000)，两个农场间道路的长度自然就是代表它们的点之间的距离。现在Farmer John也告诉了你农场间原有的M(1 <= M <= 1,000)条路分别连接了哪两个农场，他希望你计算一下，为了使得所有农场连通，他所需建造道路的最小总长是多少。






## Input






* 第1行: 2个用空格隔开的整数：N 和 M

* 第2..N+1行: 第i+1行为2个用空格隔开的整数：X_i、Y_i * 第N+2..N+M+2行: 每行用2个以空格隔开的整数i、j描述了一条已有的道路， 这条道路连接了农场i和农场j






## Output






* 第1行: 输出使所有农场连通所需建设道路的最小总长，保留2位小数，不必做 任何额外的取整操作。为了避免精度误差，计算农场间距离及答案时 请使用64位实型变量






## Sample Input




4 1
1 1
3 1
2 3
4 3
1 4

输入说明:

FJ一共有4个坐标分别为(1,1)，(3,1)，(2,3)，(4,3)的农场。农场1和农场
4之间原本就有道路相连。







## Sample Output




4.00

输出说明:

FJ选择在农场1和农场2间建一条长度为2.00的道路，在农场3和农场4间建一
条长度为2.00的道路。这样，所建道路的总长为4.00，并且这是所有方案中道路
总长最小的一种。








思路：最小生成树，先把给的边处理了，然后添加所有没有给的边作为备选边，做最小生成树。




因为算距离往写sqrt 而WA了一发。。。。蠢哭












 

    
    /* ***********************************************
    Author :111qqz
    Created Time :2016年04月04日 星期一 13时49分48秒
    File Name :code/bzoj/1626.cpp
    ************************************************ */
    
    #include <cstdio>
    #include <cstring>
    #include <iostream>
    #include <algorithm>
    #include <vector>
    #include <queue>
    #include <set>
    #include <map>
    #include <string>
    #include <cmath>
    #include <iomanip>
    #include <cstdlib>
    #include <ctime>
    #define fst first
    #define sec second
    #define lson l,m,rt<<1
    #define rson m+1,r,rt<<1|1
    #define ms(a,x) memset(a,x,sizeof(a))
    typedef long long LL;
    #define pi pair < int ,int >
    #define MP make_pair
    
    using namespace std;
    const double eps = 1E-8;
    const int dx4[4]={1,0,0,-1};
    const int dy4[4]={0,-1,1,0};
    const int inf = 0x3f3f3f3f;
    const int N=1E3+7;
    int f[N];
    int n,m;
    bool conc[N][N];
    struct node
    {
        long double x,y;
    
        void input()
        {
    	cin>>x>>y;
        }
    
        long double dis(node p)
        {
    	long double res;
    	res = (x-p.x)*(x-p.x)+(y-p.y)*(y-p.y);
    	res = sqrt(res);
    	return res;
        }
    }p[N];
    
    struct edge
    {
        int u,v;
        long double  w;
    
        bool operator < (edge b)const
        {
    	return w<b.w;
        }
    
    }e[N*N];
    int root (int x)
    {
        if (x!=f[x]) f[x] = root (f[x]);
        return f[x];
    }
    
    void merge( int x,int y)
    {
    //    cout<<"x:"<<x<<" y:"<<y<<endl;
        int rx = root (x);
        int ry = root (y);
        if (rx!=ry)
        {
    	f[rx]=ry;
        }
    }
    int main()
    {
    	#ifndef  ONLINE_JUDGE 
    	freopen("code/in.txt","r",stdin);
      #endif
    
    	cin>>n>>m;
    	for ( int i = 1 ;i <= n ; i++) p[i].input();
            for ( int i = 1 ; i < N ; i++) f[i] =  i;	
    	ms(conc,false);
    	int total = 0 ;
    	for ( int i = 1 ; i <= m ; i++)
    	{
    	    int u,v;
    	    cin>>u>>v;
    	    conc[u][v] = true;
    	    conc[v][u] = true;
    	    if (root(u)==root(v)) continue;
    	    merge(u,v);
    	    total++;
    	}
        
    	int cnt = 0 ;
    	for ( int i = 1 ; i <= n ; i++)	
    	    for ( int j = i+1 ; j <= n ; j++)
    		if (!conc[i][j])
    		{
    		    ++cnt;
    		    e[cnt].u = i;
    		    e[cnt].v = j;
    		    e[cnt].w = p[i].dis(p[j]);
    		}
    
    	sort(e+1,e+cnt+1);
    //	cout<<"cnt:"<<cnt<<endl;
    	long double res = 0 ;
    	for ( int i = 1 ; i <= cnt ;i++)
    	{
    	    if (root(e[i].u)==root(e[i].v)) continue;
    	    merge(e[i].u,e[i].v);
    	    total++;
    	    res +=e[i].w;
    	  //  cout<<"res:"<<res<<endl;
    
    	    if (total>=n-1) break;
    	}
    
    	cout<<fixed<<setprecision(2)<<res<<endl;
    
    
    	
      #ifndef ONLINE_JUDGE  
      fclose(stdin);
      #endif
        return 0;
    }
    



