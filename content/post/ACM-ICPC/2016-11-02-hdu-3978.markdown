---
author: 111qqz
date: 2016-11-02 10:08:16+00:00
draft: false
title: hdu 3978 Evil teacher's Final Problem (斐波那契数列的循环节)
type: post
url: /2016/11/hdu-3978/
categories:
- ACM
tags:
- 循环节
- 斐波那契
---

题意：now he let you calculate G(n,k) .Here G(n,0) = f(n) , G(n,i) = f( G(n,i-1) ) (k >= i >= 1).其中f是斐波那契数列。

思路：其实就是hdu 4291的加强版：[hdu 4291 解题报告](https://111qqz.com/wordpress/2016/10/hdu-4291/)

开一个1E4的数组存一下每一层的循环节就好了。

[http://vjudge.net/contest/139429#overview](http://vjudge.net/contest/139429#overview)  告一段落，完结撒花！



    
    /* ***********************************************
    Author :111qqz
    Created Time :Tue 01 Nov 2016 08:31:22 PM CST
    File Name :code/hdu/3978.cpp
    ************************************************ */
    #include <cstdio>
    #include <cstring>
    #include <iostream>
    #include <algorithm>
    #include <vector>
    #include <queue>
    #include <set>
    #include <map>
    #include <string>
    #include <cmath>
    #include <cstdlib>
    #include <ctime>
    #define fst first
    #define sec second
    #define lson l,m,rt<<1
    #define rson m+1,r,rt<<1|1
    #define ms(a,x) memset(a,x,sizeof(a))
    typedef long long LL;
    #define pi pair < int ,int >
    #define MP make_pair
    using namespace std;
    const double eps = 1E-8;
    const int dx4[4]={1,0,0,-1};
    const int dy4[4]={0,-1,1,0};
    const int inf = 0x3f3f3f3f;
    struct Mat
    {
        LL mat[2][2];
        void clear()
        {
            ms(mat,0);
        }
    }M,M1;
    Mat mul (Mat a,Mat b,LL mod)
    {
        Mat c;
        c.clear();
        for ( int i = 0 ; i < 2 ; i++)
            for ( int j = 0 ; j < 2 ; j++)
                for ( int k  = 0 ; k < 2 ; k++)
                    c.mat[i][j] = (c.mat[i][j] + a.mat[i][k] * b.mat[k][j]%mod)%mod;
        return c;
    }
    Mat mat_ksm(Mat a,LL b,LL mod)
    {
        Mat res;
        res.clear();
        for ( int i = 0 ; i < 2 ; i++) res.mat[i][i] = 1;
        while (b>0)
        {
            if (b&1) res = mul(res,a,mod);
            b = b >> 1LL;
            a = mul(a,a,mod);
        }
        return res;
    }
    LL gcd(LL a,LL b)
    {
        return b?gcd(b,a%b):a;
    }
    const int N = 1E6+7;
    bool prime[N];
    int p[N];
    void isprime() //一个普通的筛
    {
        int cnt = 0 ;
        ms(prime,true);
        for ( int i = 2 ; i < N ; i++)
        {
            if (prime[i])
            {
                p[cnt++] = i ;
                for ( int j = i+i ; j < N ; j+=i) prime[j] = false;
            }
        }
    }
    LL ksm( LL a,LL b,LL mod)
    {
       LL res = 1;
       while (b>0)
       {
           if (b&1) res = (res * a) % mod;
           b = b >> 1LL;
           a = a * a % mod;
       }
       return res;
    }
    LL legendre(LL a,LL p) //勒让德符号,判断二次剩余
    {
        if (ksm(a,(p-1)>>1,p)==1) return 1;
        return -1;
    }
    LL pri[N],num[N];//分解质因数的底数和指数。
    int cnt; //质因子的个数
    void solve(LL n,LL pri[],LL num[])
    {
        cnt = 0 ;
        for ( int  i = 0 ; p[i] * p[i] <= n ; i++)
        {
            if (n%p[i]==0)
            {
                int Num = 0 ;
                pri[cnt] = p[i];
                while (n%p[i]==0)
                {
                    Num++;
                    n/=p[i];
                }
                num[cnt] = Num;
                cnt++;
            }
        }
        if (n>1)
        {
            pri[cnt] = n;
            num[cnt] = 1;
            cnt++;
        }
    }
    LL fac[N];
    int cnt2; //n的因子的个数
    void get_fac(LL n)//得到n的所有因子
    {
        cnt2 = 0 ;
        for (int i =  1 ; i*i <= n ; i++)
        {
            if (n%i==0)
            {
                if (i*i!=n)
                {
                    fac[cnt2++] = i ;
                    fac[cnt2++] = n/i;
                }
                else fac[cnt2++] = i;
            }
        }
    }
    LL find_loop(LL n)
    {
        solve(n,pri,num);
        LL ans = 1;
        for ( int i = 0 ; i < cnt ; i++)
        {
            LL rec = 1;
            if (pri[i]==2) rec = 3;
            else if (pri[i]==3) rec = 8;
            else if (pri[i]==5) rec = 20;
            else
            {
                if (legendre(5,pri[i])==1)
                    get_fac(pri[i]-1);
                else get_fac(2*pri[i]+2);
                sort(fac,fac+cnt2);
                for ( int j = 0 ; j < cnt2 ; j++) //挨个验证因子
                {
                    Mat tmp = mat_ksm(M,fac[j],pri[i]); //下标从0开始，验证fac[j]为循环节，应该看fib[0]==fib[fac[j]]和fib[1]==fib[fac[j]+1]是否成立
                    tmp = mul(tmp,M1,pri[i]);
                    if (tmp.mat[0][0]==1&&tmp.mat[1][0]==1)
                    {
                        rec = fac[j];
                        break;
                    }
                }
     
            }
            for ( int j = 1 ; j < num[i] ; j++)
                rec *=pri[i];
            ans = ans / gcd(ans,rec) * rec;
        }
        return ans;
    }
    void init()
    {
        M.clear();
        M.mat[0][1] = M.mat[1][0] = M.mat[1][1] = 1;
        M1.clear();
        M1.mat[0][0] = M1.mat[1][0] = 1;
    }
    LL get_fib(LL n,LL mod)
    {
        if (mod==1) return 0;
        Mat ret;
        ret = mat_ksm(M,n-1,mod);
        ret = mul(ret,M1,mod);
        return (ret.mat[1][0])%mod;
    }
    LL n,P;
    int k;feibonaqi
    map< LL,LL >mp;
    
    LL  loop[N];
    int main()
    {
    #ifndef  ONLINE_JUDGE 
        freopen("code/in.txt","r",stdin);
    #endif
        isprime();
        int T;
        cin>>T;
        init();
        int cas = 0 ;
        while (T--)
        {
    	scanf("%lld%d%lld",&n,&k,&P);
    	printf("Case #%d: ",++cas);
    	if (n==0||n==1)
    	{
    	    printf("1\n");
    	    continue;
    	}
    	loop[0] = P;
    	LL cur = n;
    	for (int i = 1; i <= k ; i++) loop[i] = find_loop(loop[i-1]);
    	for (int i = k ; i >= 0 ; i--) cur = get_fib(cur,loop[i]);
    	printf("%lld\n",cur);
        }
    #ifndef ONLINE_JUDGE  
        fclose(stdin);
    #endif
        return 0;
    }
    



