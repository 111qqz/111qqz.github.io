---
author: 111qqz
date: 2016-03-18 07:06:05+00:00
draft: false
title: ural 1057. Amount of Degrees (b进制数位dp)
type: post
url: /2016/03/ural1057/
categories:
- ACM
tags:
- dp
- 数位dp
---

[题目链接](http://acm.timus.ru/problem.aspx?space=1&num=1057)
题意：设条件A为一个数**恰好**是k个**互不相同**的b的整数次幂的和，问某一个区间内满足条件A的数的个数是有多少个。





_Example._ Let _X_=15, _Y_=20, _K_=2, _B_=2. By this example 3 numbers are the sum of exactly two integer degrees of number 2:










17 = 24+20,
18 = 24+21,
20 = 24+22.





思路：数位dp..需要理解清楚**恰好有k个b的互不相同的整数次幂**的和这句话。

如果恰好是b的整数幂。。可以转化成b进制。。

互不相同。。说明。。**所有位置上的数字要么是0，要么是1.**

于是题目可以转化成求某区间内，**满足一个数的b进制中恰好有k个1，其余都是0的数的个数有多少个。**

然后就是数位dp的套路了。。。

注意dp数组的大小。。。**应该按照位数最多的2进制考虑**。。。一开始是按照10进制考虑结果只开了dp[15][15]....简直蠢哭。





    
    /* ***********************************************
    Author :111qqz
    Created Time :2016年03月18日 星期五 12时13分55秒
    File Name :code/ural//1057.cpp
    ************************************************ */
    
    #include <cstdio>
    #include <cstring>
    #include <iostream>
    #include <algorithm>
    #include <vector>
    #include <queue>
    #include <set>
    #include <map>
    #include <string>
    #include <cmath>
    #include <cstdlib>
    #include <ctime>
    #define fst first
    #define sec second
    #define lson l,m,rt<<1
    #define rson m+1,r,rt<<1|1
    #define ms(a,x) memset(a,x,sizeof(a))
    typedef long long LL;
    #define pi pair < int ,int >
    #define MP make_pair
    
    using namespace std;
    const double eps = 1E-8;
    const int dx4[4]={1,0,0,-1};
    const int dy4[4]={0,-1,1,0};
    const int inf = 0x3f3f3f3f;
    int l,r;
    int k,base;
    int digit[700];
    int dp[700][700];
    
    
    int dfs( int pos , int cnt, bool limit)
    {
        if (pos==0) return cnt==0;
        if (cnt<0) return 0;
    
        if (!limit&&dp[pos][cnt]!=-1) return dp[pos][cnt];
    
        int mx = limit?digit[pos]:1;
       // int mx = 1;
        int res = 0 ;
        for ( int i = 0 ; i <= mx ; i ++)
        {
    	if (i>1) continue;
    	res += dfs(pos-1,i==1?cnt-1:cnt,limit&&i==mx);
        }
        return limit?res:dp[pos][cnt] = res;
    }
    int solve(int n )
    {
        ms(digit,0);
        int len = 0 ;
        while (n)
        {
    	digit[++len] = n % base;
    	n/=base;
        }
    
        return dfs(len,k,true);
    }
    int main()
    {
    	#ifndef  ONLINE_JUDGE 
    	freopen("code/in.txt","r",stdin);
    	 #endif
    //	ios::sync_with_stdio(false);
    	ms(dp,-1);
    	cin>>l>>r;
    	cin>>k>>base;
    //	cout<<"solve(r):"<<solve(r)<<" solve(l-1):"<<solve(l-1)<<endl;
    	int ans = solve (r) - solve (l-1);
    	cout<<ans<<endl;
    
      #ifndef ONLINE_JUDGE 
      fclose(stdin);
      #endif
        return 0;
    }
    



