---
author: 111qqz
date: 2017-03-29 13:27:24+00:00
draft: false
title: 今日头条笔试题-木棒拼图(数学)
type: post
url: /2017/03/-/
categories:
- 面试
tags:
- math
---

有一个由很多木棒构成的集合，每个木棒有对应的长度，请问能否用集合中的这些木棒以某个顺序首尾相连构成一个面积大于 0 的简单多边形且所有木棒都要用上，简单多边形即不会自交的多边形。

初始集合是空的，有两种操作，要么给集合添加一个长度为 L 的木棒，要么删去集合中已经有的某个木棒。每次操作结束后你都需要告知是否能用集合中的这些木棒构成一个简单多边形。




##### **输入描述:**


每组测试用例仅包含一组数据，每组数据第一行为一个正整数 n 表示操作的数量(1 ≤ n ≤ 50000) ， 接下来有n行，每行第一个整数为操作类型 i (i ∈ {1,2})，第二个整数为一个长度 L(1 ≤ L ≤ 1,000,000,000)。如果 i=1 代表在集合内插入一个长度为 L 的木棒，如果 i=2 代表删去在集合内的一根长度为 L 的木棒。输入数据保证删除时集合中必定存在长度为 L 的木棒，且任意操作后集合都是非空的。




##### **输出描述:**


对于每一次操作结束有一次输出，如果集合内的木棒可以构成简单多边形，输出 "Yes" ，否则输出 "No"。




##### **输入例子:**



    
    5
    1 1
    1 1
    1 1
    2 1
    1 2





##### **输出例子:**



    
    No
    No
    Yes
    No
    No


能组成n边形的条件可以由三角形推广而来..(虽然只是猜想...
也就是n-1条较小边的和大于最大边...事实证明这结论是对的orz..
然后就是multiset就好...

    
    /* ***********************************************
    Author :111qqz
    Created Time :2017年03月29日 星期三 21时17分02秒
    File Name :code/toutiao2.cpp
    ************************************************ */
    
    #include <cstdio>
    #include <cstring>
    #include <iostream>
    #include <algorithm>
    #include <vector>
    #include <queue>
    #include <set>
    #include <map>
    #include <string>
    #include <cmath>
    #include <cstdlib>
    #include <ctime>
    #define fst first
    #define sec second
    #define lson l,m,rt<<1
    #define rson m+1,r,rt<<1|1
    #define ms(a,x) memset(a,x,sizeof(a))
    typedef long long LL;
    #define pi pair < int ,int >
    #define MP make_pair
    
    using namespace std;
    const double eps = 1E-8;
    const int dx4[4]={1,0,0,-1};
    const int dy4[4]={0,-1,1,0};
    const int inf = 0x3f3f3f3f;
    int n;
    multiset<long long>se;
    int main()
    {
    	#ifndef  ONLINE_JUDGE 
    	freopen("code/in.txt","r",stdin);
      #endif
    	cin>>n;
    	while (n--)
    	{
    	    LL x,y;
    	    scanf("%lld%lld",&x,&y);
    	    if (x==1) se.insert(y);
    	    else se.erase(se.find(y));
    	    if (se.size()<=2)
    	    {
    		puts("No");
    		continue;
    	    }
    	    LL mx = -1;
    	    LL sum = 0 ;
    	    for ( auto it = se.begin() ; it!=se.end() ; it++)
    	    {
    		sum = sum + *it;
    		if (*it>mx) mx = *it;
    	    }
    	    sum -=mx;
    	    if (sum>mx)
    	    {
    		puts("Yes");
    	    }
    	    else
    	    {
    		puts("No");
    	    }
    	}
    	    
    
      #ifndef ONLINE_JUDGE  
      fclose(stdin);
      #endif
        return 0;
    }
    



