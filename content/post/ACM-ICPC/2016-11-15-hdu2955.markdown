---
author: 111qqz
date: 2016-11-15 11:19:56+00:00
draft: false
title: (dp专题004)hdu 2955Robberies（01背包变形）
type: post
url: /2016/11/hdu2955/
categories:
- ACM
tags:
- 01背包
- dp
---

[题目链接](http://acm.hdu.edu.cn/showproblem.php?pid=2955)

题意： 给出n个银行 ，以及抢劫每个银行可以得到的价值和被抓的概率，不同银行之间被抓的概率是相互独立的，现在给出安全概率p，只有当概率从小于安全概率时才是安全的，问最多能抢劫多少价值。

思路：一开始很直接就想到把概率算成容量，

于是就成了经典的01背包，然后发现概率是double型。。。想当然得以为最多是2位小数，于是都*100转化成了整数做01背包。

然而正确思路是，**把银行价值看成背包容量，而背包价值是概率！**

将危险的概率转化成安全概率（1-危险概率=安全概率)

然后做01背包。

然后从大到小扫一遍价值，第一个大于安全概率的就是答案。

注意精度。

    
    /* ***********************************************
    Author :111qqz
    Created Time :Tue 15 Nov 2016 06:53:53 PM CST
    File Name :code/hdu/2955.cpp
    ************************************************ */
    #include <cstdio>
    #include <cstring>
    #include <iostream>
    #include <algorithm>
    #include <vector>
    #include <queue>
    #include <stack>
    #include <set>
    #include <map>
    #include <string>
    #include <cmath>
    #include <cstdlib>
    #include <deque>
    #include <ctime>
    #define fst first
    #define sec second
    #define lson l,m,rt<<1
    #define rson m+1,r,rt<<1|1
    #define ms(a,x) memset(a,x,sizeof(a))
    typedef long long LL;
    #define pi pair < int ,int >
    #define MP make_pair
    using namespace std;
    const double eps = 1E-8;
    const int dx4[4]={1,0,0,-1};
    const int dy4[4]={0,-1,1,0};
    const int inf = 0x3f3f3f3f;
    const int N=105;
    double dp[N];
    double p;
    int n,V;
    int value[N];
    double cost[N];
    void solve(double Cost,int Value)
    {
            for ( int i = V ; i >= Value ; i--)
                    dp[i] = max(dp[i],dp[i-Value]*Cost);
    }
    int dblcmp( double d)
    {
        return d<-eps?-1:d>eps;
    }
    int main()
    {
      #ifndef  ONLINE_JUDGE
        freopen("code/in.txt","r",stdin);
      #endif
       int T;
       cin>>T;
       while (T--)
       {
            
    
            scanf("%lf%d",&p,&n);
            p = 1 - p;	
    	V = 0 ;
            for ( int i = 1; i <= n ; i++)
            {
                    scanf("%d%lf",&value[i],&cost[i]);
                    cost[i] = 1 - cost[i];
    		V = V + value[i];
            }
    	for ( int i = 0 ; i <= V ; i++) dp[i] =  0;
            for ( int i = 1 ; i <= n ; i++)
                    solve(cost[i],value[i]);
          
            for ( int i = V ; i >= 0 ; i--)
    	{
    	    if (dblcmp(dp[i]-p)>0)
    	    {
    		printf("%d\n",i);
    		break;
    	    }
    	}
       }
    #ifndef ONLINE_JUDGE
      fclose(stdin);
      #endif
        return 0;
    }
    



