---
author: 111qqz
date: 2017-09-26 06:56:57+00:00
draft: false
title: hdu 4288 Coder (离散化， 线段树，单点更新，区间合并)
type: post
url: /2017/09/hdu-4288/
categories:
- ACM
tags:
- 离散化
- 线段树
---

[题目链接](http://acm.hdu.edu.cn/showproblem.php?pid=4288)

题意：n（1E5）个操作，分为三种，add x表示将x加到集合中（保证集合中之前没有x)，del x表示从集合中删掉x(保证集合中一定右x),sum表示求集合中所有元素按从小到大排列后，所有的下标中满足i%5=3的a[i]的和。1=<x<=1E9

思路：很容易想到的是，由于插入和删除元素造成的位置改变是剧烈的，因此要分别维护i%5==k,k属于0..4的元素的和。

这道题的核心点在于，由于只有1E5个操作，**我们可以将元素离散化，这样做的目的是，将每个数和位置一一对应，每个位置用1或者0，表示该位置对应的元素是否在集合中。**

考虑线段树，维护6个域，1个是区间中，在集合中的元素个数，剩下5个域，分别表示**以该区间的端点为位置1**，位置x%i=k的元素的和（k属于0..4)。因此每个叶子节点都是位置1.

考虑PushUp, 区间元素和之间累加，难点在于其他5个域的维护。

假设当前区间为rt,那么对于sum[0..4] (sum代表的就是上面说的要维护的5个域），显然区间rt<<1的答案可以直接贡献给rt.

对于rt<<1|1的答案，考虑rt<<1|1中位置为%5==x的元素和，rt<<1中的元素个数为len个，那么rt<<1|1中sum[x]对 rt中的sum[(x+len)%5]有贡献。

反推出对rt 中 sum[i]有贡献的是rt<<1|1中的sum[(i-len+5)%5)]


    
    /* ***********************************************
    Author :111qqz
    Created Time :2017年09月26日 星期二 12时42分10秒
    File Name :4288.cpp
    ************************************************ */
    
    #include <cstdio>
    #include <cstring>
    #include <iostream>
    #include <algorithm>
    #include <vector>
    #include <queue>
    #include <set>
    #include <map>
    #include <string>
    #include <cmath>
    #include <cstdlib>
    #include <ctime>
    #define PB push_back
    #define fst first
    #define sec second
    #define lson l,m,rt<<1
    #define rson m+1,r,rt<<1|1
    #define ms(a,x) memset(a,x,sizeof(a))
    typedef long long LL;
    #define pi pair < int ,int >
    #define MP make_pair
    
    using namespace std;
    const double eps = 1E-8;
    const int dx4[4]={1,0,0,-1};
    const int dy4[4]={0,-1,1,0};
    const int inf = 0x3f3f3f3f;
    const int N=1E5+7;
    int n;
    struct Node
    {
        int cnt; //区间中，在集合中存在的元素的个数。
        LL sum[5]; //sum[i]表示该区间中，以区间起点为下标1开始计算时，位置为x%5==i时的元素的和。
    }tree[N<<2];
    struct Opt
    {
        int opt;
        LL val;
    }qu[N];
    LL H[N],A[N];
    int cnt;
    int Hash( int x)
    {
        return lower_bound(H,H+cnt,x)-H;
    }
    void PushUp( int rt)
    {
        tree[rt].cnt = tree[rt<<1].cnt + tree[rt<<1|1].cnt;
        for ( int i = 0 ; i < 5 ; i++)
        {
        int left_len = tree[rt<<1].cnt;
        tree[rt].sum[i] = tree[rt<<1].sum[i] + tree[rt<<1|1].sum[((i-left_len)%5+5)%5];
        }
    }
    void update( int p,int opt,int l,int r,int rt)
    {
        if (l==r)
        {
        if (opt==1)
        {
            tree[rt].cnt=1;
            tree[rt].sum[1]=H[p-1];
        }
        else
        {
            tree[rt].cnt=0;
            tree[rt].sum[1]=0;
        }
        return ;
        }
    
        int m = (l+r)>>1;
        if (p<=m) update(p,opt,lson);
        else update(p,opt,rson);
        PushUp(rt);
    }
    int main()
    {
        #ifndef  ONLINE_JUDGE 
        freopen("./in.txt","r",stdin);
      #endif
        while (~scanf("%d",&n))
        {
            ms(tree,0);
            cnt=0;
            for ( int i = 1 ; i <= n ; i++)
            {
            char tmp[5];
            scanf("%s",tmp);
            if (tmp[0]=='a')
            {
                qu[i].opt=1;
                int x;
                scanf("%d",&x);
                qu[i].val=x;
                H[cnt++]=x;
            }else if (tmp[0]=='d')
            {
                qu[i].opt=2;
                int x;
                scanf("%d",&x);
                qu[i].val = x;
            }else
            {
                qu[i].opt=3;
            }
            }
            sort(H,H+cnt);
            cnt = unique(H,H+cnt)-H;
            //cout<<"cnt:"<<cnt<<endl;    
            for ( int i = 1 ; i <= n ; i++)
            {
                LL ans = tree[1].sum[3];
                if (qu[i].opt==3) printf("%lld\n",ans);
                else
                {
                int x = Hash(qu[i].val)+1;
                //cout<<"val:"<<qu[i].val<<"x:"<<x<<" H[p-1]:"<<H[x-1]<<endl;
                update(x,qu[i].opt,1,cnt+1,1);
                }
            }
         }
      #ifndef ONLINE_JUDGE  
      fclose(stdin);
      #endif
        return 0;
    }
    








