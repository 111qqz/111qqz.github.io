---
author: 111qqz
date: 2016-11-22 15:08:14+00:00
draft: false
title: poj 1971  Parallelogram Counting
type: post
url: /2016/11/poj-1971/
categories:
- ACM
tags:
- math
---

[题目链接](http://poj.org/problem?id=1971)

题意：给出n（n<=1E3）个不同的点，问最多组成多少个平行四边形。

思路：这道题的关键是，对于平行四边形的判断条件，要利用平行四边形对角线的交点平分两条对角线的性质。

也就是说，如果两条线段的对角线重合，那么一定可以组成一个平行四边形。

因此统计中点的位置即可，复杂度n*n*lg(n*n)

    
    /* ***********************************************
    Author :111qqz
    Created Time :2016年11月22日 星期二 22时43分26秒
    File Name :code/poj/1971.cpp
    ************************************************ */
    
    #include <cstdio>
    #include <cstring>
    #include <iostream>
    #include <algorithm>
    #include <vector>
    #include <queue>
    #include <set>
    #include <map>
    #include <string>
    #include <cmath>
    #include <cstdlib>
    #include <ctime>
    #define fst first
    #define sec second
    #define lson l,m,rt<<1
    #define rson m+1,r,rt<<1|1
    #define ms(a,x) memset(a,x,sizeof(a))
    typedef long long LL;
    #define pi pair < int ,int >
    #define MP make_pair
    
    using namespace std;
    const double eps = 1E-8;
    const int dx4[4]={1,0,0,-1};
    const int dy4[4]={0,-1,1,0};
    const int inf = 0x3f3f3f3f;
    struct point
    {
        int x,y;
        bool operator < (point b)const
        {
    	if (x==b.x) return y<b.y;
    	return x<b.x;
        }
    }p[1005],mid[1001*1001];
    int n;
    int main()
    {
    	#ifndef  ONLINE_JUDGE 
    	freopen("code/in.txt","r",stdin);
      #endif
    	int T;
    	cin>>T;
    	while (T--)
    	{
    	    ms(mp,0);
    	    scanf("%d",&n);
    	    for ( int i = 1; i <= n ; i++) scanf("%d%d",&p[i].x,&p[i].y);
    	    int cnt = 0 ;
    	    for ( int i = 1; i <= n ; i++)
    		for ( int j = i +1 ; j <= n ;j++)
    		{
    		    mid[++cnt].x = p[i].x + p[j].x;
    		    mid[cnt].y = p[i].y + p[j].y;
    		}
    
    	    sort(mid+1,mid+cnt+1);
    	    LL ans = 0 ;
    	    int num = 0 ;
    	    for ( int i = 1; i <= cnt-1 ; i++)
    	    {
    		if (mid[i].x==mid[i+1].x&&mid[i].y==mid[i+1].y)
    		{
    		    num++;
    		    ans = ans + num;
    		}
    		else
    		{
    		    num = 0 ;
    		}
    	    }
    	    printf("%lld\n",ans);
    	}
    
    
      #ifndef ONLINE_JUDGE  
      fclose(stdin);
      #endif
        return 0;
    }
    





