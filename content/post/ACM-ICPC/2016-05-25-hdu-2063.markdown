---
author: 111qqz
date: 2016-05-25 09:43:01+00:00
draft: false
title: hdu 2063 过山车 (匈牙利算法模板题)
type: post
url: /2016/05/hdu-2063/
categories:
- ACM


tags:
- 二分图匹配
- 匈牙利算法
---

[hdu2063题目链接](http://acm.hdu.edu.cn/showproblem.php?pid=2063)

题意：求二分图最大匹配。

思路：匈牙利算法。

通过这三篇博客了解了相关概念，学习了匈牙利算法。
[趣写算法系列之--匈牙利算法](http://blog.csdn.net/dark_scope/article/details/8880547)
[二分图的最大匹配、完美匹配和匈牙利算法](http://blog.csdn.net/pi9nc/article/details/11848327)
[匈牙利算法详解](http://blog.csdn.net/acdreamers/article/details/8621130)



感受就是：这个是相对容易学的算法。。并没有名字那么不明觉厉。。。

主体就是一个dfs的过程。。。。

不过据说有比较多的应用。

所以打算切一些题目加深理解以后再回来总结。







 

    
    /* ***********************************************
    Author :111qqz
    Created Time :2016年05月25日 星期三 16时51分32秒
    File Name :code/hdu/2063.cpp
    ************************************************ */
    
    #include <cstdio>
    #include <cstring>
    #include <iostream>
    #include <algorithm>
    #include <vector>
    #include <queue>
    #include <set>
    #include <map>
    #include <string>
    #include <cmath>
    #include <cstdlib>
    #include <ctime>
    #define fst first
    #define sec second
    #define lson l,m,rt<<1
    #define rson m+1,r,rt<<1|1
    #define ms(a,x) memset(a,x,sizeof(a))
    typedef long long LL;
    #define pi pair < int ,int >
    #define MP make_pair
    
    using namespace std;
    const double eps = 1E-8;
    const int dx4[4]={1,0,0,-1};
    const int dy4[4]={0,-1,1,0};
    const int inf = 0x3f3f3f3f;
    const int N=1E3+7;
    int n,m,k;
    int head[N];
    int link[N];
    bool vis[N];
    int cnt;
    int tot;
    struct Edge
    {
        int to;
        int nxt;
    }edge[N];
    void addedge( int u,int v)
    {
        edge[cnt].to = v;
        edge[cnt].nxt = head[u];
        head[u] = cnt;
        cnt++;
    }
    
    bool dfs(int u)
    {
     //   cout<<"u:"<<u<<endl;
        for ( int i = head[u] ; i!=-1 ; i = edge[i].nxt) //对于每个妹子，枚举她喜欢的蓝孩纸
        {
    	int v = edge[i].to; //v为妹子u喜欢的蓝孩纸的编号
    	if (vis[v]) continue; //避免递归反复寻找同一个男孩子陷入死循环。
    	vis[v] = true;
    	if (link[v]==-1||dfs(link[v])) //如果这个男孩子是单身狗或者这个男孩子的女票还有其他男孩子可以选择（可以腾出位置）
    	{
    	    link[v] = u ;// 男孩子v和女孩子u在一起了。
    	    return true;
    	}
        }
        return false;
    }
    int hung(int n)
    {
        int ans = 0 ;
        ms(link,-1);
        for ( int i = 1 ; i <= n ; i++) //扫描每个妹子
        {
    	ms(vis,false);
    	if (dfs(i)) ans++;
        }
        return ans;
    }
    
    int main()
    {
    	#ifndef  ONLINE_JUDGE 
    	freopen("code/in.txt","r",stdin);
      #endif
    
    	
    	while (scanf("%d",&k)!=EOF)
    	{
    	    if (k==0) break;
    	    scanf("%d%d",&m,&n);
    	    ms(head,-1);
    	    cnt = 0 ;
    	    for ( int i = 1 ; i <= k ; i++)
    	    {
    		int u,v;
    		scanf("%d%d",&u,&v);
    		v = v + m; //调整编号，男生编号在女生之后。
    		addedge(u,v);
    	    }
    	    int ans = hung(m);
    	    printf("%d\n",ans);
    	}
    
      #ifndef ONLINE_JUDGE  
      fclose(stdin);
      #endif
        return 0;
    }
    



