---
author: 111qqz
date: 2016-07-25 13:26:14+00:00
draft: false
title: poj 3280 Cheapest Palindrome (区间dp)
type: post
url: /2016/07/poj-3280/
categories:
- ACM
tags:
- dp
- 区间dp
---

[poj 3280 题目链接](http://poj.org/problem?id=3280)

题意：一个字符串，给出添加一个字符或者删掉该字符的花费，问最小的话费使得字符串变成回文串。

思路：dp[i][j]表示区间[i,j]的字符串变成回文的最小花费。。。

这个可以想到。。dp[i][j] = dp[i+1][j-1] (a[i]==a[j])这个也可以想到。。。

增加和删除是等价的，所以取小的那个代价就行。。这个我也想到了。。

然后转移的地方没有特别明白。。。

和之前的找到一个划分的点k不同的是。。。

如果不等于。。

那么
 

    
    
    ,
    dp[i][j] = min(dp[i][j],dp[i+1][j]+cost[a[i]]);
    		dp[i][j] = min(dp[i][j],dp[i][j-1]+cost[a[j]]);







这个方程可以理解。。。但是感觉自己想不出来 QAQ

以及。。我初始化写错了。。。

以为是求 最小值就初始化成了0x3f...

但是这样是错的。。。

具体见代码注释。。。

    
    /* ***********************************************
    Author :111qqz
    Created Time :2016年07月25日 星期一 19时42分19秒
    File Name :code/poj/3280.cpp
     ************************************************ */
    #include <cstdio>
    #include <cstring>
    #include <iostream>
    #include <algorithm>
    #include <vector>
    #include <queue>
    #include <set>
    #include <map>
    #include <string>
    #include <cmath>
    #include <cstdlib>
    #include <ctime>
    #define fst first
    #define sec second
    #define lson l,m,rt<<1
    #define rson m+1,r,rt<<1|1
    #define ms(a,x) memset(a,x,sizeof(a))
    typedef long long LL;
    #define pi pair < int ,int >
    #define MP make_pair
    using namespace std;
    const double eps = 1E-8;
    const int dx4[4]={1,0,0,-1};
    const int dy4[4]={0,-1,1,0};
    const int inf = 0x3f3f3f3f;
    const int N=2E3+7;
    char s[N];
    int dp[N][N];
    int n,len;
    int cost[N];
    int a[N];
    int main()
    {
    #ifndef  ONLINE_JUDGE 
        freopen("code/in.txt","r",stdin);
    #endif
        scanf("%d%d",&n,&len);
        scanf("%s",s);
        for ( int i = 0 ; i < len ; i++)
        {
    	a[i] = s[i]-'a'+1;
        }
        //	for ( int i = 1 ; i <= len ; i++) cout<<"a[i]:"<<a[i]<<endl;
        getchar();
        for ( int i = 1 ; i <= n ; i++)
        {
    	char ch;
    	int val;
    	int x,y;
    	scanf("%c %d %d\n",&ch,&x,&y);
    	val = ch-'a'+1;
    	cost[val]=min(x,y);
        }
    
        ms(dp,0);
        //也告诉了我们。。。求最大最小和初始化成0还是正无穷没有关系。。。。要仔细分析。。
        //初始化成0可以理解成。。。初始不知道字符串。。认为是空。。。空是回文。。所以没有花费。。。
        //	for ( int i = 0 ; i < len ; i++)
        //	    dp[i][i] = cost[a[i]];   //错误的初始化。。。。智力-2
        //	
        //	这个初始化是错误的。 如果目前只有一个字符a，那么使之变成回文的除了增加一个a，删除一个a,还可以再两边增加两个相同的字符来实现。
        //	而这个初始化没有考虑第三种情况。。。好菜啊。
    
    
    
        for ( int l = 1 ; l < len ; l++)
    	for ( int i = 0,j = l ; j <len ; i++,j++)
    	{
    	    dp[i][j] = inf;
    	    //	cout<<"dp[i][j]:"<<dp[i][j]<<endl;
    	    if (a[i]==a[j]) dp[i][j] = dp[i+1][j-1];
    	    else 
    	    {
    		dp[i][j] = min(dp[i][j],dp[i+1][j]+cost[a[i]]);
    		dp[i][j] = min(dp[i][j],dp[i][j-1]+cost[a[j]]);
    	    }
    	    //	cout<<"dpi0[i][j]::::"<<dp[i][j]<<endl;
    	    //		for ( int k = i ; k < j ; k++)
    	    //		{
    	    //		    dp[i][j] = min(dp[i][j],dp[k+1][j]);
    	    //		    dp[i][j] = min(dp[i][j],dp[i][k]);
    	    //		    printf("i==%d j==%d k==%d dp[i][k]==%d dp[k+1][j]%d\n",i,j,k,dp[i][k],dp[k+1][j]);
    	    //		for ( int k = i ; k < j ; k++)
    	    //		    dp[i][j] = min(dp[i][j],dp[])
    	    //		}
    	    //		cout<<"i:"<<i<<" j:"<<j<<" dp[i][j]:"<<dp[i][j]<<endl;
    	    //	ans = min(dp[i][j],ans);
    	}
        printf("%d\n",dp[0][len-1]);
    #ifndef ONLINE_JUDGE  
        fclose(stdin);
    #endif
        return 0;
    }
    



