---
author: 111qqz
date: 2016-05-28 01:34:53+00:00
draft: false
title: hdu 1068 Girls and Boys (二分图的最大独立集，匈牙利算法)
type: post
url: /2016/05/hdu1068/
categories:
- ACM
tags:
- 匈牙利算法
- 最大独立集
---

[hdu 1068题目链接](http://acm.hdu.edu.cn/showproblem.php?pid=1068)
题意：有n个同学。。给出同学之间的 爱慕关系。。。选出一个集合使得集合中的人没有爱慕关系。问能选出的最大集合是多少。

思路：没有数据范围，差评！题意说得也不清楚。。由数据知道。。爱慕关系一定是相互的。。。

这道题实际上是二分图的最大独立集问题。


<blockquote>**最大独立集问题： 在Ｎ个点的图G中选出m个点，使这m个点两两之间没有边．求m最大值**</blockquote>




学到的一点是：对于二分图，可能并不能明显得分成两个不相交的集合，而是一个整体。（有左集合到又集合的边，同时有又集合到左集合的边，就是说每条边都是无相边。。？） 这其实等于把两个无向图叠加在了一起（从左指向右的和从又指向左的）

所以hungary得到的最大匹配数应该除以2，才是真正的最大匹配数。

 

    
    /* ***********************************************
    Author :111qqz
    Created Time :2016年05月28日 星期六 08时42分19秒
    File Name :code/hdu/1068.cpp
    ************************************************ */
    
    #include <cstdio>
    #include <cstring>
    #include <iostream>
    #include <algorithm>
    #include <vector>
    #include <queue>
    #include <set>
    #include <map>
    #include <string>
    #include <cmath>
    #include <cstdlib>
    #include <ctime>
    #define fst first
    #define sec second
    #define lson l,m,rt<<1
    #define rson m+1,r,rt<<1|1
    #define ms(a,x) memset(a,x,sizeof(a))
    typedef long long LL;
    #define pi pair < int ,int >
    #define MP make_pair
    
    using namespace std;
    const double eps = 1E-8;
    const int dx4[4]={1,0,0,-1};
    const int dy4[4]={0,-1,1,0};
    const int inf = 0x3f3f3f3f;
    const int N=1E3+5;
    int n;
    int head[N];
    //vector <int>edge[N];
    int link[N];
    bool vis[N];
    
    int cnt;
    struct Edge
    {
        int v;
        int nxt;
    }edge[10005];
    
    void addedge( int u,int v)
    {
        edge[cnt].v = v;
        edge[cnt].nxt = head[u];
        head[u] = cnt;
        cnt++;
    }
    
    int dfs ( int u)
    {
        for ( int i = head[u] ; i !=-1 ; i = edge[i].nxt)
        {
    	int v = edge[i].v;
    	if (vis[v]) continue;
    	vis[v] = true;
    
    	if (link[v]==-1||dfs(link[v]))
    	{
    	    link[v] = u ;
    	    return true;
    	}
        }
        return false;
    }
    int hungary()
    {
        ms(link,-1);
        
        int res = 0 ;
        for ( int i = 1 ; i <= n ; i++)
        {
    	ms(vis,false);
    	if (dfs(i)) res++;
        }
        return res/2;
    }
     
    int main()
    {
    	#ifndef  ONLINE_JUDGE 
    	freopen("code/in.txt","r",stdin);
      #endif
    
    	while (scanf("%d",&n)!=EOF)
    	{
    	    
    	    cnt = 0 ;
    	    ms(head,-1);
    
    	    for ( int i = 1 ; i <= n ; i++)
    	    {
    		int id,num;
    		scanf("%d: (%d)",&id,&num);
    		id++;
    		while (num--)
    		{
    		    int x;
    		    scanf("%d",&x);
    		    x++;
    		   addedge(id,x);
    		}
    	    }
    
    	    int ans =  n-hungary();
    	    
    	    printf("%d\n",ans);
    	}
    
    
      #ifndef ONLINE_JUDGE  
      fclose(stdin);
      #endif
        return 0;
    }
    







