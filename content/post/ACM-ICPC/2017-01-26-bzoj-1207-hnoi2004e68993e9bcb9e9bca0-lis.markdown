---
author: 111qqz
date: 2017-01-26 08:12:38+00:00
draft: false
title: 'BZOJ 1207: [HNOI2004]打鼹鼠 (LIS)'
type: post
url: /2017/01/bzoj-1207-hnoi2004-lis/
categories:
- ACM
tags:
- dp
- LIS
---




## 1207: [HNOI2004]打鼹鼠


Time Limit: 10 Sec  Memory Limit: 162 MB
Submit: 2854  Solved: 1390
[[Submit](http://www.lydsy.com/JudgeOnline/submitpage.php?id=1207)][[Status](http://www.lydsy.com/JudgeOnline/problemstatus.php?id=1207)][[Discuss](http://www.lydsy.com/JudgeOnline/bbs.php?id=1207)]


## Description






鼹鼠是一种很喜欢挖洞的动物，但每过一定的时间，它还是喜欢把头探出到地面上来透透气的。根据这个特点阿Q编写了一个打鼹鼠的游戏：在一个n*n的网格中，在某些时刻鼹鼠会在某一个网格探出头来透透气。你可以控制一个机器人来打鼹鼠，如果i时刻鼹鼠在某个网格中出现，而机器人也处于同一网格的话，那么这个鼹鼠就会被机器人打死。而机器人每一时刻只能够移动一格或停留在原地不动。机器人的移动是指从当前所处的网格移向相邻的网格，即从坐标为（i,j）的网格移向(i-1, j),(i+1, j),(i,j-1),(i,j+1)四个网格，机器人不能走出整个n*n的网格。游戏开始时，你可以自由选定机器人的初始位置。现在你知道在一段时间内，鼹鼠出现的时间和地点，希望你编写一个程序使机器人在这一段时间内打死尽可能多的鼹鼠。






## Input






第一行为n（n<=1000）, m（m<=10000），其中m表示在这一段时间内出现的鼹鼠的个数，接下来的m行每行有三个数据time,x,y表示有一只鼹鼠在游戏开始后time个时刻，在第x行第y个网格里出现了一只鼹鼠。Time按递增的顺序给出。注意同一时刻可能出现多只鼹鼠，但同一时刻同一地点只可能出现一只鼹鼠。






## Output






仅包含一个正整数，表示被打死鼹鼠的最大数目






## Sample Input




2 2
1 1 1
2 2 2





## Sample Output




1




## HINT







## Source




思路：很巧妙的题目。类比LIS，如果两只仓鼠的曼哈顿距离小于等于两只仓鼠出现的时间，那么就可以从一只仓鼠转移到另一只仓鼠。利用这个条件，做二维的LIS即可。

    
    /* ***********************************************
    Author :111qqz
    Created Time :2017年01月26日 星期四 15时39分26秒
    File Name :1207.cpp
    ************************************************ */
    
    #include <cstdio>
    #include <cstring>
    #include <iostream>
    #include <algorithm>
    #include <vector>
    #include <queue>
    #include <set>
    #include <map>
    #include <string>
    #include <cmath>
    #include <cstdlib>
    #include <ctime>
    #define fst first
    #define sec second
    #define lson l,m,rt<<1
    #define rson m+1,r,rt<<1|1
    #define ms(a,x) memset(a,x,sizeof(a))
    typedef long long LL;
    #define pi pair < int ,int >
    #define MP make_pair
    
    using namespace std;
    const double eps = 1E-8;
    const int dx4[4]={1,0,0,-1};
    const int dy4[4]={0,-1,1,0};
    const int inf = 0x3f3f3f3f;
    const int N=1E4+7;
    int n,m;
    int t[N],x[N],y[N];
    int dp[N] ; //dp[i]表示第i只仓鼠出现的时候，最多能打死几只仓鼠。
    int main()
    {
    	#ifndef  ONLINE_JUDGE 
    //	freopen("code/in.txt","r",stdin);
      #endif
    	
    	cin>>n>>m;
    	for ( int i = 1; i  <= m ; i++) scanf("%d%d%d",&t[i],&x[i],&y[i]);
    	int ans = 1;
    	ms(dp,0);
    	dp[1] = 1;
    	for ( int i = 2 ; i <= m ; i++)
    	{
    	    dp[i] = 1 ; //一个显然的结论是。。。初始位置一定在某个仓鼠处，而且如果在仓鼠i处，那么之前的仓鼠是放弃的。
    	    for ( int j = 1 ; j <= i-1 ; j++)
    	    {
    		if (abs(x[i]-x[j])+abs(y[i]-y[j])<=t[i]-t[j]) dp[i] = max(dp[i],dp[j]+1); //打完第j只仓鼠去打第i只仓鼠
    	    }
    	    ans = max(ans,dp[i]);
    	}
    	printf("%d",ans);
      #ifndef ONLINE_JUDGE  
      fclose(stdin);
      #endif
        return 0;
    }
    




