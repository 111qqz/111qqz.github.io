---
author: 111qqz
date: 2017-11-06 11:09:10+00:00
draft: false
title: hdu 6048  | 2017 Multi-University Training Contest - Team 2  D Puzzle (结论题)
type: post
url: /2017/11/hdu-6048/
categories:
- ACM
tags:
- 结论题
---

http://acm.hdu.edu.cn/showproblem.php?pid=6048



# 题意：





有 n * m - 1 个数，每次选择第 1,p + 1,p * 2 + 1…..
的顺序选择数，**先按左到右，再按从上到下的顺序**填入n * m 的格子，空格子可以和相邻的数字交换位置，问最后能否在格子中形成 1~ n * m - 1的数按从左到右，从上到下的顺序。



# 思路：



傻逼结论题。

_根据九宫格问题的结论：将矩阵中的数按先**从左到下右再从上到下**排成一列，其**逆序对**如果为偶数则一定有解，否则一定无解_

_根据九宫格问题的结论：将矩阵中的数按先**从左到下右再从上到下**排成一列，其**逆序对**如果为偶数则一定有解，否则一定无解_

_根据九宫格问题的结论：将矩阵中的数按先**从左到下右再从上到下**排成一列，其**逆序对**如果为偶数则一定有解，否则一定无解_

然后我们可以观察发现，按照题目中填数的策略

按照填入的顺序，每个数对逆序对的贡献分别是0,p-1,2_(p-1)... 0,p-1,2_(p-1)...

注意到当总数小于等于p时，所有数对逆序对就没有贡献了。

然后直接算等差数列就好了。

$$ sum = n_a_{1} + \frac{n_(n-1)}{2}*d $$

由于首项一直为0，所以只要算后面那部分就好了。


    
    /* ***********************************************
    Author :111qqz
    Created Time :2017年11月06日 星期一 18时45分04秒
    File Name :6048.cpp
    ************************************************ */
    
    #include <bits/stdc++.h>
    #define PB push_back
    #define fst first
    #define sec second
    #define lson l,m,rt<<1
    #define rson m+1,r,rt<<1|1
    #define ms(a,x) memset(a,x,sizeof(a))
    typedef long long LL;
    #define pi pair < int ,int >
    #define MP make_pair
    
    using namespace std;
    const double eps = 1E-8;
    const int dx4[4]={1,0,0,-1};
    const int dy4[4]={0,-1,1,0};
    const int inf = 0x3f3f3f3f;
    int n,m,p;
    int tot;
    LL ans;
    int main()
    {
        #ifndef  ONLINE_JUDGE 
        freopen("./in.txt","r",stdin);
      #endif
        int T;
        cin>>T;
        while (T--)
        {
            scanf("%d %d %d",&n,&m,&p);
            int tot = n*m-1;
            ans = 0;
            while (tot>p)  //when tot<p,the ans is 1
            {
            int num = (tot-1)/p+1; // 项数 
            LL tmp = num*(num-1)/2*(p-1);
            ans = ans + tmp;
            tot-=num;
            }
            printf("%s\n",ans%2LL?"NO":"YES");
        }
      #ifndef ONLINE_JUDGE  
      fclose(stdin);
      #endif
        return 0;
    }
    






