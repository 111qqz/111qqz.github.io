---
author: 111qqz
date: 2016-04-10 08:31:35+00:00
draft: false
title: 'BZOJ 1642: [Usaco2007 Nov]Milking Time 挤奶时间 (dp,类似LIS)'
type: post
url: /2016/04/bzoj1642/
categories:
- ACM
tags:
- LIS
---

## 


Time Limit: 5 Sec  Memory Limit: 64 MB
Submit: 667  Solved: 389
[[Submit](http://www.lydsy.com/JudgeOnline/submitpage.php?id=1642)][[Status](http://www.lydsy.com/JudgeOnline/problemstatus.php?id=1642)][[Discuss](http://www.lydsy.com/JudgeOnline/bbs.php?id=1642)]


## Description






贝茜是一只非常努力工作的奶牛，她总是专注于提高自己的产量。为了产更多的奶，她预计好了接下来的N (1 ≤ N ≤ 1,000,000)个小时，标记为0..N-1。 Farmer John 计划好了 M (1 ≤ M ≤ 1,000) 个可以挤奶的时间段。每个时间段有一个开始时间(0 ≤ 开始时间 ≤ N), 和一个结束时间 (开始时间 < 结束时间 ≤ N), 和一个产量 (1 ≤ 产量 ≤ 1,000,000) 表示可以从贝茜挤奶的数量。Farmer John 从分别从开始时间挤奶，到结束时间为止。每次挤奶必须使用整个时间段。 但即使是贝茜也有她的产量限制。每次挤奶以后，她必须休息 R (1 ≤ R ≤ N) 个小时才能下次挤奶。给定Farmer John 计划的时间段，请你算出在 N 个小时内，最大的挤奶的量。






## Input






第1行三个整数N，M，R.接下来M行，每行三个整数Si，Ei，Pi．






## Output






 最大产奶量．






## Sample Input




12 4 2
1 2 8
10 12 19
3 6 24
7 10 31





## Sample Output




43




## HINT






注意：结束时间不挤奶






思路：这题很像LIS啊。。由于每次结束要休息R的时间，所以把结束时间+R就好。

然后按照开始时间排序。

**dp[i]表示前i个任务安排最大的挤奶量。**

**初始化dp[i] = a[i].val**

**转移的时候 dp[i] = max(dp[i],dp[j]+a[i].val)  (j<i&&a[j].r<=a[i].l)**







 

    
    /* ***********************************************
    Author :111qqz
    Created Time :2016年04月10日 星期日 01时50分11秒
    File Name :code/bzoj/1642.cpp
    ************************************************ */
    
    #include <cstdio>
    #include <cstring>
    #include <iostream>
    #include <algorithm>
    #include <vector>
    #include <queue>
    #include <set>
    #include <map>
    #include <string>
    #include <cmath>
    #include <cstdlib>
    #include <ctime>
    #define fst first
    #define sec second
    #define lson l,m,rt<<1
    #define rson m+1,r,rt<<1|1
    #define ms(a,x) memset(a,x,sizeof(a))
    typedef long long LL;
    #define pi pair < int ,int >
    #define MP make_pair
    
    using namespace std;
    const double eps = 1E-8;
    const int dx4[4]={1,0,0,-1};
    const int dy4[4]={0,-1,1,0};
    const int inf = 0x3f3f3f3f;
    const int N=1E3+7;
    struct node
    {
        int l,r;
        int val;
    
        bool operator < (node b)const
        {
    	if (l==b.l) return r<b.r;
    	return l<b.l;
        }	
    }a[N];
    int n,m,R;
    int sum;
    int dp[N];
    
    int main()
    {
    	#ifndef  ONLINE_JUDGE 
    	freopen("code/in.txt","r",stdin);
      #endif
    
    	scanf("%d %d %d",&n,&m,&R);   //有点LIS的感觉...
    	for ( int i = 1 ; i <= m ; i++)
    	{
    	    scanf("%d %d %d",&a[i].l,&a[i].r,&a[i].val);
    	    a[i].r += R;
    	    a[i].r = min(a[i].r,n);
    	}
    	sort(a+1,a+m+1);
    
    	ms(dp,0);
    	for ( int i = 1 ;i  <= m ; i++) dp[i] =  a[i].val;
    
    //	for ( int i = 1 ; i <= m ; i++) cout<<dp[i]<<" ";
    //	cout<<endl;
    	int ans = -1;
    	for ( int i = 2 ; i <= m ; i++)
    	{
    	    for ( int j = 1 ; j < i ; j++)
    	    {
    		if (a[j].r<=a[i].l)
    		{
    		    dp[i] = max(dp[i],dp[j]+a[i].val);
    		}
    	    }
    //	    for ( int j = 1 ; j <= m ; j++) cout<<dp[j]<<" ";
    //	    cout<<endl;
    	    ans = max(ans,dp[i]);
    	}
    
    	printf("%d\n",ans);
    
    
      #ifndef ONLINE_JUDGE  
      fclose(stdin);
      #endif
        return 0;
    }
    



