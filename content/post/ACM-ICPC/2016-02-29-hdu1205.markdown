---
author: 111qqz
date: 2016-02-29 12:51:51+00:00
draft: false
title: hdu 1205  吃糖果 （鸽笼原理）
type: post
url: /2016/02/hdu1205/
categories:
- ACM
tags:
- math
- 抽屉原理
---

http://acm.hdu.edu.cn/showproblem.php?pid=1205
题意：有n种糖果，第i种糖果有a[i]个，相邻两次不能吃一样的糖果，问能否有办法吃完所有糖果...
思路：如果第i种糖果有k个的话，那么其他所有种类的糖果之和至少有k-1个，才可能吃完。复杂度O(n)
看到有人说是抽屉原理.....大概。。。？不过不太明显。。直接想就好吧

 

    
    /* ***********************************************
    Author :111qqz
    Created Time :2016年02月29日 星期一 20时40分00秒
    File Name :code/hdu/1205.cpp
    ************************************************ */
    
    #include <cstdio>
    #include <cstring>
    #include <iostream>
    #include <algorithm>
    #include <vector>
    #include <queue>
    #include <set>
    #include <map>
    #include <string>
    #include <cmath>
    #include <cstdlib>
    #include <ctime>
    #define fst first
    #define sec second
    #define lson l,m,rt<<1
    #define rson m+1,r,rt<<1|1
    #define ms(a,x) memset(a,x,sizeof(a))
    typedef long long LL;
    #define pi pair < int ,int >
    #define MP make_pair
    
    using namespace std;
    const double eps = 1E-8;
    const int dx4[4]={1,0,0,-1};
    const int dy4[4]={0,-1,1,0};
    const int inf = 0x3f3f3f3f;
    const int N=1E6+7;
    int n;
    LL a[N];
    LL total;
    
    int main()
    {
    	#ifndef  ONLINE_JUDGE 
    	freopen("code/in.txt","r",stdin);
      #endif
    
    	ios::sync_with_stdio(false);
    	int T;
    	cin>>T;
    	while (T--)
    	{
    	    cin>>n;
    	    total =  0;
    	    for ( int i = 1 ; i <= n ; i++)
    	    {
    		cin>>a[i];
    		total +=a[i];
    	    }
    
    
    
    	    bool ok = true;
    	    for ( int i = 1 ; i <= n ;  i++)
    	    {
    		LL x;
    		x= total-a[i];
    		if (x<a[i]-1)
    		{
    		    ok = false;
    		    break;
    		}
    	    }
    
    	    if (ok)
    	    {
    		puts("Yes");
    	    }
    	    else
    	    {
    		puts("No");
    	    }
    
    	}
    
      #ifndef ONLINE_JUDGE  
      fclose(stdin);
      #endif
        return 0;
    }
    



