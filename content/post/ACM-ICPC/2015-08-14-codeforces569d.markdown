---
author: 111qqz
date: 2015-08-14 22:20:00+00:00
draft: false
title: codeforces 569 D. Symmetric and Transitive  (组合数学　第二类斯特林数　贝尔数)
type: post
url: /2015/08/codeforces569d/
categories:
- ACM
tags:
- 第二类斯特林数
- 组合数学
- 贝尔数
---




D. Symmetric and Transitive







time limit per test


1.5 seconds









memory limit per test


256 megabytes









input


standard input









output


standard output











Little Johnny has recently learned about set theory. Now he is studying binary relations. You've probably heard the term "equivalence relation". These relations are very important in many areas of mathematics. For example, the equality of the two numbers is an equivalence relation.

A set ρ of pairs (_a_, _b_) of elements of some set _A_ is called a binary relation on set _A_. For two elements _a_ and _b_ of the set _A_ we say that they are in relation ρ, if pair ![](https://111qqz.com/wp-content/uploads/2015/11/0b7186aa95622708eb6d995d544aab5fb8ae680b.png)
, in this case we use a notation ![](https://111qqz.com/wp-content/uploads/2015/11/cd489cc594adbebb5e67b3e699f58e8db3bd5ac8.png)
.

Binary relation is equivalence relation, if:



	  1. It is reflexive (for any _a_ it is true that ![](https://111qqz.com/wp-content/uploads/2015/11/5173c0b45aad09847acac63958fc07b54b2c22ff.png)
);
	  2. It is symmetric (for any _a_, _b_ it is true that if ![](https://111qqz.com/wp-content/uploads/2015/11/cd489cc594adbebb5e67b3e699f58e8db3bd5ac8.png)
, then ![](http://codeforces.com/predownloaded/46/ca/46ca5a9d56d763b20dc888fd4dc68c18bd42e5b8.png)
);
	  3. It is transitive (if ![](https://111qqz.com/wp-content/uploads/2015/11/cd489cc594adbebb5e67b3e699f58e8db3bd5ac8.png)
 and ![](https://111qqz.com/wp-content/uploads/2015/11/0c74ec561bb1a04000d13857076c8ff42987da56.png)
, than ![](https://111qqz.com/wp-content/uploads/2015/11/bfd1d0cf2cf672e016a2d595342960ef740d07c1.png)
).

Little Johnny is not completely a fool and he noticed that the first condition is not necessary! Here is his "proof":

Take any two elements, _a_ and _b_. If ![](https://111qqz.com/wp-content/uploads/2015/11/cd489cc594adbebb5e67b3e699f58e8db3bd5ac8.png)
, then ![](http://codeforces.com/predownloaded/46/ca/46ca5a9d56d763b20dc888fd4dc68c18bd42e5b8.png)
 (according to property (2)), which means ![](https://111qqz.com/wp-content/uploads/2015/11/5173c0b45aad09847acac63958fc07b54b2c22ff.png)
 (according to property (3)).

It's very simple, isn't it? However, you noticed that Johnny's "proof" is wrong, and decided to show him a lot of examples that prove him wrong.

Here's your task: count the number of binary relations over a set of size _n_ such that they are symmetric, transitive, but not an equivalence relations (i.e. they are not reflexive).

Since their number may be very large (not 0, according to Little Johnny), print the remainder of integer division of this number by 109 + 7.









Input


A single line contains a single integer _n_ (1 ≤ _n_ ≤ 4000).









Output


In a single line print the answer to the problem modulo 109 + 7.









Sample test(s)










input



    
    1










output



    
    1










input



    
    2










output



    
    3










input



    
    3










output



    
    10
















Note


If _n_ = 1 there is only one such relation — an empty one, i.e. ![](https://111qqz.com/wp-content/uploads/2015/11/15870f757c0cd29c755a50d84b803b7f077a463c.png)
. In other words, for a single element _x_ of set _A_ the following is hold: ![](https://111qqz.com/wp-content/uploads/2015/11/8d17559b5998cfb9349fb95b6b37e015366586ed.png)
.

If _n_ = 2 there are three such relations. Let's assume that set _A_ consists of two elements, _x_ and _y_. Then the valid relations are ![](https://111qqz.com/wp-content/uploads/2015/11/15870f757c0cd29c755a50d84b803b7f077a463c.png)
,ρ = {(_x_, _x_)}, ρ = {(_y_, _y_)}. It is easy to see that the three listed binary relations are symmetric and transitive relations, but they are not equivalence relations.



给出n个元素的集合上满足传递律，交换律，但不满足自反律的二元关系个数．

还以为是我离散数学没认真听才没做出来．．．

题解：http://blog.csdn.net/mengzhengnan/article/details/47424295


 
 

    
    /*************************************************************************
    	> File Name: code/cf/#315/D.cpp
    	> Author: 111qqz
    	> Email: rkz2013@126.com 
    	> Created Time: 2015年08月15日 星期六 06时01分22秒
     ************************************************************************/
    
    #include<iostream>
    #include<iomanip>
    #include<cstdio>
    #include<algorithm>
    #include<cmath>
    #include<cstring>
    #include<string>
    #include<map>
    #include<set>
    #include<queue>
    #include<vector>
    #include<stack>
    #define y0 abc111qqz
    #define y1 hust111qqz
    #define yn hez111qqz
    #define j1 cute111qqz
    #define tm crazy111qqz
    #define lr dying111qqz
    using namespace std;
    #define REP(i, n) for (int i=0;i<int(n);++i)  
    typedef long long LL;
    typedef unsigned long long ULL;
    const int inf = 0x7fffffff;
    const int MOD=1E9+7;
    const int N=4E3+5;
    LL dp[N][N],c[N][N];
    void init()
    {
        dp[0][0] = 1;
        dp[1][1] = 1;
        for ( int i = 2; i < N; i++)
        {
    	dp[i][1] = dp[i-1][i-1];
    	for ( int j = 2 ; j <= i ; j++)
    	{
    	    dp[i][j] = (dp[i][j-1] + dp[i-1][j-1]) %MOD;
    	}
        }
    
        for ( int i = 1 ; i< N ;i++)
        {
    	c[i][0] = 1;
    	c[i][i] = 1;
    	for ( int j = 1 ; j<i ; j++)
    	{
    	    c[i][j] = (c[i-1][j-1] + c[i-1][j])%MOD;
    
    	}
        }
    }
    int main()
    {
        init();
        int n;
        int ans = 0;
        scanf("%d",&n);
        for ( int i = 0 ; i < n ; i++)
        {
    	ans = ans + c[n][i] * dp[i][i];
    	ans = ans % MOD;
        }
        cout<<ans<<endl;
      
    	return 0;
    }
    



