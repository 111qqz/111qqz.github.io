---
author: 111qqz
date: 2016-05-15 13:31:30+00:00
draft: false
title: 'BZOJ 1636: [Usaco2007 Jan]Balanced Lineup (RMQ模板题)'
type: post
url: /2016/05/bzoj1636/
categories:
- ACM


tags:
- rmq
---




## 1636: [Usaco2007 Jan]Balanced Lineup


Time Limit: 5 Sec  Memory Limit: 64 MB
Submit: 680  Solved: 493
[[Submit](http://www.lydsy.com/JudgeOnline/submitpage.php?id=1636)][[Status](http://www.lydsy.com/JudgeOnline/problemstatus.php?id=1636)][[Discuss](http://www.lydsy.com/JudgeOnline/bbs.php?id=1636)]


## Description






For the daily milking, Farmer John's N cows (1 <= N <= 50,000) always line up in the same order. One day Farmer John decides to organize a game of Ultimate Frisbee with some of the cows. To keep things simple, he will take a contiguous range of cows from the milking lineup to play the game. However, for all the cows to have fun they should not differ too much in height. Farmer John has made a list of Q (1 <= Q <= 200,000) potential groups of cows and their heights (1 <= height <= 1,000,000). For each group, he wants your help to determine the difference in height between the shortest and the tallest cow in the group.

每天,农夫 John 的N(1 <= N <= 50,000)头牛总是按同一序列排队. 有一天, John
决定让一些牛们玩一场飞盘比赛. 他准备找一群在对列中为置连续的牛来进行比赛.
但是为了避免水平悬殊,牛的身高不应该相差太大.
John 准备了Q (1 <= Q <= 180,000) 个可能的牛的选择和所有牛的身高 (1 <=
身高 <= 1,000,000). 他想知道每一组里面最高和最低的牛的身高差别.
注意: 在最大数据上, 输入和输出将占用大部分运行时间.






## Input






* Line 1: Two space-separated integers, N and Q. * Lines 2..N+1: Line i+1 contains a single integer that is the height of cow i * Lines N+2..N+Q+1: Two integers A and B (1 <= A <= B <= N), representing the range of cows from A to B inclusive.






## Output







6 3




1




7




3




4




2




5




1 5




4 6




2 2










## Sample Input




* Lines 1..Q: Each line contains a single integer that is a response
to a reply and indicates the difference in height between the
tallest and shortest cow in the range.





## Sample Output




6
3
0





## HINT







## Source






[Silver](http://www.lydsy.com/JudgeOnline/problemset.php?search=Silver)








rmq可以o(1)查询出某区间的最大值或者最小值。

以前觉得这个算法可能比较难。。今天一看，哪里难了。。。

大概的思想就是，把要查询的区间用两个相等长度的区间覆盖。

查询区间的最大值就是这两端区间的最大值再取最大值。

首先要做的是预处理。

dp[i][j]表示从i开始连续2^j个元素的最大值。

初始值dp[i][0] = a[i];





    
    /* ***********************************************
    Author :111qqz
    Created Time :2016年05月15日 星期日 21时04分57秒
    File Name :code/bzoj/1636.cpp
    ************************************************ */
    
    #include <cstdio>
    #include <cstring>
    #include <iostream>
    #include <algorithm>
    #include <vector>
    #include <queue>
    #include <set>
    #include <map>
    #include <string>
    #include <cmath>
    #include <cstdlib>
    #include <ctime>
    #define fst first
    #define sec second
    #define lson l,m,rt<<1
    #define rson m+1,r,rt<<1|1
    #define ms(a,x) memset(a,x,sizeof(a))
    typedef long long LL;
    #define pi pair < int ,int >
    #define MP make_pair
    
    using namespace std;
    const double eps = 1E-8;
    const int dx4[4]={1,0,0,-1};
    const int dy4[4]={0,-1,1,0};
    const int inf = 0x3f3f3f3f;
    const int N=5E4+7;
    int n,q;
    int a[N];
    int mx[N][20];
    int mi[N][20];
    
    void init_mx()
    {
        for ( int i = 1 ; i <= n ; i++)  mx[i][0] = a[i];  //初始化
        for ( int j = 1 ; (1<<j)<=n ; j ++)   //循环外面是j,里面是i的原因是，当更新一个长度为4的区间的最值时，依赖于长度为2的区间的最值。
    	for ( int i =1 ; i + (1<<j)-1<= n ; i++)  //因此要先完全更新完区间长度为2^j的，才能更新区间长度为2^(j+1)的
    	    mx[i][j] = max(mx[i][j-1],mx[i+(1<<(j-1))][j-1]);
    }
    
    int rmq_max(int L,int R)
    {
        int k = 0 ; 
        while (1<<(k+1)<=(R-L+1)) k++;  //使得两倍的区间长度大于所查询的区间
        return max(mx[L][k],mx[R-(1<<k)+1][k]);
    }
    
    void init_mi()
    {
        for ( int i = 1 ; i <= n ; i++) mi[i][0] = a[i];
        for ( int j = 1 ; (1<<j)<= n ; j++)
    	for ( int i = 1 ; i + (1<<j)-1 <= n ; i++)
    	    mi[i][j] = min(mi[i][j-1],mi[i+(1<<(j-1))][j-1]);
    }
    
    int q123(int L,int R)
    {
        int k = 0 ; 
        while (1<<(k+1)<=(R-L+1)) k++;  
        return min(mi[L][k],mi[R-(1<<k)+1][k]);
    }
    int main()
    {
    	#ifndef  ONLINE_JUDGE 
    	freopen("code/in.txt","r",stdin);
      #endif
    	scanf("%d %d",&n,&q);
    	for ( int i = 1 ; i <= n ; i++) scanf("%d",&a[i]);
    
    	init_mx();
            init_mi();	
    	while (q--)
    	{
    	    int l,r;
    	    scanf("%d %d",&l,&r);
    	    int ans = rmq_max(l,r)-q123(l,r);
    
    	    printf("%d\n",ans);
    
    	}
    	
    
    
      #ifndef ONLINE_JUDGE  
      fclose(stdin);
      #endif
        return 0;
    }
    
