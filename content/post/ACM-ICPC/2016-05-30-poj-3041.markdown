---
author: 111qqz
date: 2016-05-30 13:56:28+00:00
draft: false
title: poj 3041 Asteroids (二分图的最小顶点覆盖，匈牙利算法)
type: post
url: /2016/05/poj-3041/
categories:
- ACM
tags:
- 匈牙利算法
- 最小顶点覆盖
---

[poj 3041题目链接](http://poj.org/problem?id=3041)
题意：一个n*n的网格中，有k个大小为1*1的小行星，现在可以用激光枪每次消灭一行的小行星或者消灭一列的小行星。问最少需要使用多少次激光枪消灭所有的小行星。

思路：**一个建图技巧是：对于网格图，我们可以把某个格子的横纵坐标看成点，而格子所代表的内容看成边来建图。**

如果我们按照这样的方式建图，那么这道题的行或者列就成了点，而小行星就成了边。我们要做得是选最少的点，使得这些点覆盖所有的边。

根据**Knoig定理，二分图的最小顶点覆盖数等于二分图的最大匹配数。**

匈牙利一遍即可。1A



 

    
    /* ***********************************************
    Author :111qqz
    Created Time :2016年05月30日 星期一 21时42分55秒
    File Name :code/poj/3041.cpp
    ************************************************ */
    
    #include <cstdio>
    #include <cstring>
    #include <iostream>
    #include <algorithm>
    #include <vector>
    #include <queue>
    #include <set>
    #include <map>
    #include <string>
    #include <cmath>
    #include <cstdlib>
    #include <ctime>
    #define fst first
    #define sec second
    #define lson l,m,rt<<1
    #define rson m+1,r,rt<<1|1
    #define ms(a,x) memset(a,x,sizeof(a))
    typedef long long LL;
    #define pi pair < int ,int >
    #define MP make_pair
    
    using namespace std;
    const double eps = 1E-8;
    const int dx4[4]={1,0,0,-1};
    const int dy4[4]={0,-1,1,0};
    const int inf = 0x3f3f3f3f;
    const int N=1E3+7;
    const int M=1E4+7;
    int n,k;
    int cnt;
    struct Edge
    {
        int v;
        int nxt;
    }edge[M];
    
    int head[N];
    bool vis[N];
    int link[N];
    
    void addedge( int u,int v)
    {
        edge[cnt].v = v;
        edge[cnt].nxt = head[u];
        head[u] = cnt;
        cnt++;
    }
    void init()
    {
        ms(head,-1);
        cnt = 0 ;
    }
    
    int find( int u)
    {
        for ( int i = head[u] ; i !=-1 ; i = edge[i].nxt)
        {
    	int v = edge[i].v;
    	if (vis[v]) continue;
    	vis[v] = true;
    	if (link[v]==-1||find(link[v]))
    	{
    	    link[v] = u;
    	    return true;
    	}
        }
        return false;
    }
    int hungary()
    {
        int res = 0 ;
        ms(link,-1);
        for ( int i = 1 ; i <= n ; i ++)
        {
    	ms(vis,false);
    	if (find(i)) res++;
        }
        return res;
    }
    int main()
    {
    	#ifndef  ONLINE_JUDGE 
    	freopen("code/in.txt","r",stdin);
      #endif
    
    	init();
    	scanf("%d%d",&n,&k);
    	for ( int i = 1 ; i <= k ; i++)
    	{
    	    int u,v;
    	    scanf("%d%d",&u,&v);
    	    addedge(u,v+n);
    	}
    	int ans = hungary();
    	printf("%d\n",ans);
    
      #ifndef ONLINE_JUDGE  
      fclose(stdin);
      #endif
        return 0;
    }
    



