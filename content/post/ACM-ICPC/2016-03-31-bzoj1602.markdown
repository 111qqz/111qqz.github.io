---
author: 111qqz
date: 2016-03-31 12:57:27+00:00
draft: false
title: 'bzoj 1602: [Usaco2008 Oct]牧场行走 (bfs,优先队列)'
type: post
url: /2016/03/bzoj1602/
categories:
- ACM
tags:
- bfs
---

Description

N头牛（2<=n<=1000）别人被标记为1到n，在同样被标记1到n的n块土地上吃草，第i头牛在第i块牧场吃草。 这n块土地被n-1条边连接。 奶牛可以在边上行走，第i条边连接第Ai，Bi块牧场，第i条边的长度是Li（1<=Li<=10000）。 这些边被安排成任意两头奶牛都可以通过这些边到达的情况，所以说这是一棵树。 这些奶牛是非常喜欢交际的，经常会去互相访问,他们想让你去帮助他们计算Q(1<=q<=1000)对奶牛之间的距离。

Input

*第一行：两个被空格隔开的整数：N和Q

*第二行到第n行：第i+1行有两个被空格隔开的整数：AI，BI，LI

*第n+1行到n+Q行：每一行有两个空格隔开的整数：P1，P2，表示两头奶牛的编号。

Output

*第1行到第Q行：每行输出一个数，表示那两头奶牛之间的距离。

Sample Input

4 2

2 1 2

4 3 2

1 4 3

1 2

3 2

Sample Output

2

7



思路：直接bfs....貌似因为每个点最多只和两个边相连。。。不用优先队列也行？
1A,好爽23333.

    
    /* ***********************************************
    Author :111qqz
    Created Time :2016年03月31日 星期四 20时27分01秒
    File Name :code/bzoj/1602.cpp
    ************************************************ */
    
    #include <cstdio>
    #include <cstring>
    #include <iostream>
    #include <algorithm>
    #include <vector>
    #include <queue>
    #include <set>
    #include <map>
    #include <string>
    #include <cmath>
    #include <cstdlib>
    #include <ctime>
    #define fst first
    #define sec second
    #define lson l,m,rt<<1
    #define rson m+1,r,rt<<1|1
    #define ms(a,x) memset(a,x,sizeof(a))
    typedef long long LL;
    #define pi pair < int ,int >
    #define MP make_pair
    
    using namespace std;
    const double eps = 1E-8;
    const int dx4[4]={1,0,0,-1};
    const int dy4[4]={0,-1,1,0};
    const int inf = 0x3f3f3f3f;
    const int N=1E3+5;
    int n,q;
    vector< pi >edge[N];
    bool vis[N];
    int d[N];
    
    struct node
    {
        int x;
        int d;
        
        bool operator < (node b)const
        {
    	return d>b.d;
        }
    };
    
    int bfs( int s,int t)
    {
        priority_queue<node>q;
        ms(vis,false);
        node tmp;
        tmp.x = s;
        tmp.d = 0 ;
        q.push(tmp);
        vis[s] = true;
        while (!q.empty())
        {
    	node pre = q.top();q.pop();
    	if (pre.x==t) return pre.d;
    	for ( int i = 0 ; i < int(edge[pre.x].size()) ; i++)
    	{
    	    node nxt;
    	    nxt.x= edge[pre.x][i].fst;
    	    nxt.d = pre.d + edge[pre.x][i].sec;
    	    if (!vis[nxt.x])
    	    {
    
    		q.push(nxt);
    		vis[nxt.x] = true;
    	    }
    	}
        }
        return -1;
    
    }
    int main()
    {
    	#ifndef  ONLINE_JUDGE 
    	freopen("code/in.txt","r",stdin);
      #endif
    
    	ios::sync_with_stdio(false);
    	cin>>n>>q;
    	for ( int i = 1 ; i <= n-1 ; i++)
    	{
    	    int u,v,w;
    	    cin>>u>>v>>w;
    	    edge[u].push_back(make_pair(v,w));
    	    edge[v].push_back(make_pair(u,w));
    	}
    
    	while (q--)
    	{
    	    int s,t;
    	    cin>>s>>t;
    	    int ans = bfs(s,t);
    	    cout<<ans<<endl;
    	}
    
    
      #ifndef ONLINE_JUDGE  
      fclose(stdin);
      #endif
        return 0;
    }
    
