---
author: 111qqz
date: 2016-06-24 06:31:14+00:00
draft: false
title: poj 2342  Anniversary party (基础树形dp)
type: post
url: /2016/06/poj2342/
categories:
- ACM
tags:
- 树形dp
---

[题目链接](http://poj.org/problem?id=2342)

题意：n个人的上下级关系形成一棵树..每一个人有一个val（可正可负），要选若干个人参加一个party,要求是一个人和他的直接上级不能同时在场。问参加party的人最大的val之和。

思路：树形dp入门题。



dp[i][0]和dp[i][1]分别表示第i个人不参加和参加party对应的val和。

注意dp转移方程是放在每次dfs之后的回溯位置的。。。

这样做的话访问是从根节点到叶子节点，更新就成了从叶子节点到根节点。。。

联想到数字三角形...其实是一样的。。

sad...dp苦手如我也开始刷dp了吗。。。。

 

    
    /* ***********************************************
    Author :111qqz
    Created Time :2016年06月24日 星期五 13时07分51秒
    File Name :code/poj/2342.cpp
    ************************************************ */
    
    #include <cstdio>
    #include <cstring>
    #include <iostream>
    #include <algorithm>
    #include <vector>
    #include <queue>
    #include <set>
    #include <map>
    #include <string>
    #include <cmath>
    #include <cstdlib>
    #include <ctime>
    #define fst first
    #define sec second
    #define lson l,m,rt<<1
    #define rson m+1,r,rt<<1|1
    #define ms(a,x) memset(a,x,sizeof(a))
    typedef long long LL;
    #define pi pair < int ,int >
    #define MP make_pair
    
    using namespace std;
    const double eps = 1E-8;
    const int dx4[4]={1,0,0,-1};
    const int dy4[4]={0,-1,1,0};
    const int inf = 0x3f3f3f3f;
    const int N=6E3+7;
    int n;
    int a[N];
    int in[N];
    vector <int> edge[N];
    
    int dp[N][2];
    int root;
    void debug()
    {
        for ( int i = 1 ; i <= n ; i++)
    	printf("%d %d %d\n",i,dp[i][0],dp[i][1]);
    }
    void dfs ( int u,int pre)
    {
        
       // cout<<"u:"<<u<<endl;
        int siz = edge[u].size();
        for ( int i = 0 ; i < siz ; i ++)
        {
    	int v = edge[u][i];
    	if (v==pre) continue;
    	
    		
    	dfs(v,u);
    	dp[u][0] +=max(dp[v][0],dp[v][1]);  //如果父节点没选，那么当前节点可以有两种选择。	
    	dp[u][1] +=dp[v][0];              //如果父亲节点选了，那么当前节点只能不选。
    
    	
        }
    }
    int main()
    {
    	#ifndef  ONLINE_JUDGE 
    	freopen("code/in.txt","r",stdin);
      #endif
    
    	
    	ms(dp,0);
    	ms(in,0);
    	scanf("%d",&n);
    	for ( int i = 1 ; i <= n ; i++) scanf("%d",&a[i]);
    	
    	int u,v;
    	while (~scanf("%d%d",&u,&v))
    	{
    	    if (u==0&&v==0) break;
    	    in[u] ++;
    	    edge[v].push_back(u);
    	}
    	for ( int i = 1 ; i <= n; i++) if (in[i]==0) root = i ;
    	for ( int i = 1 ; i <= n ; i++) dp[i][1] = a[i];
    
    	dfs(root,-1);
    	
    	int mx = -inf;
    	mx = max(dp[root][0],dp[root][1]);
    	debug();
    	printf("%d\n",mx);
    
    
      #ifndef ONLINE_JUDGE  
      fclose(stdin);
      #endif
        return 0;
    }
    





