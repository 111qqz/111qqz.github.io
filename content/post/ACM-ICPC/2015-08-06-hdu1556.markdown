---
author: 111qqz
date: 2015-08-06 18:33:00+00:00
draft: false
title: hdu 1556Color the ball （树状数组，更新区间，查询单点）
type: post
url: /2015/08/hdu1556/
categories:
- ACM
tags:
- 树状数组
---




这道题和之前做的树状数组略有不同。




以前的都是更新单点，查询区间，这次反了过来。




做法差不多。




如果更新区间【x,y】增加１




那么只要 update (x,1),update (y+1,-1)




问单点的时候，sum(i)就是i点的值，而不是1..i的和。




可以看做告诉公路收费口的比喻，update (x,1)相当于入口




update (y+1,-1)相当于出口。




而sum(i)就相当于被几个告诉公路穿过，或者说i点属于几个高速公路，所以是求和




还记得noip2012的时候在tyvj上遇到了一道线段数的题，被＠Ocean　海洋兄用了一个高速公路的神奇比喻解法A掉了。




现在回想，原来是用了树状数组。






 

    
    /*************************************************************************
    	> File Name: code/hdu/1556.cpp
    	> Author: 111qqz
    	> Email: rkz2013@126.com 
    	> Created Time: 2015年08月07日 星期五 01时56分51秒
     ************************************************************************/
    
    #include<iostream>
    #include<iomanip>
    #include<cstdio>
    #include<algorithm>
    #include<cmath>
    #include<cstring>
    #include<string>
    #include<map>
    #include<set>
    #include<queue>
    #include<vector>
    #include<stack>
    #define y0 abc111qqz
    #define y1 hust111qqz
    #define yn hez111qqz
    #define j1 cute111qqz
    #define tm crazy111qqz
    #define lr dying111qqz
    using namespace std;
    #define REP(i, n) for (int i=0;i<int(n);++i)  
    typedef long long LL;
    typedef unsigned long long ULL;
    const int inf = 0x7fffffff;
    const int N=1E6+7;
    
    int n;
    int c[N];
    int lowbit( int x)
    {
        return x&(-x);
    }
    void update ( int x,int delta)
    {
        for ( int i = x; i <= N ; i = i + lowbit (i))
        {
    	c[i] = c[i] + delta;
        }
    }
    int sum ( int x)
    {
        int res = 0;
        for ( int i = x ; i >= 1 ; i = i - lowbit (i))
        {
    	res  = res + c[i];
        }
        return res;
    }
    int main()
    {
        while (scanf("%d",&n)!=EOF && n)
        {
    	memset(c,0,sizeof(c));
    	for ( int i = 1; i <= n ; i ++)
    	{
    	    int a,b;
    	    scanf("%d %d",&a,&b);
    	    update (a,1);
    	    update (b+1,-1);
    	}
    	cout<<sum(1);
    	for ( int i = 2 ; i <= n ; i ++)
    	{
    	    cout<<" "<<sum(i);   //sum(i) 就是位置i的值，而不是和，
    				//因为update 并没有更新区间，而是做了一个标记，具体可以用普通数组模拟一遍就明白了
    	}
    	cout<<endl;
        }
      
    	return 0;
    }
    



