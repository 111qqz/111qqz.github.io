---
author: 111qqz
date: 2017-01-30 16:09:22+00:00
draft: false
title: 'BZOJ 1303: [CQOI2009]中位数图（前缀/后缀和乱搞）'
type: post
url: /2017/01/bzoj-1303-cqoi2009/
categories:
- ACM
tags:
- 乱搞
- 前缀和
- 后缀和
---




## 1303: [CQOI2009]中位数图


Time Limit: 1 Sec  Memory Limit: 162 MB
Submit: 2480  Solved: 1529
[[Submit](http://www.lydsy.com/JudgeOnline/submitpage.php?id=1303)][[Status](http://www.lydsy.com/JudgeOnline/problemstatus.php?id=1303)][[Discuss](http://www.lydsy.com/JudgeOnline/bbs.php?id=1303)]


## Description




给出1~n的一个排列，统计该排列有多少个长度为奇数的连续子序列的中位数是b。中位数是指把所有元素从小到大排列后，位于中间的数。




## Input




第一行为两个正整数n和b ，第二行为1~n 的排列。




## Output




输出一个整数，即中位数为b的连续子序列个数。




## Sample Input




7 4
5 7 2 4 3 1 6




## Sample Output




4




## HINT






第三个样例解释：{4}, {7,2,4}, {5,7,2,4,3}和{5,7,2,4,3,1,6}
N<=100000




思路：这道题的思路还是比较经典的...把大于b的数看成1，小于b的数看成-1..于是一段以b为中位数的连续的长度为奇数的数列的和为0.

那么从b往前做一个后缀和，往后做一个前缀和...然后统计每个前缀和/后缀和的值的个数..

然后枚举前缀和/后缀和可能的值（-n..n，由于负数不好处理，整体+n，变成0..2n)

具体见代码

    
    /* ***********************************************
    Author :111qqz
    Created Time :2017年01月30日 星期一 20时13分11秒
    File Name :code/bzoj/1303.cpp
    ************************************************ */
    
    #include <cstdio>
    #include <cstring>
    #include <iostream>
    #include <algorithm>
    #include <vector>
    #include <queue>
    #include <set>
    #include <map>
    #include <string>
    #include <cmath>
    #include <cstdlib>
    #include <ctime>
    #define fst first
    #define sec second
    #define lson l,m,rt<<1
    #define rson m+1,r,rt<<1|1
    #define ms(a,x) memset(a,x,sizeof(a))
    typedef long long LL;
    #define pi pair < int ,int >
    #define MP make_pair
    
    using namespace std;
    const double eps = 1E-8;
    const int dx4[4]={1,0,0,-1};
    const int dy4[4]={0,-1,1,0};
    const int inf = 0x3f3f3f3f;
    const int N=1E5+7;
    int a[N];
    int sum[N];
    int l[N*2],r[N*2];
    int n,b;
    int pos;
    int main()
    {
    	#ifndef  ONLINE_JUDGE 
    	freopen("code/in.txt","r",stdin);
      #endif
    	scanf("%d%d",&n,&b);
    	for ( int i = 1 ; i <= n ; i++)
    	{
    	    scanf("%d",&a[i]);
    	    if (a[i]==b) a[i] = 0,pos = i;
    	    if (a[i]<b) a[i] = -1;
    	    if (a[i]>b) a[i] = 1;
    	}
    	l[n]=r[n]=1;//b所在的位置
    	int ans = 0;
    	for ( int i = pos-1 ; i >=1 ; i--) {sum[i]=sum[i+1]+a[i];l[sum[i]+n]++;}
    	for ( int i = pos+1 ; i <=n ; i++) {sum[i]=sum[i-1]+a[i];r[sum[i]+n]++;}
    	for ( int i = 0 ; i <= 2*n ; i++) ans +=l[i]*r[-i+2*n];
    	cout<<ans<<endl;
    
    	
    	
    
    
    
      #ifndef ONLINE_JUDGE  
      fclose(stdin);
      #endif
        return 0;
    }
    





