---
author: 111qqz
date: 2015-12-27 09:37:24+00:00
draft: false
title: codeforces 612 D. The Union of k-Segments
type: post
url: /2015/12/cf612d/
categories:
- ACM
tags:
- sortings
---

http://codeforces.com/contest/612/problem/D

题意：给出n个线段信息，每个线段以l,r的形式给出。给定k。要求从作到右给出至少有k个线段覆盖的区间的信息。并使得区间数目尽可能少。

思路：很经典的一类问题...又想起了当年在tyvj上海洋兄给我的那个把线段比喻成公路，把两个端点比喻成收费站的比喻了。做法是把所有点的信息按照从小到大排序，并且记录点的类型信息，如果点相同，那么我们规定入口处的优先级高。用pair来搞的话。。可以把入口的type规定成-1，出口规定成1.然后从最左边的点开始扫，遇到-1的点厚度+1，遇到1的点厚度-1.当厚度为k的时候记录区间信息。

 

    
    /* ***********************************************
    Author :111qqz
    Created Time :2015年12月26日 星期六 00时14分09秒
    File Name :code/cf/edu4/D.cpp
    ************************************************ */
    
    #include <cstdio>
    #include <cstring>
    #include <iostream>
    #include <algorithm>
    #include <vector>
    #include <queue>
    #include <set>
    #include <map>
    #include <string>
    #include <cmath>
    #include <cstdlib>
    #include <ctime>
    #define fst first
    #define sec second
    #define lson l,m,rt<<1
    #define rson m+1,r,rt<<1|1
    #define ms(a,x) memset(a,x,sizeof(a))
    typedef long long LL;
    #define pi pair < int ,int >
    #define MP make_pair
    
    using namespace std;
    const double eps = 1E-8;
    const int dx4[4]={1,0,0,-1};
    const int dy4[4]={0,-1,1,0};
    const int inf = 0x3f3f3f3f;
    const int N=1E6+7;
    int n ,k;
    
    vector< pi> v,ans;
    
    int main()
    {
    	#ifndef  ONLINE_JUDGE 
    	freopen("code/in.txt","r",stdin);
      #endif
    	cin>>n>>k;
    
    	for ( int i =1  ;i <= n ; i++)
    	{
    	    int s,e;
    	    scanf("%d %d",&s,&e);
    	    v.push_back(MP(s,-1));
    	    v.push_back(MP(e,1));
    	}
    
    	sort(v.begin(),v.end());
    
    	n = v.size();
    	
    	int cnt = 0 ;
    	pi tmp;
    	for ( int i = 0 ; i < n ; i++)
    	{
    	    if (v[i].sec==-1)
    	    {
    		cnt++;
    		if (cnt==k)
    		{
    		    tmp.fst = v[i].fst;
    		}
    	    }
    	    else
    	    {
    		if (cnt==k)
    		{
    		    tmp.sec = v[i].fst;
    		    ans.push_back(tmp);
    		}
    		cnt--;
    	    }
    	}
    	n = ans.size();
    	printf("%d\n",n);
    	for ( int i = 0 ; i < n ; i++)
    	{
    	    printf("%d %d\n",ans[i].fst,ans[i].sec);
    	}
    
    
      #ifndef ONLINE_JUDGE  
      fclose(stdin);
      #endif
        return 0;
    }
    



