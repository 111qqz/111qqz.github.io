---
author: 111qqz
date: 2015-07-29 13:03:00+00:00
draft: false
title: poj 2823 Sliding Window (单调队列)
type: post
url: /2015/07/poj2823/
categories:
- ACM

tags:
- 单调队列
---

Sliding Window






看这个问题：An array of size _n_ ≤ 106 is given to you. There is a sliding window of size _k_ which is moving from the very left of the array to the very right. You can only see the _k_ numbers in the window. Each time the sliding window moves rightwards by one position.Your task is to determine the maximum and minimum values in the sliding window at each position.

也就是有一个数列a，要求你求数列b和c，b[i]是a[i]…a[i+w-1]中的最小值，c[i]是最大值。如果a是1,3,-1,-3,5,3,6,7，则b为-1,-3,-3,-3,3,3，c为3,3,5,5,6,7。

这个问题相当于一个数据流（数列a）在不断地到来，而数据是不断过期的，相当于我们只能保存有限的数据（sliding window中的数据，此题中就是窗口的宽度w），对于到来的查询（此题中查询是每时刻都有的），我们要返回当前滑动窗口中的最大值最小值。注意，元素是不断过期的。

解决这个问题可以使用一种叫做单调队列的数据结构，它维护这样一种队列：

a)从队头到队尾，元素在我们所关注的指标下是递减的（严格递减，而不是非递增），比如查询如果每次问的是窗口内的最小值，那么队列中元素从左至右就应该递增，如果每次问的是窗口内的最大值，则应该递减，依此类推。这是为了保证每次查询只需要取队头元素。

b)从队头到队尾，元素对应的时刻（此题中是该元素在数列a中的下标）是递增的，但不要求连续，这是为了保证最左面的元素总是最先过期，且每当有新元素来临的时候一定是插入队尾。

满足以上两点的队列就是单调队列，首先，只有第一个元素的序列一定是单调队列。

那么怎么维护这个单调队列呢？无非是处理插入和查询两个操作。

对于插入，由于性质b，因此来的新元素插入到队列的最后就能维持b)继续成立。但是为了维护a)的成立，即元素在我们关注的指标下递减，从队尾插入新元素的时候可能要删除队尾的一些元素，具体说来就是，找到第一个大于（在所关注指标下）新元素的元素，删除其后所有元素，并将新元素插于其后。**因为所有被删除的元素都比新元素要小，而且比新元素要旧，因此在以后的任何查询中都不可能成为答案，所以可以放心删除。**

对于查询，由于性质b，因此所有该时刻过期的元素一定都集中在队头，因此利用查询的时机删除队头所有过期的元素，在不含过期元素后，队头得元素就是查询的答案（性质a），将其返回即可。

由于每个元素都进队出队一次，因此摊销复杂度为O(n)。

POJ2823就是上面描述的那道题。


> 
> </blockquote>






http://www.cnblogs.com/Jason-Damon/archive/2012/04/19/2457889.html

讲得很好.我认为重点的地方加颜色了.

如果要找最大值,那么比新加入的元素小且旧的元素是不可能成为答案的,可以放心删去!

理解了这句话就理解了单调队列...


上面那个博客将得是挺好,只是代码写得略丑.

自己按照思想写了个还看得过去的

```c++
    
    /*************************************************************************
    	> File Name: code/2015summer/单调队列/B.cpp
    	> Author: 111qqz
    	> Email: rkz2013@126.com 
    	> Created Time: 2015年07月29日 星期三 20时18分16秒
     ************************************************************************/
    
    #include<iostream>
    #include<iomanip>
    #include<cstdio>
    #include<algorithm>
    #include<cmath>
    #include<cstring>
    #include<string>
    #include<map>
    #include<set>
    #include<queue>
    #include<vector>
    #include<stack>
    #define y0 abc111qqz
    #define y1 hust111qqz
    #define yn hez111qqz
    #define j1 cute111qqz
    #define tm crazy111qqz
    #define lr dying111qqz
    using namespace std;
    #define REP(i, n) for (int i=0;i<int(n);++i)  
    typedef long long LL;
    typedef unsigned long long ULL;
    const int inf = 0x7fffffff;
    const int N=1E6+7;
    int a[N],mxans[N],q[N],indx[N],mians[N];
    int n,k;
    int head,tail;
    
    int main()
    {
        cin>>n>>k;
        for ( int   i = 0 ; i < n ; i++ )
        {
    	scanf("%d",&a[i]);
        }
        head = 1 ; tail = 0;
        for ( int i = 0; i < n ; i++)
        {
    	if (indx[head]+k-1<i)
    	{
    	    head++;
    	}
    	while (head<=tail&&q[tail]<=a[i]) tail--;
    	tail++;
    	q[tail]=a[i];
    	indx[tail]=i;
    	if (i>=k-1)
    	{
    	    mxans[i-k+1]=q[head];
    	}
        }
        head = 1 ; tail = 0;
        memset(q,0,sizeof(q));
        for ( int i  = 0 ; i < n ; i++)
        {
    	if (indx[head]+k-1<i)
    	{
    	    head++;
    	}
    	while (head<=tail&&q[tail]>=a[i]) tail--;
    	tail++;
    	q[tail]=a[i];
    	indx[tail]=i;
    	if (i>=k-1)
    	{
    	    mians[i-k+1]=q[head];
    	}
        }
        for ( int i = 0 ; i < n-k+1 ; i++ )
        {
    	if (i==0)
    	    cout<<mians[i];
    	else cout<<" "<<mians[i];
        }
        cout<<endl;
        for ( int i = 0 ; i < n-k+1 ; i++ )
        {
    	if (i==0)
    	    cout<<mxans[i];
    	else cout<<" "<<mxans[i];
        }
      
    	return 0;
    }
    

```




更新一个双端队列实现的（为毛交g++会Tle，交c++才能过2333）：

  
```c++
    
    /* ***********************************************
    Author :111qqz
    Created Time :2016年08月05日 星期五 00时09分33秒
    File Name :code/poj/2823.cpp
    ************************************************ */
    
    #include <cstdio>
    #include <cstring>
    #include <iostream>
    #include <algorithm>
    #include <vector>
    #include <queue>
    #include <set>
    #include <map>
    #include <string>
    #include <cmath>
    #include <cstdlib>
    #include <ctime>
    #include <deque>
    #define fst first
    #define sec second
    #define lson l,m,rt<<1
    #define rson m+1,r,rt<<1|1
    #define ms(a,x) memset(a,x,sizeof(a))
    typedef long long LL;
    #define pi pair < int ,int >
    #define MP make_pair
    
    using namespace std;
    const double eps = 1E-8;
    const int dx4[4]={1,0,0,-1};
    const int dy4[4]={0,-1,1,0};
    const int inf = 0x3f3f3f3f;
    const int N=1E6+7;
    int n,k;
    int a[N];
    int mn[N],mx[N];
    deque<int>dq;
    int main()
    {
    	#ifndef  ONLINE_JUDGE 
    	freopen("code/in.txt","r",stdin);
      #endif
    	scanf("%d%d",&n,&k);
    	for ( int i = 1 ; i <= n ; i++) scanf("%d",&a[i]);
    	for ( int i = 1 ; i <= n ; i++)
    	{
    	    while (!dq.empty()&&dq.front()<i-k+1)dq.pop_front();
    	    while (!dq.empty()&&a[dq.back()]>=a[i]) dq.pop_back();
    	    dq.push_back(i);
    	    if (i>=k)
    		mn[i-k+1] = a[dq.front()];
    	}
    	
    	dq.clear();
    
    	for ( int i = 1 ; i <= n ; i++)
    	{
    	    while (!dq.empty()&&dq.front()<i-k+1) dq.pop_front();
    	    while (!dq.empty()&&a[dq.back()]<=a[i]) dq.pop_back();
    	    dq.push_back(i);
    	    if (i>=k)
    		mx[i-k+1] = a[dq.front()];
    	}
    
    	for ( int i = 1 ; i <n-k+1 ; i++)
    	    printf("%d ",mn[i]);
    	printf("%d\n",mn[n-k+1]);
    	for ( int i = 1 ; i < n-k+1 ; i++)
    	    printf("%d ",mx[i]);
    	printf("%d\n",mx[n-k+1]);
    
      #ifndef ONLINE_JUDGE  
      fclose(stdin);
      #endif
        return 0;
    }
    

```


